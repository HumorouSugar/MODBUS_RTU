
UART_Reciever.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007354  08007354  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800735c  0800735c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800735c  0800735c  0001735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000100  08007464  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08007464  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d31  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a1  00000000  00000000  00032ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00036248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d20  00000000  00000000  00037370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae6f  00000000  00000000  00038090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bc5  00000000  00000000  00052eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097667  00000000  00000000  0006bac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e08  00000000  00000000  0010312c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00107f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f8c 	.word	0x08006f8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	08006f8c 	.word	0x08006f8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f002 f8b3 	bl	8002cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f84b 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f9af 	bl	8000ef8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 f959 	bl	8000e50 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b9e:	f000 f90b 	bl	8000db8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 f97f 	bl	8000ea4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ba6:	f000 f8ad 	bl	8000d04 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	MT_PORT_SetTimerModule(&htim3);
 8000baa:	4819      	ldr	r0, [pc, #100]	; (8000c10 <main+0x88>)
 8000bac:	f001 fcb8 	bl	8002520 <MT_PORT_SetTimerModule>
	MT_PORT_SetUartModule(&huart1);
 8000bb0:	4818      	ldr	r0, [pc, #96]	; (8000c14 <main+0x8c>)
 8000bb2:	f001 fcc5 	bl	8002540 <MT_PORT_SetUartModule>
//	SerialPort_create(&huart1, 9600, 8, 'E',1);
//	printCP56Time2a(56);
//	SerialPort_destroy(serialPort);
//	 CS101_Slave_run(&htim3);
	eMBErrorCode eStatus;
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 19200, MB_PAR_NONE);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210a      	movs	r1, #10
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fcde 	bl	8001584 <eMBInit>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	eStatus = eMBEnable();
 8000bcc:	f000 fd56 	bl	800167c <eMBEnable>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
	{

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		eMBPoll();
 8000bd4:	f000 fd6e 	bl	80016b4 <eMBPoll>
		usRegInputBuf[REG_INPUT_NREGS - 2] =  HAL_GetTick() / 1000;
 8000bd8:	f002 f8f4 	bl	8002dc4 <HAL_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <main+0x90>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	099b      	lsrs	r3, r3, #6
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <main+0x94>)
 8000bea:	819a      	strh	r2, [r3, #12]
		usRegInputBuf[REG_INPUT_NREGS - 1] =  HAL_GetTick();
 8000bec:	f002 f8ea 	bl	8002dc4 <HAL_GetTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <main+0x94>)
 8000bf6:	81da      	strh	r2, [r3, #14]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4909      	ldr	r1, [pc, #36]	; (8000c20 <main+0x98>)
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <main+0x9c>)
 8000bfe:	f003 fa9d 	bl	800413c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c02:	2200      	movs	r2, #0
 8000c04:	4908      	ldr	r1, [pc, #32]	; (8000c28 <main+0xa0>)
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <main+0x9c>)
 8000c08:	f003 fb7a 	bl	8004300 <HAL_RTC_GetDate>
		eMBPoll();
 8000c0c:	e7e2      	b.n	8000bd4 <main+0x4c>
 8000c0e:	bf00      	nop
 8000c10:	2000013c 	.word	0x2000013c
 8000c14:	20000184 	.word	0x20000184
 8000c18:	10624dd3 	.word	0x10624dd3
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000230 	.word	0x20000230
 8000c24:	2000011c 	.word	0x2000011c
 8000c28:	20000244 	.word	0x20000244

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	; 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2230      	movs	r2, #48	; 0x30
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fc70 	bl	8006520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <SystemClock_Config+0xd4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <SystemClock_Config+0xd4>)
 8000c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <SystemClock_Config+0xd4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ca4:	2319      	movs	r3, #25
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ca8:	23a8      	movs	r3, #168	; 0xa8
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fbe9 	bl	8003490 <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cc4:	f000 fc58 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fe4b 	bl	8003980 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cf0:	f000 fc42 	bl	8001578 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	; 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d1e:	4a25      	ldr	r2, [pc, #148]	; (8000db4 <MX_RTC_Init+0xb0>)
 8000d20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d2a:	227f      	movs	r2, #127	; 0x7f
 8000d2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d30:	22ff      	movs	r2, #255	; 0xff
 8000d32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d48:	f003 f8e8 	bl	8003f1c <HAL_RTC_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d52:	f000 fc11 	bl	8001578 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 8000d56:	230e      	movs	r3, #14
 8000d58:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000d5a:	2334      	movs	r3, #52	; 0x34
 8000d5c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d72:	f003 f949 	bl	8004008 <HAL_RTC_SetTime>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 fbfc 	bl	8001578 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000d80:	2304      	movs	r3, #4
 8000d82:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d84:	2301      	movs	r3, #1
 8000d86:	707b      	strb	r3, [r7, #1]
  sDate.Date = 11;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000d8c:	2318      	movs	r3, #24
 8000d8e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_RTC_Init+0xac>)
 8000d98:	f003 fa2e 	bl	80041f8 <HAL_RTC_SetDate>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000da2:	f000 fbe9 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000011c 	.word	0x2000011c
 8000db4:	40002800 	.word	0x40002800

08000db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <MX_TIM3_Init+0x94>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000ddc:	2253      	movs	r2, #83	; 0x53
 8000dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000de8:	2232      	movs	r2, #50	; 0x32
 8000dea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000dfa:	f003 fb8d 	bl	8004518 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000e04:	f000 fbb8 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000e16:	f003 fd68 	bl	80048ea <HAL_TIM_ConfigClockSource>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000e20:	f000 fbaa 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_TIM3_Init+0x90>)
 8000e32:	f003 ff63 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000e3c:	f000 fb9c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000013c 	.word	0x2000013c
 8000e4c:	40000400 	.word	0x40000400

08000e50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART1_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e5c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e88:	f003 ffba 	bl	8004e00 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 fb71 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000184 	.word	0x20000184
 8000ea0:	40011000 	.word	0x40011000

08000ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_USART2_UART_Init+0x50>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000edc:	f003 ff90 	bl	8004e00 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ee6:	f000 fb47 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001c8 	.word	0x200001c8
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b48      	ldr	r3, [pc, #288]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a47      	ldr	r2, [pc, #284]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b41      	ldr	r3, [pc, #260]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a40      	ldr	r2, [pc, #256]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a39      	ldr	r2, [pc, #228]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b33      	ldr	r3, [pc, #204]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a32      	ldr	r2, [pc, #200]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b30      	ldr	r3, [pc, #192]	; (8001034 <MX_GPIO_Init+0x13c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f84:	482c      	ldr	r0, [pc, #176]	; (8001038 <MX_GPIO_Init+0x140>)
 8000f86:	f002 fa51 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4825      	ldr	r0, [pc, #148]	; (8001038 <MX_GPIO_Init+0x140>)
 8000fa4:	f002 f8be 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fa8:	23f0      	movs	r3, #240	; 0xf0
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481f      	ldr	r0, [pc, #124]	; (800103c <MX_GPIO_Init+0x144>)
 8000fbe:	f002 f8b1 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fc6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481a      	ldr	r0, [pc, #104]	; (8001040 <MX_GPIO_Init+0x148>)
 8000fd8:	f002 f8a4 	bl	8003124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f001 ffd6 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f001 ffef 	bl	8002fca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2007      	movs	r0, #7
 8000ff2:	f001 ffce 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f001 ffe7 	bl	8002fca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	2008      	movs	r0, #8
 8001002:	f001 ffc6 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001006:	2008      	movs	r0, #8
 8001008:	f001 ffdf 	bl	8002fca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	200a      	movs	r0, #10
 8001012:	f001 ffbe 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001016:	200a      	movs	r0, #10
 8001018:	f001 ffd7 	bl	8002fca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2017      	movs	r0, #23
 8001022:	f001 ffb6 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001026:	2017      	movs	r0, #23
 8001028:	f001 ffcf 	bl	8002fca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40020800 	.word	0x40020800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400

08001044 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	usRegDiscreteBuf[0] = 0;
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	usRegDiscreteBuf[1] = (GPIOA->IDR & GPIO_IDR_ID4) >> 4;
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 8001064:	705a      	strb	r2, [r3, #1]
	usRegDiscreteBuf[2] = (GPIOA->IDR & GPIO_IDR_ID5) >> 5;
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 8001076:	709a      	strb	r2, [r3, #2]
	usRegDiscreteBuf[3] = (GPIOA->IDR & GPIO_IDR_ID6) >> 6;
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 8001088:	70da      	strb	r2, [r3, #3]
	usRegDiscreteBuf[4] = (GPIOA->IDR & GPIO_IDR_ID7) >> 7;
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	09db      	lsrs	r3, r3, #7
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 800109a:	711a      	strb	r2, [r3, #4]
	usRegDiscreteBuf[5] = (GPIOB->IDR & GPIO_IDR_ID0);
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_GPIO_EXTI_Callback+0xf4>)
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 80010aa:	715a      	strb	r2, [r3, #5]
	usRegDiscreteBuf[6] = (GPIOB->IDR & GPIO_IDR_ID1) >> 1;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	085b      	lsrs	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 80010bc:	719a      	strb	r2, [r3, #6]
	usRegDiscreteBuf[7] = (GPIOB->IDR & GPIO_IDR_ID2) >> 2;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 80010ce:	71da      	strb	r2, [r3, #7]
	a = ((GPIOB->IDR & GPIO_IDR_ID0) | (GPIOB->IDR & GPIO_IDR_ID1) | (GPIOB->IDR & GPIO_IDR_ID2) | (GPIOA->IDR & GPIO_IDR_ID3)
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	f003 0201 	and.w	r2, r3, #1
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	431a      	orrs	r2, r3
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	431a      	orrs	r2, r3
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	431a      	orrs	r2, r3
| (GPIOA->IDR & GPIO_IDR_ID4) | (GPIOA->IDR & GPIO_IDR_ID5) | (GPIOA->IDR & GPIO_IDR_ID6) | (GPIOA->IDR & GPIO_IDR_ID7));
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	431a      	orrs	r2, r3
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	431a      	orrs	r2, r3
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001112:	431a      	orrs	r2, r3
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111c:	4313      	orrs	r3, r2
 800111e:	461a      	mov	r2, r3
	a = ((GPIOB->IDR & GPIO_IDR_ID0) | (GPIOB->IDR & GPIO_IDR_ID1) | (GPIOB->IDR & GPIO_IDR_ID2) | (GPIOA->IDR & GPIO_IDR_ID3)
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000214 	.word	0x20000214
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	2000022c 	.word	0x2000022c

08001140 <eMBRegInputCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	803b      	strh	r3, [r7, #0]
	return MB_ENOREG;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <eMBRegHoldingCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
		eMBRegisterMode eMode)
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4603      	mov	r3, r0
 8001170:	817b      	strh	r3, [r7, #10]
 8001172:	460b      	mov	r3, r1
 8001174:	813b      	strh	r3, [r7, #8]
 8001176:	4613      	mov	r3, r2
 8001178:	71fb      	strb	r3, [r7, #7]
	eMBErrorCode eStatus = MB_ENOERR;
 800117a:	2300      	movs	r3, #0
 800117c:	75fb      	strb	r3, [r7, #23]
	short iNRegs = ( short )usNRegs;
 800117e:	893b      	ldrh	r3, [r7, #8]
 8001180:	82bb      	strh	r3, [r7, #20]
	int iRegIndex = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]

	if(( usAddress >= REG_HOLDING_START ) &&( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ))
 8001186:	897b      	ldrh	r3, [r7, #10]
 8001188:	2b09      	cmp	r3, #9
 800118a:	f240 8103 	bls.w	8001394 <eMBRegHoldingCB+0x234>
 800118e:	897a      	ldrh	r2, [r7, #10]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	4413      	add	r3, r2
 8001194:	2b11      	cmp	r3, #17
 8001196:	f300 80fd 	bgt.w	8001394 <eMBRegHoldingCB+0x234>
	{
		iRegIndex = (int)(usAddress - usRegHoldingStart);
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	4a86      	ldr	r2, [pc, #536]	; (80013b8 <eMBRegHoldingCB+0x258>)
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
		switch ( eMode )
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <eMBRegHoldingCB+0x52>
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	f000 809e 	beq.w	80012ec <eMBRegHoldingCB+0x18c>
 80011b0:	e0f2      	b.n	8001398 <eMBRegHoldingCB+0x238>
		{
		case MB_REG_READ:
			usRegHoldingBuf[REG_HOLDING_NREGS - 7] = sDate.Year;
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <eMBRegHoldingCB+0x25c>)
 80011b4:	78db      	ldrb	r3, [r3, #3]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80011ba:	801a      	strh	r2, [r3, #0]
			usRegHoldingBuf[REG_HOLDING_NREGS - 6] = sDate.Month;
 80011bc:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <eMBRegHoldingCB+0x25c>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80011c4:	805a      	strh	r2, [r3, #2]
			usRegHoldingBuf[REG_HOLDING_NREGS - 5] = sDate.Date;
 80011c6:	4b7d      	ldr	r3, [pc, #500]	; (80013bc <eMBRegHoldingCB+0x25c>)
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b7c      	ldr	r3, [pc, #496]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80011ce:	809a      	strh	r2, [r3, #4]
			usRegHoldingBuf[REG_HOLDING_NREGS - 4] = sTime.Hours;
 80011d0:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <eMBRegHoldingCB+0x264>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80011d8:	80da      	strh	r2, [r3, #6]
			usRegHoldingBuf[REG_HOLDING_NREGS - 3] = sTime.Minutes;
 80011da:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <eMBRegHoldingCB+0x264>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80011e2:	811a      	strh	r2, [r3, #8]
			usRegHoldingBuf[REG_HOLDING_NREGS - 2] = sTime.Seconds;
 80011e4:	4b77      	ldr	r3, [pc, #476]	; (80013c4 <eMBRegHoldingCB+0x264>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80011ec:	815a      	strh	r2, [r3, #10]
			usRegHoldingBuf[REG_HOLDING_NREGS - 1] = ((sTime.Seconds)*1000) + (999 - ((sTime.SubSeconds)*3.91)+3);
 80011ee:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <eMBRegHoldingCB+0x264>)
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fabb 	bl	8000778 <__aeabi_i2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <eMBRegHoldingCB+0x264>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff faa4 	bl	8000758 <__aeabi_ui2d>
 8001210:	a365      	add	r3, pc, #404	; (adr r3, 80013a8 <eMBRegHoldingCB+0x248>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f833 	bl	8000280 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	a164      	add	r1, pc, #400	; (adr r1, 80013b0 <eMBRegHoldingCB+0x250>)
 8001220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001224:	f7ff f95a 	bl	80004dc <__aeabi_dsub>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <eMBRegHoldingCB+0x268>)
 8001236:	f7ff f953 	bl	80004e0 <__adddf3>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4620      	mov	r0, r4
 8001240:	4629      	mov	r1, r5
 8001242:	f7ff f94d 	bl	80004e0 <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fafd 	bl	800084c <__aeabi_d2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <eMBRegHoldingCB+0x260>)
 8001258:	819a      	strh	r2, [r3, #12]
			while(iNRegs > 0)
 800125a:	e01c      	b.n	8001296 <eMBRegHoldingCB+0x136>
			{
				*pucRegBuffer++ = (usRegHoldingBuf[iRegIndex] >> 8);
 800125c:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <eMBRegHoldingCB+0x260>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	b299      	uxth	r1, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60fa      	str	r2, [r7, #12]
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ = (usRegHoldingBuf[iRegIndex] & 0xFF);
 8001272:	4a53      	ldr	r2, [pc, #332]	; (80013c0 <eMBRegHoldingCB+0x260>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60fa      	str	r2, [r7, #12]
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]

				iRegIndex++;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	3301      	adds	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
				iNRegs--;
 800128a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b01      	subs	r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	82bb      	strh	r3, [r7, #20]
			while(iNRegs > 0)
 8001296:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	dcde      	bgt.n	800125c <eMBRegHoldingCB+0xfc>
			}
		case MB_REG_WRITE:
			while( iNRegs > 0 )
 800129e:	e025      	b.n	80012ec <eMBRegHoldingCB+0x18c>
			{
				usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60fa      	str	r2, [r7, #12]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b299      	uxth	r1, r3
 80012ae:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	60fa      	str	r2, [r7, #12]
 80012bc:	7819      	ldrb	r1, [r3, #0]
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012c6:	b28b      	uxth	r3, r1
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b299      	uxth	r1, r3
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <eMBRegHoldingCB+0x260>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				iRegIndex++;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	3301      	adds	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
				iNRegs--;
 80012da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3b01      	subs	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	82bb      	strh	r3, [r7, #20]
				rdy_set_time = 1;
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <eMBRegHoldingCB+0x26c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
			while( iNRegs > 0 )
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dcd5      	bgt.n	80012a0 <eMBRegHoldingCB+0x140>
			}
			if(rdy_set_time == 1)
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <eMBRegHoldingCB+0x26c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d149      	bne.n	8001390 <eMBRegHoldingCB+0x230>
			{
				__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <eMBRegHoldingCB+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	22ca      	movs	r2, #202	; 0xca
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <eMBRegHoldingCB+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2253      	movs	r2, #83	; 0x53
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
				sTime.Hours = usRegHoldingBuf[REG_HOLDING_NREGS - 4];
 800130c:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <eMBRegHoldingCB+0x260>)
 800130e:	88db      	ldrh	r3, [r3, #6]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <eMBRegHoldingCB+0x264>)
 8001314:	701a      	strb	r2, [r3, #0]
				sTime.Minutes = usRegHoldingBuf[REG_HOLDING_NREGS - 3];
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <eMBRegHoldingCB+0x260>)
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <eMBRegHoldingCB+0x264>)
 800131e:	705a      	strb	r2, [r3, #1]
				sTime.Seconds = usRegHoldingBuf[REG_HOLDING_NREGS - 2];
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <eMBRegHoldingCB+0x260>)
 8001322:	895b      	ldrh	r3, [r3, #10]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <eMBRegHoldingCB+0x264>)
 8001328:	709a      	strb	r2, [r3, #2]
				sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <eMBRegHoldingCB+0x264>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
				sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <eMBRegHoldingCB+0x264>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
				if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001336:	2200      	movs	r2, #0
 8001338:	4922      	ldr	r1, [pc, #136]	; (80013c4 <eMBRegHoldingCB+0x264>)
 800133a:	4825      	ldr	r0, [pc, #148]	; (80013d0 <eMBRegHoldingCB+0x270>)
 800133c:	f002 fe64 	bl	8004008 <HAL_RTC_SetTime>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <eMBRegHoldingCB+0x1ea>
				{
					Error_Handler();
 8001346:	f000 f917 	bl	8001578 <Error_Handler>
				}
				sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <eMBRegHoldingCB+0x25c>)
 800134c:	2204      	movs	r2, #4
 800134e:	701a      	strb	r2, [r3, #0]
				sDate.Date = usRegHoldingBuf[REG_HOLDING_NREGS - 5];
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <eMBRegHoldingCB+0x260>)
 8001352:	889b      	ldrh	r3, [r3, #4]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <eMBRegHoldingCB+0x25c>)
 8001358:	709a      	strb	r2, [r3, #2]
				sDate.Month = usRegHoldingBuf[REG_HOLDING_NREGS - 6];
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <eMBRegHoldingCB+0x260>)
 800135c:	885b      	ldrh	r3, [r3, #2]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <eMBRegHoldingCB+0x25c>)
 8001362:	705a      	strb	r2, [r3, #1]
				sDate.Year = usRegHoldingBuf[REG_HOLDING_NREGS - 7];
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <eMBRegHoldingCB+0x260>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <eMBRegHoldingCB+0x25c>)
 800136c:	70da      	strb	r2, [r3, #3]

				if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800136e:	2200      	movs	r2, #0
 8001370:	4912      	ldr	r1, [pc, #72]	; (80013bc <eMBRegHoldingCB+0x25c>)
 8001372:	4817      	ldr	r0, [pc, #92]	; (80013d0 <eMBRegHoldingCB+0x270>)
 8001374:	f002 ff40 	bl	80041f8 <HAL_RTC_SetDate>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <eMBRegHoldingCB+0x222>
				{
					Error_Handler();
 800137e:	f000 f8fb 	bl	8001578 <Error_Handler>
				}
				__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <eMBRegHoldingCB+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
				rdy_set_time = 0;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <eMBRegHoldingCB+0x26c>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001390:	bf00      	nop
		switch ( eMode )
 8001392:	e001      	b.n	8001398 <eMBRegHoldingCB+0x238>
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 8001394:	2301      	movs	r3, #1
 8001396:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 8001398:	7dfb      	ldrb	r3, [r7, #23]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	147ae148 	.word	0x147ae148
 80013ac:	400f47ae 	.word	0x400f47ae
 80013b0:	00000000 	.word	0x00000000
 80013b4:	408f3800 	.word	0x408f3800
 80013b8:	20000012 	.word	0x20000012
 80013bc:	20000244 	.word	0x20000244
 80013c0:	2000021c 	.word	0x2000021c
 80013c4:	20000230 	.word	0x20000230
 80013c8:	40080000 	.word	0x40080000
 80013cc:	20000248 	.word	0x20000248
 80013d0:	2000011c 	.word	0x2000011c

080013d4 <eMBRegCoilsCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
		eMBRegisterMode eMode)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	817b      	strh	r3, [r7, #10]
 80013e6:	460b      	mov	r3, r1
 80013e8:	813b      	strh	r3, [r7, #8]
 80013ea:	4613      	mov	r3, r2
 80013ec:	71fb      	strb	r3, [r7, #7]

	eMBErrorCode    eStatus = MB_ENOERR;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]
	short           iNCoils = ( short )usNCoils;
 80013f2:	893b      	ldrh	r3, [r7, #8]
 80013f4:	82bb      	strh	r3, [r7, #20]
	int iRegIndex = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]

	if( ( usAddress >= REG_COILS_START ) &&( usAddress + usNCoils <= REG_COILS_START + REG_COILS_NREGS ) )
 80013fa:	897b      	ldrh	r3, [r7, #10]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d95f      	bls.n	80014c0 <eMBRegCoilsCB+0xec>
 8001400:	897a      	ldrh	r2, [r7, #10]
 8001402:	893b      	ldrh	r3, [r7, #8]
 8001404:	4413      	add	r3, r2
 8001406:	2b0e      	cmp	r3, #14
 8001408:	dc5a      	bgt.n	80014c0 <eMBRegCoilsCB+0xec>
	{
		iRegIndex = (int)(usAddress - usRegCoilStart);
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <eMBRegCoilsCB+0x100>)
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	613b      	str	r3, [r7, #16]
		switch ( eMode )
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <eMBRegCoilsCB+0x4c>
 800141a:	2b01      	cmp	r3, #1
 800141c:	d04a      	beq.n	80014b4 <eMBRegCoilsCB+0xe0>
 800141e:	e051      	b.n	80014c4 <eMBRegCoilsCB+0xf0>
		{
		case MB_REG_READ:
			*pucRegBuffer = 0x00;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
			while( iNCoils > 0 )
 8001426:	e01b      	b.n	8001460 <eMBRegCoilsCB+0x8c>
			{
				if (usRegCoilBuf[iRegIndex] != 0x0000)
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <eMBRegCoilsCB+0x104>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <eMBRegCoilsCB+0x7a>
				{
					*pucRegBuffer |= ( 1 << iRegIndex);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25a      	sxtb	r2, r3
 800143a:	2101      	movs	r1, #1
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b25b      	sxtb	r3, r3
 8001448:	b2da      	uxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	701a      	strb	r2, [r3, #0]
				}

				iRegIndex++;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	3301      	adds	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
				iNCoils--;
 8001454:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	82bb      	strh	r3, [r7, #20]
			while( iNCoils > 0 )
 8001460:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dcdf      	bgt.n	8001428 <eMBRegCoilsCB+0x54>
			}
			break;
 8001468:	e029      	b.n	80014be <eMBRegCoilsCB+0xea>
		case MB_REG_WRITE:
			while( iNCoils > 0 )
			{
				usRegCoilBuf[iRegIndex] = *pucRegBuffer++;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	7819      	ldrb	r1, [r3, #0]
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <eMBRegCoilsCB+0x104>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4413      	add	r3, r2
 8001478:	460a      	mov	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
				usRegCoilBuf[iRegIndex] |= *pucRegBuffer++ << 8;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60fa      	str	r2, [r7, #12]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	0219      	lsls	r1, r3, #8
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <eMBRegCoilsCB+0x104>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b25a      	sxtb	r2, r3
 8001490:	b24b      	sxtb	r3, r1
 8001492:	4313      	orrs	r3, r2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	b2d9      	uxtb	r1, r3
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <eMBRegCoilsCB+0x104>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
				iRegIndex++;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	3301      	adds	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
				iNCoils--;
 80014a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	82bb      	strh	r3, [r7, #20]
			while( iNCoils > 0 )
 80014b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dcd6      	bgt.n	800146a <eMBRegCoilsCB+0x96>
			}
			break;
 80014bc:	bf00      	nop
		switch ( eMode )
 80014be:	e001      	b.n	80014c4 <eMBRegCoilsCB+0xf0>
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 80014c0:	2301      	movs	r3, #1
 80014c2:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000010 	.word	0x20000010
 80014d8:	2000020c 	.word	0x2000020c

080014dc <eMBRegDiscreteCB>:



/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegDiscreteCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	803b      	strh	r3, [r7, #0]
	eMBErrorCode    eStatus = MB_ENOERR;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
	short           iNCoils = ( short )usNDiscrete;
 80014f0:	883b      	ldrh	r3, [r7, #0]
 80014f2:	81bb      	strh	r3, [r7, #12]
	int iRegIndex = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]

	if( ( usAddress >= REG_DISCRETE_START ) &&( usAddress + usNDiscrete <= REG_DISCRETE_START + REG_DISCRETE_NREGS ) )
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	2bc7      	cmp	r3, #199	; 0xc7
 80014fc:	d92e      	bls.n	800155c <eMBRegDiscreteCB+0x80>
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	883b      	ldrh	r3, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	2bd0      	cmp	r3, #208	; 0xd0
 8001506:	dc29      	bgt.n	800155c <eMBRegDiscreteCB+0x80>
	{
		iRegIndex = (int)(usAddress - usRegDiscreteStart);
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <eMBRegDiscreteCB+0x94>)
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	60bb      	str	r3, [r7, #8]
		*pucRegBuffer = 0x00;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
		while( iNCoils > 0 )
 8001518:	e01b      	b.n	8001552 <eMBRegDiscreteCB+0x76>
		{
			if (usRegDiscreteBuf[iRegIndex] != 0x0000)
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <eMBRegDiscreteCB+0x98>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00c      	beq.n	8001540 <eMBRegDiscreteCB+0x64>
			{
				*pucRegBuffer |= ( 1 << iRegIndex);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25a      	sxtb	r2, r3
 800152c:	2101      	movs	r1, #1
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	b25b      	sxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	701a      	strb	r2, [r3, #0]
			}

			iRegIndex++;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3301      	adds	r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
			iNCoils--;
 8001546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	81bb      	strh	r3, [r7, #12]
		while( iNCoils > 0 )
 8001552:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dcdf      	bgt.n	800151a <eMBRegDiscreteCB+0x3e>
	if( ( usAddress >= REG_DISCRETE_START ) &&( usAddress + usNDiscrete <= REG_DISCRETE_START + REG_DISCRETE_NREGS ) )
 800155a:	e001      	b.n	8001560 <eMBRegDiscreteCB+0x84>
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
	}
	return eStatus;
 8001560:	7bfb      	ldrb	r3, [r7, #15]

}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000011 	.word	0x20000011
 8001574:	20000214 	.word	0x20000214

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	460b      	mov	r3, r1
 8001592:	71bb      	strb	r3, [r7, #6]
 8001594:	4613      	mov	r3, r2
 8001596:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <eMBInit+0x2a>
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	2bf7      	cmp	r3, #247	; 0xf7
 80015ac:	d902      	bls.n	80015b4 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80015ae:	2302      	movs	r3, #2
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e03a      	b.n	800162a <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80015b4:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <eMBInit+0xb0>)
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d121      	bne.n	8001604 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <eMBInit+0xb4>)
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <eMBInit+0xb8>)
 80015c4:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <eMBInit+0xbc>)
 80015c8:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <eMBInit+0xc0>)
 80015ca:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <eMBInit+0xc4>)
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <eMBInit+0xc8>)
 80015d0:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <eMBInit+0xcc>)
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <eMBInit+0xd0>)
 80015d6:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <eMBInit+0xd4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <eMBInit+0xd8>)
 80015e0:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <eMBInit+0xdc>)
 80015e2:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <eMBInit+0xe0>)
 80015e6:	4a20      	ldr	r2, [pc, #128]	; (8001668 <eMBInit+0xe4>)
 80015e8:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <eMBInit+0xe8>)
 80015ec:	4a20      	ldr	r2, [pc, #128]	; (8001670 <eMBInit+0xec>)
 80015ee:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <eMBInit+0xb0>)
 80015f2:	7818      	ldrb	r0, [r3, #0]
 80015f4:	7e3b      	ldrb	r3, [r7, #24]
 80015f6:	7979      	ldrb	r1, [r7, #5]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	f000 fd39 	bl	8002070 <eMBRTUInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
            break;
 8001602:	e001      	b.n	8001608 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8001604:	2302      	movs	r3, #2
 8001606:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 800160e:	f000 ffa7 	bl	8002560 <xMBPortEventInit>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8001618:	2303      	movs	r3, #3
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e005      	b.n	800162a <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <eMBInit+0xf0>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <eMBInit+0xf4>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000249 	.word	0x20000249
 8001638:	20000250 	.word	0x20000250
 800163c:	080020e9 	.word	0x080020e9
 8001640:	20000254 	.word	0x20000254
 8001644:	08002111 	.word	0x08002111
 8001648:	2000024c 	.word	0x2000024c
 800164c:	080021c1 	.word	0x080021c1
 8001650:	20000258 	.word	0x20000258
 8001654:	0800212d 	.word	0x0800212d
 8001658:	2000025c 	.word	0x2000025c
 800165c:	20000260 	.word	0x20000260
 8001660:	08002289 	.word	0x08002289
 8001664:	20000264 	.word	0x20000264
 8001668:	08002359 	.word	0x08002359
 800166c:	20000268 	.word	0x20000268
 8001670:	08002409 	.word	0x08002409
 8001674:	2000024a 	.word	0x2000024a
 8001678:	20000014 	.word	0x20000014

0800167c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8001682:	2300      	movs	r3, #0
 8001684:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <eMBEnable+0x30>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d106      	bne.n	800169c <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <eMBEnable+0x34>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <eMBEnable+0x30>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e001      	b.n	80016a0 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800169c:	2306      	movs	r3, #6
 800169e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000014 	.word	0x20000014
 80016b0:	20000250 	.word	0x20000250

080016b4 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80016ba:	2300      	movs	r3, #0
 80016bc:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80016be:	4b50      	ldr	r3, [pc, #320]	; (8001800 <eMBPoll+0x14c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 80016c6:	2306      	movs	r3, #6
 80016c8:	e095      	b.n	80017f6 <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80016ca:	1cbb      	adds	r3, r7, #2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 ff6b 	bl	80025a8 <xMBPortEventGet>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 808d 	bne.w	80017f4 <eMBPoll+0x140>
    {
        switch ( eEvent )
 80016da:	78bb      	ldrb	r3, [r7, #2]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f200 8089 	bhi.w	80017f4 <eMBPoll+0x140>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <eMBPoll+0x34>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080017f5 	.word	0x080017f5
 80016ec:	080016f9 	.word	0x080016f9
 80016f0:	0800172b 	.word	0x0800172b
 80016f4:	080017f5 	.word	0x080017f5
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <eMBPoll+0x150>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a42      	ldr	r2, [pc, #264]	; (8001808 <eMBPoll+0x154>)
 80016fe:	4943      	ldr	r1, [pc, #268]	; (800180c <eMBPoll+0x158>)
 8001700:	4843      	ldr	r0, [pc, #268]	; (8001810 <eMBPoll+0x15c>)
 8001702:	4798      	blx	r3
 8001704:	4603      	mov	r3, r0
 8001706:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d16f      	bne.n	80017ee <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <eMBPoll+0x15c>)
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <eMBPoll+0x160>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d003      	beq.n	8001722 <eMBPoll+0x6e>
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <eMBPoll+0x15c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d165      	bne.n	80017ee <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8001722:	2002      	movs	r0, #2
 8001724:	f000 ff2a 	bl	800257c <xMBPortEventPost>
                }
            }
            break;
 8001728:	e061      	b.n	80017ee <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <eMBPoll+0x158>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <eMBPoll+0x164>)
 8001732:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001734:	4b39      	ldr	r3, [pc, #228]	; (800181c <eMBPoll+0x168>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e01f      	b.n	8001780 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8001740:	4a37      	ldr	r2, [pc, #220]	; (8001820 <eMBPoll+0x16c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01d      	beq.n	8001788 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <eMBPoll+0x16c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <eMBPoll+0x164>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d10e      	bne.n	800177a <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <eMBPoll+0x16c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <eMBPoll+0x158>)
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4927      	ldr	r1, [pc, #156]	; (8001808 <eMBPoll+0x154>)
 800176c:	4610      	mov	r0, r2
 800176e:	4798      	blx	r3
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <eMBPoll+0x168>)
 8001776:	701a      	strb	r2, [r3, #0]
                    break;
 8001778:	e007      	b.n	800178a <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	dddc      	ble.n	8001740 <eMBPoll+0x8c>
 8001786:	e000      	b.n	800178a <eMBPoll+0xd6>
                    break;
 8001788:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <eMBPoll+0x15c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d02f      	beq.n	80017f2 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <eMBPoll+0x168>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01d      	beq.n	80017d6 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <eMBPoll+0x154>)
 800179c:	2200      	movs	r2, #0
 800179e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <eMBPoll+0x164>)
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <eMBPoll+0x158>)
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <eMBPoll+0x154>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	1c58      	adds	r0, r3, #1
 80017ae:	b284      	uxth	r4, r0
 80017b0:	4815      	ldr	r0, [pc, #84]	; (8001808 <eMBPoll+0x154>)
 80017b2:	8004      	strh	r4, [r0, #0]
 80017b4:	440b      	add	r3, r1
 80017b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <eMBPoll+0x158>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <eMBPoll+0x154>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	1c59      	adds	r1, r3, #1
 80017c8:	b288      	uxth	r0, r1
 80017ca:	490f      	ldr	r1, [pc, #60]	; (8001808 <eMBPoll+0x154>)
 80017cc:	8008      	strh	r0, [r1, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <eMBPoll+0x168>)
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <eMBPoll+0x170>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <eMBPoll+0x160>)
 80017dc:	7810      	ldrb	r0, [r2, #0]
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <eMBPoll+0x158>)
 80017e0:	6811      	ldr	r1, [r2, #0]
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <eMBPoll+0x154>)
 80017e4:	8812      	ldrh	r2, [r2, #0]
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	70fb      	strb	r3, [r7, #3]
            }
            break;
 80017ec:	e001      	b.n	80017f2 <eMBPoll+0x13e>
            break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <eMBPoll+0x140>
            break;
 80017f2:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000014 	.word	0x20000014
 8001804:	20000258 	.word	0x20000258
 8001808:	20000274 	.word	0x20000274
 800180c:	20000270 	.word	0x20000270
 8001810:	2000026c 	.word	0x2000026c
 8001814:	20000249 	.word	0x20000249
 8001818:	20000276 	.word	0x20000276
 800181c:	20000277 	.word	0x20000277
 8001820:	20000018 	.word	0x20000018
 8001824:	2000024c 	.word	0x2000024c

08001828 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8001838:	23ff      	movs	r3, #255	; 0xff
 800183a:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800183c:	e013      	b.n	8001866 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	4053      	eors	r3, r2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <usMBCRC16+0x64>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	4053      	eors	r3, r2
 800185a:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <usMBCRC16+0x68>)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	807a      	strh	r2, [r7, #2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1e6      	bne.n	800183e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	b29b      	uxth	r3, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	0800707c 	.word	0x0800707c
 8001890:	0800717c 	.word	0x0800717c

08001894 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d16c      	bne.n	8001984 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3301      	adds	r3, #1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3302      	adds	r3, #2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	8abb      	ldrh	r3, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80018c4:	8abb      	ldrh	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	8a7b      	ldrh	r3, [r7, #18]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80018e4:	8a7b      	ldrh	r3, [r7, #18]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d049      	beq.n	800197e <eMBFuncReadCoils+0xea>
 80018ea:	8a7b      	ldrh	r3, [r7, #18]
 80018ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018f0:	d245      	bcs.n	800197e <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60fa      	str	r2, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8001912:	8a7b      	ldrh	r3, [r7, #18]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800191c:	8a7b      	ldrh	r3, [r7, #18]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	b29b      	uxth	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3301      	adds	r3, #1
 8001926:	75fb      	strb	r3, [r7, #23]
 8001928:	e003      	b.n	8001932 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800192a:	8a7b      	ldrh	r3, [r7, #18]
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	b29b      	uxth	r3, r3
 8001930:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	7dfa      	ldrb	r2, [r7, #23]
 800193a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8001948:	8a7a      	ldrh	r2, [r7, #18]
 800194a:	8ab9      	ldrh	r1, [r7, #20]
 800194c:	2300      	movs	r3, #0
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f7ff fd40 	bl	80013d4 <eMBRegCoilsCB>
 8001954:	4603      	mov	r3, r0
 8001956:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fd97 	bl	8002494 <prveMBError2Exception>
 8001966:	4603      	mov	r3, r0
 8001968:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800196a:	e00d      	b.n	8001988 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b29a      	uxth	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800197c:	e004      	b.n	8001988 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800197e:	2303      	movs	r3, #3
 8001980:	75bb      	strb	r3, [r7, #22]
 8001982:	e001      	b.n	8001988 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001984:	2303      	movs	r3, #3
 8001986:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8001988:	7dbb      	ldrb	r3, [r7, #22]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d140      	bne.n	8001a2a <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3302      	adds	r3, #2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	89bb      	ldrh	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80019c2:	89bb      	ldrh	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3304      	adds	r3, #4
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d128      	bne.n	8001a24 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3303      	adds	r3, #3
 80019d6:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80019d8:	2bff      	cmp	r3, #255	; 0xff
 80019da:	d004      	beq.n	80019e6 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3303      	adds	r3, #3
 80019e0:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11e      	bne.n	8001a24 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3303      	adds	r3, #3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2bff      	cmp	r3, #255	; 0xff
 80019f2:	d102      	bne.n	80019fa <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	723b      	strb	r3, [r7, #8]
 80019f8:	e001      	b.n	80019fe <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80019fe:	89b9      	ldrh	r1, [r7, #12]
 8001a00:	f107 0008 	add.w	r0, r7, #8
 8001a04:	2301      	movs	r3, #1
 8001a06:	2201      	movs	r2, #1
 8001a08:	f7ff fce4 	bl	80013d4 <eMBRegCoilsCB>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fd3b 	bl	8002494 <prveMBError2Exception>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8001a22:	e004      	b.n	8001a2e <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001a24:	2303      	movs	r3, #3
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d954      	bls.n	8001af8 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3301      	adds	r3, #1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	89bb      	ldrh	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001a68:	89bb      	ldrh	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3303      	adds	r3, #3
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	795b      	ldrb	r3, [r3, #5]
 8001a8c:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8001a98:	897b      	ldrh	r3, [r7, #10]
 8001a9a:	08db      	lsrs	r3, r3, #3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e003      	b.n	8001aae <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01e      	beq.n	8001af2 <eMBFuncWriteMultipleCoils+0xba>
 8001ab4:	897b      	ldrh	r3, [r7, #10]
 8001ab6:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8001aba:	d81a      	bhi.n	8001af2 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	7a7b      	ldrb	r3, [r7, #9]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d116      	bne.n	8001af2 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	1d98      	adds	r0, r3, #6
 8001ac8:	897a      	ldrh	r2, [r7, #10]
 8001aca:	89b9      	ldrh	r1, [r7, #12]
 8001acc:	2301      	movs	r3, #1
 8001ace:	f7ff fc81 	bl	80013d4 <eMBRegCoilsCB>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001ad6:	7a3b      	ldrb	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001adc:	7a3b      	ldrb	r3, [r7, #8]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fcd8 	bl	8002494 <prveMBError2Exception>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8001ae8:	e008      	b.n	8001afc <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2205      	movs	r2, #5
 8001aee:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001af0:	e004      	b.n	8001afc <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001af2:	2303      	movs	r3, #3
 8001af4:	73bb      	strb	r3, [r7, #14]
 8001af6:	e001      	b.n	8001afc <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001af8:	2303      	movs	r3, #3
 8001afa:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d16c      	bne.n	8001bf6 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	8abb      	ldrh	r3, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8001b56:	8a7b      	ldrh	r3, [r7, #18]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d049      	beq.n	8001bf0 <eMBFuncReadDiscreteInputs+0xea>
 8001b5c:	8a7b      	ldrh	r3, [r7, #18]
 8001b5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b62:	d245      	bcs.n	8001bf0 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	60fa      	str	r2, [r7, #12]
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8001b84:	8a7b      	ldrh	r3, [r7, #18]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8001b8e:	8a7b      	ldrh	r3, [r7, #18]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
 8001b9a:	e003      	b.n	8001ba4 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8001b9c:	8a7b      	ldrh	r3, [r7, #18]
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60fa      	str	r2, [r7, #12]
 8001baa:	7dfa      	ldrb	r2, [r7, #23]
 8001bac:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8001bba:	8a7a      	ldrh	r2, [r7, #18]
 8001bbc:	8abb      	ldrh	r3, [r7, #20]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fc8b 	bl	80014dc <eMBRegDiscreteCB>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fc5e 	bl	8002494 <prveMBError2Exception>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8001bdc:	e00d      	b.n	8001bfa <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	881a      	ldrh	r2, [r3, #0]
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001bee:	e004      	b.n	8001bfa <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	75bb      	strb	r3, [r7, #22]
 8001bf4:	e001      	b.n	8001bfa <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8001bfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d122      	bne.n	8001c60 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	89bb      	ldrh	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001c34:	89bb      	ldrh	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	1cd8      	adds	r0, r3, #3
 8001c3e:	89b9      	ldrh	r1, [r7, #12]
 8001c40:	2301      	movs	r3, #1
 8001c42:	2201      	movs	r2, #1
 8001c44:	f7ff fa8c 	bl	8001160 <eMBRegHoldingCB>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fc1d 	bl	8002494 <prveMBError2Exception>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e001      	b.n	8001c64 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001c60:	2303      	movs	r3, #3
 8001c62:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d946      	bls.n	8001d12 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3301      	adds	r3, #1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3302      	adds	r3, #2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	89bb      	ldrh	r3, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001c9e:	89bb      	ldrh	r3, [r7, #12]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3303      	adds	r3, #3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	795b      	ldrb	r3, [r3, #5]
 8001cc2:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8001cc4:	897b      	ldrh	r3, [r7, #10]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d020      	beq.n	8001d0c <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8001cca:	897b      	ldrh	r3, [r7, #10]
 8001ccc:	2b78      	cmp	r3, #120	; 0x78
 8001cce:	d81d      	bhi.n	8001d0c <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8001cd0:	897b      	ldrh	r3, [r7, #10]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8001cd8:	7a7a      	ldrb	r2, [r7, #9]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d116      	bne.n	8001d0c <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	1d98      	adds	r0, r3, #6
 8001ce2:	897a      	ldrh	r2, [r7, #10]
 8001ce4:	89b9      	ldrh	r1, [r7, #12]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f7ff fa3a 	bl	8001160 <eMBRegHoldingCB>
 8001cec:	4603      	mov	r3, r0
 8001cee:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001cf0:	7a3b      	ldrb	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fbcb 	bl	8002494 <prveMBError2Exception>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8001d02:	e008      	b.n	8001d16 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2205      	movs	r2, #5
 8001d08:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001d0a:	e004      	b.n	8001d16 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e001      	b.n	8001d16 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d12:	2303      	movs	r3, #3
 8001d14:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d15c      	bne.n	8001df0 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3302      	adds	r3, #2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	8abb      	ldrh	r3, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001d50:	8abb      	ldrh	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3303      	adds	r3, #3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001d6a:	8a7b      	ldrh	r3, [r7, #18]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d03c      	beq.n	8001dea <eMBFuncReadHoldingRegister+0xca>
 8001d70:	8a7b      	ldrh	r3, [r7, #18]
 8001d72:	2b7d      	cmp	r3, #125	; 0x7d
 8001d74:	d839      	bhi.n	8001dea <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60fa      	str	r2, [r7, #12]
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8001d96:	8a7b      	ldrh	r3, [r7, #18]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1c59      	adds	r1, r3, #1
 8001d9e:	60f9      	str	r1, [r7, #12]
 8001da0:	0052      	lsls	r2, r2, #1
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8001db2:	8a7a      	ldrh	r2, [r7, #18]
 8001db4:	8ab9      	ldrh	r1, [r7, #20]
 8001db6:	2300      	movs	r3, #0
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff f9d1 	bl	8001160 <eMBRegHoldingCB>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fb62 	bl	8002494 <prveMBError2Exception>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8001dd4:	e00e      	b.n	8001df4 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	8a7b      	ldrh	r3, [r7, #18]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001de8:	e004      	b.n	8001df4 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001dea:	2303      	movs	r3, #3
 8001dec:	75fb      	strb	r3, [r7, #23]
 8001dee:	e001      	b.n	8001df4 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001df0:	2303      	movs	r3, #3
 8001df2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	f240 8099 	bls.w	8001f48 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3302      	adds	r3, #2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	8abb      	ldrh	r3, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8001e30:	8abb      	ldrh	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3303      	adds	r3, #3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	8a7b      	ldrh	r3, [r7, #18]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3305      	adds	r3, #5
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3306      	adds	r3, #6
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	8a3b      	ldrh	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8001e6a:	8a3b      	ldrh	r3, [r7, #16]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3307      	adds	r3, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	89fb      	ldrh	r3, [r7, #14]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7a5b      	ldrb	r3, [r3, #9]
 8001e8e:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8001e90:	8a7b      	ldrh	r3, [r7, #18]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d056      	beq.n	8001f44 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8001e96:	8a7b      	ldrh	r3, [r7, #18]
 8001e98:	2b7d      	cmp	r3, #125	; 0x7d
 8001e9a:	d853      	bhi.n	8001f44 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d050      	beq.n	8001f44 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	2b79      	cmp	r3, #121	; 0x79
 8001ea6:	d84d      	bhi.n	8001f44 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	005a      	lsls	r2, r3, #1
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d148      	bne.n	8001f44 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f103 000a 	add.w	r0, r3, #10
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	8a39      	ldrh	r1, [r7, #16]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f7ff f94f 	bl	8001160 <eMBRegHoldingCB>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8001ec6:	7dbb      	ldrb	r3, [r7, #22]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d131      	bne.n	8001f30 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	2217      	movs	r2, #23
 8001ede:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8001eec:	8a7b      	ldrh	r3, [r7, #18]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1c59      	adds	r1, r3, #1
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	0052      	lsls	r2, r2, #1
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8001f08:	8a7a      	ldrh	r2, [r7, #18]
 8001f0a:	8ab9      	ldrh	r1, [r7, #20]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	68b8      	ldr	r0, [r7, #8]
 8001f10:	f7ff f926 	bl	8001160 <eMBRegHoldingCB>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8001f18:	7dbb      	ldrb	r3, [r7, #22]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d108      	bne.n	8001f30 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	8a7b      	ldrh	r3, [r7, #18]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8001f30:	7dbb      	ldrb	r3, [r7, #22]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001f36:	7dbb      	ldrb	r3, [r7, #22]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 faab 	bl	8002494 <prveMBError2Exception>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8001f42:	e001      	b.n	8001f48 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001f44:	2303      	movs	r3, #3
 8001f46:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d15f      	bne.n	8002028 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3302      	adds	r3, #2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	8abb      	ldrh	r3, [r7, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001f82:	8abb      	ldrh	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8001fa2:	8a7b      	ldrh	r3, [r7, #18]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001fa8:	8a7b      	ldrh	r3, [r7, #18]
 8001faa:	2b7c      	cmp	r3, #124	; 0x7c
 8001fac:	d839      	bhi.n	8002022 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60fa      	str	r2, [r7, #12]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8001fce:	8a7b      	ldrh	r3, [r7, #18]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1c59      	adds	r1, r3, #1
 8001fd6:	60f9      	str	r1, [r7, #12]
 8001fd8:	0052      	lsls	r2, r2, #1
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8001fea:	8a7a      	ldrh	r2, [r7, #18]
 8001fec:	8abb      	ldrh	r3, [r7, #20]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7ff f8a5 	bl	8001140 <eMBRegInputCB>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fa46 	bl	8002494 <prveMBError2Exception>
 8002008:	4603      	mov	r3, r0
 800200a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800200c:	e00e      	b.n	800202c <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	8a7b      	ldrh	r3, [r7, #18]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002020:	e004      	b.n	800202c <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002022:	2303      	movs	r3, #3
 8002024:	75fb      	strb	r3, [r7, #23]
 8002026:	e001      	b.n	800202c <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002028:	2303      	movs	r3, #3
 800202a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800202c:	7dfb      	ldrb	r3, [r7, #23]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3301      	adds	r3, #1
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <eMBFuncReportSlaveID+0x30>)
 8002048:	8812      	ldrh	r2, [r2, #0]
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <eMBFuncReportSlaveID+0x34>)
 800204c:	4618      	mov	r0, r3
 800204e:	f004 faf2 	bl	8006636 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <eMBFuncReportSlaveID+0x30>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000298 	.word	0x20000298
 800206c:	20000278 	.word	0x20000278

08002070 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	603a      	str	r2, [r7, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	460b      	mov	r3, r1
 8002080:	71bb      	strb	r3, [r7, #6]
 8002082:	4613      	mov	r3, r2
 8002084:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800208a:	f000 fa25 	bl	80024d8 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800208e:	797b      	ldrb	r3, [r7, #5]
 8002090:	79b8      	ldrb	r0, [r7, #6]
 8002092:	2208      	movs	r2, #8
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	f000 fad7 	bl	8002648 <xMBPortSerialInit>
 800209a:	4603      	mov	r3, r0
 800209c:	2b01      	cmp	r3, #1
 800209e:	d002      	beq.n	80020a6 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 80020a0:	2303      	movs	r3, #3
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e016      	b.n	80020d4 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80020ac:	d902      	bls.n	80020b4 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80020ae:	2323      	movs	r3, #35	; 0x23
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	e005      	b.n	80020c0 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <eMBRTUInit+0x74>)
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fb3f 	bl	8002748 <xMBPortTimersInit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80020d0:	2303      	movs	r3, #3
 80020d2:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80020d4:	f000 fa10 	bl	80024f8 <ExitCriticalSection>

    return eStatus;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	00177fa0 	.word	0x00177fa0

080020e8 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80020ec:	f000 f9f4 	bl	80024d8 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <eMBRTUStart+0x24>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80020f6:	2100      	movs	r1, #0
 80020f8:	2001      	movs	r0, #1
 80020fa:	f000 fa73 	bl	80025e4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80020fe:	f000 fb35 	bl	800276c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8002102:	f000 f9f9 	bl	80024f8 <ExitCriticalSection>
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000029b 	.word	0x2000029b

08002110 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002114:	f000 f9e0 	bl	80024d8 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8002118:	2100      	movs	r1, #0
 800211a:	2000      	movs	r0, #0
 800211c:	f000 fa62 	bl	80025e4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8002120:	f000 fb34 	bl	800278c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8002124:	f000 f9e8 	bl	80024f8 <ExitCriticalSection>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800213c:	f000 f9cc 	bl	80024d8 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <eMBRTUReceive+0x7c>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d905      	bls.n	8002156 <eMBRTUReceive+0x2a>
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <eMBRTUReceive+0x80>)
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <eMBRTUReceive+0x84>)
 800214e:	219b      	movs	r1, #155	; 0x9b
 8002150:	4818      	ldr	r0, [pc, #96]	; (80021b4 <eMBRTUReceive+0x88>)
 8002152:	f003 ff6f 	bl	8006034 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <eMBRTUReceive+0x7c>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d919      	bls.n	8002194 <eMBRTUReceive+0x68>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <eMBRTUReceive+0x7c>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	4813      	ldr	r0, [pc, #76]	; (80021b8 <eMBRTUReceive+0x8c>)
 800216a:	f7ff fb5d 	bl	8001828 <usMBCRC16>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10f      	bne.n	8002194 <eMBRTUReceive+0x68>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <eMBRTUReceive+0x8c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <eMBRTUReceive+0x7c>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b03      	subs	r3, #3
 8002186:	b29a      	uxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <eMBRTUReceive+0x90>)
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e001      	b.n	8002198 <eMBRTUReceive+0x6c>
    }
    else
    {
        eStatus = MB_EIO;
 8002194:	2305      	movs	r3, #5
 8002196:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8002198:	f000 f9ae 	bl	80024f8 <ExitCriticalSection>
    return eStatus;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200003a2 	.word	0x200003a2
 80021ac:	08006fa4 	.word	0x08006fa4
 80021b0:	0800727c 	.word	0x0800727c
 80021b4:	08006fcc 	.word	0x08006fcc
 80021b8:	2000029c 	.word	0x2000029c
 80021bc:	2000029d 	.word	0x2000029d

080021c0 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80021d4:	f000 f980 	bl	80024d8 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <eMBRTUSend+0xb4>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d13f      	bne.n	8002262 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	4a24      	ldr	r2, [pc, #144]	; (8002278 <eMBRTUSend+0xb8>)
 80021e8:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <eMBRTUSend+0xbc>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <eMBRTUSend+0xb8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	79fa      	ldrb	r2, [r7, #7]
 80021f6:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <eMBRTUSend+0xbc>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	88bb      	ldrh	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <eMBRTUSend+0xbc>)
 8002206:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <eMBRTUSend+0xb8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <eMBRTUSend+0xbc>)
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	b292      	uxth	r2, r2
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fb07 	bl	8001828 <usMBCRC16>
 800221a:	4603      	mov	r3, r0
 800221c:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <eMBRTUSend+0xbc>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	b291      	uxth	r1, r2
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <eMBRTUSend+0xbc>)
 800222a:	8011      	strh	r1, [r2, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	89bb      	ldrh	r3, [r7, #12]
 8002230:	b2d9      	uxtb	r1, r3
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <eMBRTUSend+0xc0>)
 8002234:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8002236:	89bb      	ldrh	r3, [r7, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b299      	uxth	r1, r3
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <eMBRTUSend+0xbc>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	b290      	uxth	r0, r2
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <eMBRTUSend+0xbc>)
 8002248:	8010      	strh	r0, [r2, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	b2c9      	uxtb	r1, r1
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <eMBRTUSend+0xc0>)
 8002250:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <eMBRTUSend+0xc4>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8002258:	2101      	movs	r1, #1
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f9c2 	bl	80025e4 <vMBPortSerialEnable>
 8002260:	e001      	b.n	8002266 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8002262:	2305      	movs	r3, #5
 8002264:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8002266:	f000 f947 	bl	80024f8 <ExitCriticalSection>
    return eStatus;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000029b 	.word	0x2000029b
 8002278:	2000039c 	.word	0x2000039c
 800227c:	200003a0 	.word	0x200003a0
 8002280:	2000029c 	.word	0x2000029c
 8002284:	2000029a 	.word	0x2000029a

08002288 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800228e:	2300      	movs	r3, #0
 8002290:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <xMBRTUReceiveFSM+0xb4>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <xMBRTUReceiveFSM+0x20>
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <xMBRTUReceiveFSM+0xb8>)
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <xMBRTUReceiveFSM+0xbc>)
 80022a0:	21e4      	movs	r1, #228	; 0xe4
 80022a2:	4829      	ldr	r0, [pc, #164]	; (8002348 <xMBRTUReceiveFSM+0xc0>)
 80022a4:	f003 fec6 	bl	8006034 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f9f8 	bl	80026a0 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <xMBRTUReceiveFSM+0xc4>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d83b      	bhi.n	8002332 <xMBRTUReceiveFSM+0xaa>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <xMBRTUReceiveFSM+0x38>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	08002305 	.word	0x08002305
 80022cc:	080022d7 	.word	0x080022d7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80022d0:	f000 fa4c 	bl	800276c <vMBPortTimersEnable>
        break;
 80022d4:	e02d      	b.n	8002332 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80022d6:	f000 fa49 	bl	800276c <vMBPortTimersEnable>
        break;
 80022da:	e02a      	b.n	8002332 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <xMBRTUReceiveFSM+0xc8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <xMBRTUReceiveFSM+0xc8>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	b291      	uxth	r1, r2
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <xMBRTUReceiveFSM+0xc8>)
 80022ee:	8011      	strh	r1, [r2, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	79b9      	ldrb	r1, [r7, #6]
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <xMBRTUReceiveFSM+0xcc>)
 80022f6:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <xMBRTUReceiveFSM+0xc4>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80022fe:	f000 fa35 	bl	800276c <vMBPortTimersEnable>
        break;
 8002302:	e016      	b.n	8002332 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <xMBRTUReceiveFSM+0xc8>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	2bff      	cmp	r3, #255	; 0xff
 800230c:	d80b      	bhi.n	8002326 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <xMBRTUReceiveFSM+0xc8>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	b291      	uxth	r1, r2
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <xMBRTUReceiveFSM+0xc8>)
 800231a:	8011      	strh	r1, [r2, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	79b9      	ldrb	r1, [r7, #6]
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <xMBRTUReceiveFSM+0xcc>)
 8002322:	5499      	strb	r1, [r3, r2]
 8002324:	e002      	b.n	800232c <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <xMBRTUReceiveFSM+0xc4>)
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800232c:	f000 fa1e 	bl	800276c <vMBPortTimersEnable>
        break;
 8002330:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8002332:	79fb      	ldrb	r3, [r7, #7]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	2000029a 	.word	0x2000029a
 8002340:	08006fe0 	.word	0x08006fe0
 8002344:	0800728c 	.word	0x0800728c
 8002348:	08006fcc 	.word	0x08006fcc
 800234c:	2000029b 	.word	0x2000029b
 8002350:	200003a2 	.word	0x200003a2
 8002354:	2000029c 	.word	0x2000029c

08002358 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800235e:	2300      	movs	r3, #0
 8002360:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <xMBRTUTransmitFSM+0x94>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d006      	beq.n	800237a <xMBRTUTransmitFSM+0x22>
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <xMBRTUTransmitFSM+0x98>)
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <xMBRTUTransmitFSM+0x9c>)
 8002370:	f240 111f 	movw	r1, #287	; 0x11f
 8002374:	4820      	ldr	r0, [pc, #128]	; (80023f8 <xMBRTUTransmitFSM+0xa0>)
 8002376:	f003 fe5d 	bl	8006034 <__assert_func>

    switch ( eSndState )
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <xMBRTUTransmitFSM+0xa4>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <xMBRTUTransmitFSM+0x32>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d005      	beq.n	8002394 <xMBRTUTransmitFSM+0x3c>
 8002388:	e02a      	b.n	80023e0 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800238a:	2100      	movs	r1, #0
 800238c:	2001      	movs	r0, #1
 800238e:	f000 f929 	bl	80025e4 <vMBPortSerialEnable>
        break;
 8002392:	e025      	b.n	80023e0 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <xMBRTUTransmitFSM+0xa8>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d013      	beq.n	80023c6 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <xMBRTUTransmitFSM+0xac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f962 	bl	8002670 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <xMBRTUTransmitFSM+0xac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <xMBRTUTransmitFSM+0xac>)
 80023b4:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <xMBRTUTransmitFSM+0xa8>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <xMBRTUTransmitFSM+0xa8>)
 80023c2:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80023c4:	e00b      	b.n	80023de <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80023c6:	2003      	movs	r0, #3
 80023c8:	f000 f8d8 	bl	800257c <xMBPortEventPost>
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80023d0:	2100      	movs	r1, #0
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 f906 	bl	80025e4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <xMBRTUTransmitFSM+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
        break;
 80023de:	bf00      	nop
    }

    return xNeedPoll;
 80023e0:	79fb      	ldrb	r3, [r7, #7]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000029b 	.word	0x2000029b
 80023f0:	08006ffc 	.word	0x08006ffc
 80023f4:	080072a0 	.word	0x080072a0
 80023f8:	08006fcc 	.word	0x08006fcc
 80023fc:	2000029a 	.word	0x2000029a
 8002400:	200003a0 	.word	0x200003a0
 8002404:	2000039c 	.word	0x2000039c

08002408 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800240e:	2300      	movs	r3, #0
 8002410:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <xMBRTUTimerT35Expired+0x7c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d028      	beq.n	800246e <xMBRTUTimerT35Expired+0x66>
 800241c:	2b03      	cmp	r3, #3
 800241e:	dc10      	bgt.n	8002442 <xMBRTUTimerT35Expired+0x3a>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <xMBRTUTimerT35Expired+0x22>
 8002424:	2b02      	cmp	r3, #2
 8002426:	d006      	beq.n	8002436 <xMBRTUTimerT35Expired+0x2e>
 8002428:	e00b      	b.n	8002442 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f8a6 	bl	800257c <xMBPortEventPost>
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
        break;
 8002434:	e01c      	b.n	8002470 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8002436:	2001      	movs	r0, #1
 8002438:	f000 f8a0 	bl	800257c <xMBPortEventPost>
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
        break;
 8002440:	e016      	b.n	8002470 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <xMBRTUTimerT35Expired+0x7c>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d011      	beq.n	8002470 <xMBRTUTimerT35Expired+0x68>
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <xMBRTUTimerT35Expired+0x7c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d00c      	beq.n	8002470 <xMBRTUTimerT35Expired+0x68>
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <xMBRTUTimerT35Expired+0x7c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d007      	beq.n	8002470 <xMBRTUTimerT35Expired+0x68>
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <xMBRTUTimerT35Expired+0x80>)
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <xMBRTUTimerT35Expired+0x84>)
 8002464:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <xMBRTUTimerT35Expired+0x88>)
 800246a:	f003 fde3 	bl	8006034 <__assert_func>
        break;
 800246e:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8002470:	f000 f98c 	bl	800278c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <xMBRTUTimerT35Expired+0x7c>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800247a:	79fb      	ldrb	r3, [r7, #7]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000029b 	.word	0x2000029b
 8002488:	08007018 	.word	0x08007018
 800248c:	080072b4 	.word	0x080072b4
 8002490:	08006fcc 	.word	0x08006fcc

08002494 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b07      	cmp	r3, #7
 80024a2:	d00c      	beq.n	80024be <prveMBError2Exception+0x2a>
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	dc0d      	bgt.n	80024c4 <prveMBError2Exception+0x30>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <prveMBError2Exception+0x1e>
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d003      	beq.n	80024b8 <prveMBError2Exception+0x24>
 80024b0:	e008      	b.n	80024c4 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
            break;
 80024b6:	e008      	b.n	80024ca <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80024b8:	2302      	movs	r3, #2
 80024ba:	73fb      	strb	r3, [r7, #15]
            break;
 80024bc:	e005      	b.n	80024ca <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80024be:	2306      	movs	r3, #6
 80024c0:	73fb      	strb	r3, [r7, #15]
            break;
 80024c2:	e002      	b.n	80024ca <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80024c4:	2304      	movs	r3, #4
 80024c6:	73fb      	strb	r3, [r7, #15]
            break;
 80024c8:	bf00      	nop
    }

    return eStatus;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <EnterCriticalSection>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
}
 80024de:	bf00      	nop
  __disable_irq();
  lockCounter++;
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <EnterCriticalSection+0x1c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <EnterCriticalSection+0x1c>)
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	200003a4 	.word	0x200003a4

080024f8 <ExitCriticalSection>:



/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  lockCounter--;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <ExitCriticalSection+0x24>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3b01      	subs	r3, #1
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <ExitCriticalSection+0x24>)
 8002504:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <ExitCriticalSection+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <ExitCriticalSection+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 800250e:	b662      	cpsie	i
}
 8002510:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	200003a4 	.word	0x200003a4

08002520 <MT_PORT_SetTimerModule>:



/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  modbusTimer = timer;
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <MT_PORT_SetTimerModule+0x1c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200003ac 	.word	0x200003ac

08002540 <MT_PORT_SetUartModule>:



/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  modbusUart = uart;
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <MT_PORT_SetUartModule+0x1c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	200003a8 	.word	0x200003a8

08002560 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  xEventInQueue = FALSE;
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <xMBPortEventInit+0x18>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
  return TRUE;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	200003b1 	.word	0x200003b1

0800257c <xMBPortEventPost>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  xEventInQueue = TRUE;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <xMBPortEventPost+0x24>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <xMBPortEventPost+0x28>)
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	7013      	strb	r3, [r2, #0]
  return TRUE;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	200003b1 	.word	0x200003b1
 80025a4:	200003b0 	.word	0x200003b0

080025a8 <xMBPortEventGet>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  BOOL xEventHappened = FALSE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]

  if( xEventInQueue )
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <xMBPortEventGet+0x34>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <xMBPortEventGet+0x26>
  {
    *eEvent = eQueuedEvent;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <xMBPortEventGet+0x38>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	701a      	strb	r2, [r3, #0]
    xEventInQueue = FALSE;
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <xMBPortEventGet+0x34>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    xEventHappened = TRUE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
  }

  return xEventHappened;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	200003b1 	.word	0x200003b1
 80025e0:	200003b0 	.word	0x200003b0

080025e4 <vMBPortSerialEnable>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	460a      	mov	r2, r1
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71bb      	strb	r3, [r7, #6]
  if (xRxEnable == FALSE)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <vMBPortSerialEnable+0x22>
  {
    HAL_UART_AbortReceive_IT(modbusUart);
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <vMBPortSerialEnable+0x5c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fd34 	bl	800506c <HAL_UART_AbortReceive_IT>
 8002604:	e006      	b.n	8002614 <vMBPortSerialEnable+0x30>
  }
  else
  {
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <vMBPortSerialEnable+0x5c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	490d      	ldr	r1, [pc, #52]	; (8002644 <vMBPortSerialEnable+0x60>)
 800260e:	4618      	mov	r0, r3
 8002610:	f002 fc88 	bl	8004f24 <HAL_UART_Receive_IT>
  }

  if (xTxEnable == FALSE)
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <vMBPortSerialEnable+0x42>
  {
    HAL_UART_AbortTransmit_IT(modbusUart);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <vMBPortSerialEnable+0x5c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fcb0 	bl	8004f84 <HAL_UART_AbortTransmit_IT>
    if (modbusUart->gState == HAL_UART_STATE_READY)
    {
      prvvUARTTxReadyISR();
    }
  }
}
 8002624:	e008      	b.n	8002638 <vMBPortSerialEnable+0x54>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <vMBPortSerialEnable+0x5c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d101      	bne.n	8002638 <vMBPortSerialEnable+0x54>
      prvvUARTTxReadyISR();
 8002634:	f000 f84c 	bl	80026d0 <prvvUARTTxReadyISR>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200003a8 	.word	0x200003a8
 8002644:	200003b3 	.word	0x200003b3

08002648 <xMBPortSerialInit>:



/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6039      	str	r1, [r7, #0]
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	460b      	mov	r3, r1
 800265a:	71bb      	strb	r3, [r7, #6]
 800265c:	4613      	mov	r3, r2
 800265e:	717b      	strb	r3, [r7, #5]
    return TRUE;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <xMBPortSerialPutByte>:



/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialPutByte(CHAR ucByte)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  txByte = ucByte;
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <xMBPortSerialPutByte+0x28>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	7013      	strb	r3, [r2, #0]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <xMBPortSerialPutByte+0x2c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4904      	ldr	r1, [pc, #16]	; (8002698 <xMBPortSerialPutByte+0x28>)
 8002688:	4618      	mov	r0, r3
 800268a:	f002 fc06 	bl	8004e9a <HAL_UART_Transmit_IT>
  return TRUE;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200003b2 	.word	0x200003b2
 800269c:	200003a8 	.word	0x200003a8

080026a0 <xMBPortSerialGetByte>:



/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  *pucByte = rxByte;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <xMBPortSerialGetByte+0x28>)
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <xMBPortSerialGetByte+0x2c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4904      	ldr	r1, [pc, #16]	; (80026c8 <xMBPortSerialGetByte+0x28>)
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 fc33 	bl	8004f24 <HAL_UART_Receive_IT>
  return TRUE;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200003b3 	.word	0x200003b3
 80026cc:	200003a8 	.word	0x200003a8

080026d0 <prvvUARTTxReadyISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  pxMBFrameCBTransmitterEmpty();
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <prvvUARTTxReadyISR+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4798      	blx	r3
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000264 	.word	0x20000264

080026e4 <prvvUARTRxISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTRxISR(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  pxMBFrameCBByteReceived();
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <prvvUARTRxISR+0x10>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4798      	blx	r3
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000260 	.word	0x20000260

080026f8 <HAL_UART_TxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_UART_TxCpltCallback+0x24>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d101      	bne.n	8002712 <HAL_UART_TxCpltCallback+0x1a>
  {
    prvvUARTTxReadyISR();
 800270e:	f7ff ffdf 	bl	80026d0 <prvvUARTTxReadyISR>
  }
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200003a8 	.word	0x200003a8

08002720 <HAL_UART_RxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_UART_RxCpltCallback+0x24>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d101      	bne.n	800273a <HAL_UART_RxCpltCallback+0x1a>
  {
    prvvUARTRxISR();
 8002736:	f7ff ffd5 	bl	80026e4 <prvvUARTRxISR>
  }
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200003a8 	.word	0x200003a8

08002748 <xMBPortTimersInit>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
  timerPeriod = usTim1Timerout50us;
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <xMBPortTimersInit+0x20>)
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	8013      	strh	r3, [r2, #0]
  return TRUE;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	200003b4 	.word	0x200003b4

0800276c <vMBPortTimersEnable>:



/* --------------------------------------------------------------------------*/
inline void vMBPortTimersEnable()
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  timerCounter = 0;
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <vMBPortTimersEnable+0x18>)
 8002772:	2200      	movs	r2, #0
 8002774:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(modbusTimer);
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <vMBPortTimersEnable+0x1c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f001 ff1c 	bl	80045b8 <HAL_TIM_Base_Start_IT>
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200003b6 	.word	0x200003b6
 8002788:	200003ac 	.word	0x200003ac

0800278c <vMBPortTimersDisable>:



/* --------------------------------------------------------------------------*/
inline void vMBPortTimersDisable()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop_IT(modbusTimer);
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <vMBPortTimersDisable+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f001 ff71 	bl	800467c <HAL_TIM_Base_Stop_IT>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200003ac 	.word	0x200003ac

080027a4 <prvvTIMERExpiredISR>:



/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
    (void)pxMBPortCBTimerExpired();
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <prvvTIMERExpiredISR+0x10>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4798      	blx	r3
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000268 	.word	0x20000268

080027b8 <HAL_TIM_PeriodElapsedCallback>:



/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (htim->Instance == modbusTimer->Instance)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d10d      	bne.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    timerCounter++;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027d8:	801a      	strh	r2, [r3, #0]

    if (timerCounter == timerPeriod)
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x32>
    {
      prvvTIMERExpiredISR();
 80027e6:	f7ff ffdd 	bl	80027a4 <prvvTIMERExpiredISR>
    }
  }
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200003ac 	.word	0x200003ac
 80027f8:	200003b6 	.word	0x200003b6
 80027fc:	200003b4 	.word	0x200003b4

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_MspInit+0x4c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_MspInit+0x4c>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_MspInit+0x4c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_MspInit+0x4c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_MspInit+0x4c>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_MspInit+0x4c>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <HAL_RTC_MspInit+0x50>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002872:	2302      	movs	r3, #2
 8002874:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fa5d 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800288c:	f7fe fe74 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_RTC_MspInit+0x54>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40002800 	.word	0x40002800
 80028a4:	42470e3c 	.word	0x42470e3c

080028a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_TIM_Base_MspInit+0x48>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d115      	bne.n	80028e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_TIM_Base_MspInit+0x4c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_TIM_Base_MspInit+0x4c>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_TIM_Base_MspInit+0x4c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	201d      	movs	r0, #29
 80028dc:	f000 fb59 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028e0:	201d      	movs	r0, #29
 80028e2:	f000 fb72 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <HAL_UART_MspInit+0x108>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d135      	bne.n	8002986 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 8002924:	f043 0310 	orr.w	r3, r3, #16
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a31      	ldr	r2, [pc, #196]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002964:	2307      	movs	r3, #7
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	4619      	mov	r1, r3
 800296e:	4826      	ldr	r0, [pc, #152]	; (8002a08 <HAL_UART_MspInit+0x110>)
 8002970:	f000 fbd8 	bl	8003124 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	2025      	movs	r0, #37	; 0x25
 800297a:	f000 fb0a 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800297e:	2025      	movs	r0, #37	; 0x25
 8002980:	f000 fb23 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002984:	e038      	b.n	80029f8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <HAL_UART_MspInit+0x114>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d133      	bne.n	80029f8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	6413      	str	r3, [r2, #64]	; 0x40
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029c8:	230c      	movs	r3, #12
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029d8:	2307      	movs	r3, #7
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_UART_MspInit+0x110>)
 80029e4:	f000 fb9e 	bl	8003124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2026      	movs	r0, #38	; 0x26
 80029ee:	f000 fad0 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029f2:	2026      	movs	r0, #38	; 0x26
 80029f4:	f000 fae9 	bl	8002fca <HAL_NVIC_EnableIRQ>
}
 80029f8:	bf00      	nop
 80029fa:	3730      	adds	r7, #48	; 0x30
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40011000 	.word	0x40011000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40004400 	.word	0x40004400

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <NMI_Handler+0x4>

08002a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler+0x4>

08002a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5c:	f000 f99e 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f000 fcf9 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a76:	2002      	movs	r0, #2
 8002a78:	f000 fcf2 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a84:	2004      	movs	r0, #4
 8002a86:	f000 fceb 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a92:	2010      	movs	r0, #16
 8002a94:	f000 fce4 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002aa0:	2020      	movs	r0, #32
 8002aa2:	f000 fcdd 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002aa6:	2040      	movs	r0, #64	; 0x40
 8002aa8:	f000 fcda 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002aac:	2080      	movs	r0, #128	; 0x80
 8002aae:	f000 fcd7 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <TIM3_IRQHandler+0x10>)
 8002abe:	f001 fe0c 	bl	80046da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000013c 	.word	0x2000013c

08002acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <USART1_IRQHandler+0x10>)
 8002ad2:	f002 fb7d 	bl	80051d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000184 	.word	0x20000184

08002ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <USART2_IRQHandler+0x10>)
 8002ae6:	f002 fb73 	bl	80051d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200001c8 	.word	0x200001c8

08002af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
	return 1;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_kill>:

int _kill(int pid, int sig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b0e:	f003 fd65 	bl	80065dc <__errno>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2216      	movs	r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
	return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_exit>:

void _exit (int status)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ffe7 	bl	8002b04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b36:	e7fe      	b.n	8002b36 <_exit+0x12>

08002b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e00a      	b.n	8002b60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b4a:	f3af 8000 	nop.w
 8002b4e:	4601      	mov	r1, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	60ba      	str	r2, [r7, #8]
 8002b56:	b2ca      	uxtb	r2, r1
 8002b58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbf0      	blt.n	8002b4a <_read+0x12>
	}

return len;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e009      	b.n	8002b98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	60ba      	str	r2, [r7, #8]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbf1      	blt.n	8002b84 <_write+0x12>
	}
	return len;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_close>:

int _close(int file)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_isatty>:

int _isatty(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f003 fcca 	bl	80065dc <__errno>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20010000 	.word	0x20010000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	200003b8 	.word	0x200003b8
 8002c7c:	20000510 	.word	0x20000510

08002c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <SystemInit+0x20>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <SystemInit+0x20>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca8:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002caa:	490e      	ldr	r1, [pc, #56]	; (8002ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc0:	4c0b      	ldr	r4, [pc, #44]	; (8002cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cce:	f7ff ffd7 	bl	8002c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f003 fc89 	bl	80065e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd6:	f7fd ff57 	bl	8000b88 <main>
  bx  lr    
 8002cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002ce8:	08007364 	.word	0x08007364
  ldr r2, =_sbss
 8002cec:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002cf0:	2000050c 	.word	0x2000050c

08002cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC_IRQHandler>
	...

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_Init+0x40>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_Init+0x40>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_Init+0x40>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 f92b 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	200f      	movs	r0, #15
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7ff fd68 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f943 	bl	8002fe6 <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 f90b 	bl	8002f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000098 	.word	0x20000098
 8002d94:	200000a0 	.word	0x200000a0
 8002d98:	2000009c 	.word	0x2000009c

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	200000a0 	.word	0x200000a0
 8002dc0:	200003bc 	.word	0x200003bc

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	200003bc 	.word	0x200003bc

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	; (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff29 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff3e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff31 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa2 	bl	8002f38 <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff feda 	bl	8002dc4 <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d008      	beq.n	8003030 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e052      	b.n	80030d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0216 	bic.w	r2, r2, #22
 800303e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d103      	bne.n	8003060 <HAL_DMA_Abort+0x62>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0208 	bic.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003080:	e013      	b.n	80030aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003082:	f7ff fe9f 	bl	8002dc4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b05      	cmp	r3, #5
 800308e:	d90c      	bls.n	80030aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e015      	b.n	80030d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e4      	bne.n	8003082 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	223f      	movs	r2, #63	; 0x3f
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00c      	b.n	8003116 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2205      	movs	r2, #5
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e159      	b.n	80033f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 8148 	bne.w	80033ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d005      	beq.n	8003176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	2b02      	cmp	r3, #2
 8003174:	d130      	bne.n	80031d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 0201 	and.w	r2, r3, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d017      	beq.n	8003214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d123      	bne.n	8003268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0203 	and.w	r2, r3, #3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a2 	beq.w	80033ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b57      	ldr	r3, [pc, #348]	; (800340c <HAL_GPIO_Init+0x2e8>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	4a56      	ldr	r2, [pc, #344]	; (800340c <HAL_GPIO_Init+0x2e8>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <HAL_GPIO_Init+0x2e8>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_GPIO_Init+0x2ec>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a49      	ldr	r2, [pc, #292]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d019      	beq.n	8003326 <HAL_GPIO_Init+0x202>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a48      	ldr	r2, [pc, #288]	; (8003418 <HAL_GPIO_Init+0x2f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0x1fe>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a47      	ldr	r2, [pc, #284]	; (800341c <HAL_GPIO_Init+0x2f8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_Init+0x1fa>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a46      	ldr	r2, [pc, #280]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_Init+0x1f6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a45      	ldr	r2, [pc, #276]	; (8003424 <HAL_GPIO_Init+0x300>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_Init+0x1f2>
 8003312:	2304      	movs	r3, #4
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x204>
 8003316:	2307      	movs	r3, #7
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x204>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x204>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x204>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x204>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	; (8003410 <HAL_GPIO_Init+0x2ec>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_GPIO_Init+0x304>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <HAL_GPIO_Init+0x304>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_GPIO_Init+0x304>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <HAL_GPIO_Init+0x304>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339a:	4b23      	ldr	r3, [pc, #140]	; (8003428 <HAL_GPIO_Init+0x304>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033be:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <HAL_GPIO_Init+0x304>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_GPIO_Init+0x304>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e8:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <HAL_GPIO_Init+0x304>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f aea2 	bls.w	8003140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
 8003438:	4613      	mov	r3, r2
 800343a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800343c:	787b      	ldrb	r3, [r7, #1]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003448:	e003      	b.n	8003452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	041a      	lsls	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	619a      	str	r2, [r3, #24]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fde0 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40013c00 	.word	0x40013c00

08003490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e267      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d075      	beq.n	800359a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ae:	4b88      	ldr	r3, [pc, #544]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d00c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ba:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d112      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4b82      	ldr	r3, [pc, #520]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d2:	d10b      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	4b7e      	ldr	r3, [pc, #504]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05b      	beq.n	8003598 <HAL_RCC_OscConfig+0x108>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d157      	bne.n	8003598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e242      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x74>
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a75      	ldr	r2, [pc, #468]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01d      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x98>
 800350e:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6f      	ldr	r2, [pc, #444]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6c      	ldr	r2, [pc, #432]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a68      	ldr	r2, [pc, #416]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7ff fc3c 	bl	8002dc4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7ff fc38 	bl	8002dc4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e207      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b5b      	ldr	r3, [pc, #364]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0xc0>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7ff fc28 	bl	8002dc4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003578:	f7ff fc24 	bl	8002dc4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1f3      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0xe8>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d063      	beq.n	800366e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d11c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	4b44      	ldr	r3, [pc, #272]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ca:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x152>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e1c7      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4937      	ldr	r1, [pc, #220]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	e03a      	b.n	800366e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_OscConfig+0x244>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7ff fbdd 	bl	8002dc4 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360e:	f7ff fbd9 	bl	8002dc4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1a8      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4925      	ldr	r1, [pc, #148]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
 8003640:	e015      	b.n	800366e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x244>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7ff fbbc 	bl	8002dc4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003650:	f7ff fbb8 	bl	8002dc4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e187      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d036      	beq.n	80036e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCC_OscConfig+0x248>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7ff fb9c 	bl	8002dc4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003690:	f7ff fb98 	bl	8002dc4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e167      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x200>
 80036ae:	e01b      	b.n	80036e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_OscConfig+0x248>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7ff fb85 	bl	8002dc4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	e00e      	b.n	80036dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036be:	f7ff fb81 	bl	8002dc4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d907      	bls.n	80036dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e150      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
 80036d0:	40023800 	.word	0x40023800
 80036d4:	42470000 	.word	0x42470000
 80036d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ea      	bne.n	80036be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8097 	beq.w	8003824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b7a      	ldr	r3, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b77      	ldr	r3, [pc, #476]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d118      	bne.n	8003764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003732:	4b74      	ldr	r3, [pc, #464]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a73      	ldr	r2, [pc, #460]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7ff fb41 	bl	8002dc4 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003746:	f7ff fb3d 	bl	8002dc4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e10c      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x2ea>
 800376c:	4b64      	ldr	r3, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a63      	ldr	r2, [pc, #396]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x324>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x30c>
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a5e      	ldr	r2, [pc, #376]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	4b5c      	ldr	r3, [pc, #368]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a5b      	ldr	r2, [pc, #364]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0x324>
 800379c:	4b58      	ldr	r3, [pc, #352]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a57      	ldr	r2, [pc, #348]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	4b55      	ldr	r3, [pc, #340]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a54      	ldr	r2, [pc, #336]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7ff fb02 	bl	8002dc4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7ff fafe 	bl	8002dc4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0cb      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RCC_OscConfig+0x334>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e8:	f7ff faec 	bl	8002dc4 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7ff fae8 	bl	8002dc4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0b5      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ee      	bne.n	80037f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	4a38      	ldr	r2, [pc, #224]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a1 	beq.w	8003970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800382e:	4b34      	ldr	r3, [pc, #208]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b08      	cmp	r3, #8
 8003838:	d05c      	beq.n	80038f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d141      	bne.n	80038c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b31      	ldr	r3, [pc, #196]	; (8003908 <HAL_RCC_OscConfig+0x478>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7ff fabc 	bl	8002dc4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7ff fab8 	bl	8002dc4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e087      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	491b      	ldr	r1, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x478>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7ff fa91 	bl	8002dc4 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a6:	f7ff fa8d 	bl	8002dc4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e05c      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x416>
 80038c4:	e054      	b.n	8003970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <HAL_RCC_OscConfig+0x478>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7ff fa7a 	bl	8002dc4 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7ff fa76 	bl	8002dc4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e045      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x444>
 80038f2:	e03d      	b.n	8003970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e038      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
 8003900:	40023800 	.word	0x40023800
 8003904:	40007000 	.word	0x40007000
 8003908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x4ec>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d028      	beq.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d121      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d11a      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003944:	4293      	cmp	r3, r2
 8003946:	d111      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	3b01      	subs	r3, #1
 8003956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0cc      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d90c      	bls.n	80039bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b63      	ldr	r3, [pc, #396]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b8      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ec:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	494d      	ldr	r1, [pc, #308]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d044      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d119      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e06f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e067      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4934      	ldr	r1, [pc, #208]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a70:	f7ff f9a8 	bl	8002dc4 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7ff f9a4 	bl	8002dc4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e04f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d20c      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	490e      	ldr	r1, [pc, #56]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b06:	f000 f821 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff f908 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023c00 	.word	0x40023c00
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	080072cc 	.word	0x080072cc
 8003b44:	20000098 	.word	0x20000098
 8003b48:	2000009c 	.word	0x2000009c

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b090      	sub	sp, #64	; 0x40
 8003b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d00d      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x40>
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	f200 80a1 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x34>
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b7e:	e09b      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b84:	e09b      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b86:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b8a:	e098      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b96:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d028      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	2200      	movs	r2, #0
 8003baa:	623b      	str	r3, [r7, #32]
 8003bac:	627a      	str	r2, [r7, #36]	; 0x24
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb8:	fb03 f201 	mul.w	r2, r3, r1
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	fb00 f303 	mul.w	r3, r0, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bcc:	460a      	mov	r2, r1
 8003bce:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd2:	4413      	add	r3, r2
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	61fa      	str	r2, [r7, #28]
 8003bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003be6:	f7fc fe51 	bl	800088c <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4613      	mov	r3, r2
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	e053      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	617a      	str	r2, [r7, #20]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c06:	f04f 0b00 	mov.w	fp, #0
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	ebb2 080a 	subs.w	r8, r2, sl
 8003c26:	eb63 090b 	sbc.w	r9, r3, fp
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c42:	eb63 0509 	sbc.w	r5, r3, r9
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	00eb      	lsls	r3, r5, #3
 8003c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c54:	00e2      	lsls	r2, r4, #3
 8003c56:	4614      	mov	r4, r2
 8003c58:	461d      	mov	r5, r3
 8003c5a:	eb14 030a 	adds.w	r3, r4, sl
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	eb45 030b 	adc.w	r3, r5, fp
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c72:	4629      	mov	r1, r5
 8003c74:	028b      	lsls	r3, r1, #10
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	028a      	lsls	r2, r1, #10
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	2200      	movs	r2, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	60fa      	str	r2, [r7, #12]
 8003c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c90:	f7fc fdfc 	bl	800088c <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3740      	adds	r7, #64	; 0x40
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	017d7840 	.word	0x017d7840

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000098 	.word	0x20000098

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	080072dc 	.word	0x080072dc

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d1c:	f7ff ffdc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0b5b      	lsrs	r3, r3, #13
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	080072dc 	.word	0x080072dc

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d035      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d68:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7ff f829 	bl	8002dc4 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d76:	f7ff f825 	bl	8002dc4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0ba      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d88:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	019a      	lsls	r2, r3, #6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	071b      	lsls	r3, r3, #28
 8003da0:	495a      	ldr	r1, [pc, #360]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da8:	4b57      	ldr	r3, [pc, #348]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dae:	f7ff f809 	bl	8002dc4 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003db6:	f7ff f805 	bl	8002dc4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e09a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8083 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a48      	ldr	r2, [pc, #288]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b46      	ldr	r3, [pc, #280]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dfe:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a43      	ldr	r2, [pc, #268]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e0a:	f7fe ffdb 	bl	8002dc4 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fe ffd7 	bl	8002dc4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e06c      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e24:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02f      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e58:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e64:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d114      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe ffa5 	bl	8002dc4 <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe ffa1 	bl	8002dc4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e034      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ee      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eac:	d10d      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	4912      	ldr	r1, [pc, #72]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ed4:	6093      	str	r3, [r2, #8]
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7c1a      	ldrb	r2, [r3, #16]
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003efa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	42470068 	.word	0x42470068
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000
 8003f14:	42470e40 	.word	0x42470e40
 8003f18:	424711e0 	.word	0x424711e0

08003f1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e066      	b.n	8004000 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7f5b      	ldrb	r3, [r3, #29]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d105      	bne.n	8003f48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe fc84 	bl	8002850 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	22ca      	movs	r2, #202	; 0xca
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2253      	movs	r2, #83	; 0x53
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa45 	bl	80043ee <RTC_EnterInitMode>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d12c      	bne.n	8003fc8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68d2      	ldr	r2, [r2, #12]
 8003fa8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6919      	ldr	r1, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa4c 	bl	800445c <RTC_ExitInitMode>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d113      	bne.n	8003ff6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	22ff      	movs	r2, #255	; 0xff
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	7f1b      	ldrb	r3, [r3, #28]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_RTC_SetTime+0x1c>
 8004020:	2302      	movs	r3, #2
 8004022:	e087      	b.n	8004134 <HAL_RTC_SetTime+0x12c>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2202      	movs	r2, #2
 800402e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d126      	bne.n	8004084 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fa29 	bl	80044a6 <RTC_ByteToBcd2>
 8004054:	4603      	mov	r3, r0
 8004056:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fa22 	bl	80044a6 <RTC_ByteToBcd2>
 8004062:	4603      	mov	r3, r0
 8004064:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004066:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	789b      	ldrb	r3, [r3, #2]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa1a 	bl	80044a6 <RTC_ByteToBcd2>
 8004072:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004074:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	78db      	ldrb	r3, [r3, #3]
 800407c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e018      	b.n	80040b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040a4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80040aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	78db      	ldrb	r3, [r3, #3]
 80040b0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	22ca      	movs	r2, #202	; 0xca
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2253      	movs	r2, #83	; 0x53
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f991 	bl	80043ee <RTC_EnterInitMode>
 80040cc:	4603      	mov	r3, r0
 80040ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d120      	bne.n	8004118 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6899      	ldr	r1, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f9a4 	bl	800445c <RTC_ExitInitMode>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	771a      	strb	r2, [r3, #28]

  return status;
 8004132:	7cfb      	ldrb	r3, [r7, #19]
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800416e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004172:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	0d9b      	lsrs	r3, r3, #22
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11a      	bne.n	80041ee <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f98f 	bl	80044e0 <RTC_Bcd2ToByte>
 80041c2:	4603      	mov	r3, r0
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f986 	bl	80044e0 <RTC_Bcd2ToByte>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	789b      	ldrb	r3, [r3, #2]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f97d 	bl	80044e0 <RTC_Bcd2ToByte>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	7f1b      	ldrb	r3, [r3, #28]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_RTC_SetDate+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e071      	b.n	80042f8 <HAL_RTC_SetDate+0x100>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10e      	bne.n	8004244 <HAL_RTC_SetDate+0x4c>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	b2db      	uxtb	r3, r3
 800423c:	330a      	adds	r3, #10
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11c      	bne.n	8004284 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f929 	bl	80044a6 <RTC_ByteToBcd2>
 8004254:	4603      	mov	r3, r0
 8004256:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f922 	bl	80044a6 <RTC_ByteToBcd2>
 8004262:	4603      	mov	r3, r0
 8004264:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004266:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	789b      	ldrb	r3, [r3, #2]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f91a 	bl	80044a6 <RTC_ByteToBcd2>
 8004272:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004274:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e00e      	b.n	80042a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	78db      	ldrb	r3, [r3, #3]
 8004288:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004290:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004296:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	22ca      	movs	r2, #202	; 0xca
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2253      	movs	r2, #83	; 0x53
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f89b 	bl	80043ee <RTC_EnterInitMode>
 80042b8:	4603      	mov	r3, r0
 80042ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8c2 	bl	800445c <RTC_ExitInitMode>
 80042d8:	4603      	mov	r3, r0
 80042da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	771a      	strb	r2, [r3, #28]

  return status;
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd90      	pop	{r4, r7, pc}

08004300 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800431a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800431e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11a      	bne.n	8004394 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	78db      	ldrb	r3, [r3, #3]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f8bc 	bl	80044e0 <RTC_Bcd2ToByte>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f8b3 	bl	80044e0 <RTC_Bcd2ToByte>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	789b      	ldrb	r3, [r3, #2]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f8aa 	bl	80044e0 <RTC_Bcd2ToByte>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043b8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ba:	f7fe fd03 	bl	8002dc4 <HAL_GetTick>
 80043be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043c0:	e009      	b.n	80043d6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043c2:	f7fe fcff 	bl	8002dc4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d0:	d901      	bls.n	80043d6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e007      	b.n	80043e6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d122      	bne.n	8004452 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800441a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800441c:	f7fe fcd2 	bl	8002dc4 <HAL_GetTick>
 8004420:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004422:	e00c      	b.n	800443e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004424:	f7fe fcce 	bl	8002dc4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004432:	d904      	bls.n	800443e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2204      	movs	r2, #4
 8004438:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d102      	bne.n	8004452 <RTC_EnterInitMode+0x64>
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d1e8      	bne.n	8004424 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004476:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ff89 	bl	800439e <HAL_RTC_WaitForSynchro>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2204      	movs	r2, #4
 8004496:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	4603      	mov	r3, r0
 80044ae:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80044b4:	e005      	b.n	80044c2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	3301      	adds	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	3b0a      	subs	r3, #10
 80044c0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	d8f6      	bhi.n	80044b6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	b2db      	uxtb	r3, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	4413      	add	r3, r2
 800450a:	b2db      	uxtb	r3, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e041      	b.n	80045ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fe f9b2 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fab6 	bl	8004ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e044      	b.n	800465a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_TIM_Base_Start_IT+0xb0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d013      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_TIM_Base_Start_IT+0xb4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_TIM_Base_Start_IT+0xb8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_TIM_Base_Start_IT+0xbc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_TIM_Base_Start_IT+0xc0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d111      	bne.n	8004648 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b06      	cmp	r3, #6
 8004634:	d010      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	e007      	b.n	8004658 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40014000 	.word	0x40014000

0800467c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	f241 1311 	movw	r3, #4369	; 0x1111
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10f      	bne.n	80046c4 <HAL_TIM_Base_Stop_IT+0x48>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	f240 4344 	movw	r3, #1092	; 0x444
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_Base_Stop_IT+0x48>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d122      	bne.n	8004736 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d11b      	bne.n	8004736 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0202 	mvn.w	r2, #2
 8004706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f9b5 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 8004722:	e005      	b.n	8004730 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f9a7 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9b8 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d122      	bne.n	800478a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b04      	cmp	r3, #4
 8004750:	d11b      	bne.n	800478a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0204 	mvn.w	r2, #4
 800475a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f98b 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 8004776:	e005      	b.n	8004784 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f97d 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f98e 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b08      	cmp	r3, #8
 8004796:	d122      	bne.n	80047de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11b      	bne.n	80047de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f06f 0208 	mvn.w	r2, #8
 80047ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2204      	movs	r2, #4
 80047b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f961 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 80047ca:	e005      	b.n	80047d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f953 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f964 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d122      	bne.n	8004832 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d11b      	bne.n	8004832 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0210 	mvn.w	r2, #16
 8004802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2208      	movs	r2, #8
 8004808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f937 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 800481e:	e005      	b.n	800482c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f929 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f93a 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0201 	mvn.w	r2, #1
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fd ffad 	bl	80027b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b80      	cmp	r3, #128	; 0x80
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fab1 	bl	8004dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d10e      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f8ff 	bl	8004ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d10e      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0220 	mvn.w	r2, #32
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa7b 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_TIM_ConfigClockSource+0x1c>
 8004902:	2302      	movs	r3, #2
 8004904:	e0b4      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x186>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800492c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493e:	d03e      	beq.n	80049be <HAL_TIM_ConfigClockSource+0xd4>
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004944:	f200 8087 	bhi.w	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	f000 8086 	beq.w	8004a5c <HAL_TIM_ConfigClockSource+0x172>
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004954:	d87f      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 8004956:	2b70      	cmp	r3, #112	; 0x70
 8004958:	d01a      	beq.n	8004990 <HAL_TIM_ConfigClockSource+0xa6>
 800495a:	2b70      	cmp	r3, #112	; 0x70
 800495c:	d87b      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 800495e:	2b60      	cmp	r3, #96	; 0x60
 8004960:	d050      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0x11a>
 8004962:	2b60      	cmp	r3, #96	; 0x60
 8004964:	d877      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 8004966:	2b50      	cmp	r3, #80	; 0x50
 8004968:	d03c      	beq.n	80049e4 <HAL_TIM_ConfigClockSource+0xfa>
 800496a:	2b50      	cmp	r3, #80	; 0x50
 800496c:	d873      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d058      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x13a>
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d86f      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 8004976:	2b30      	cmp	r3, #48	; 0x30
 8004978:	d064      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x15a>
 800497a:	2b30      	cmp	r3, #48	; 0x30
 800497c:	d86b      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 800497e:	2b20      	cmp	r3, #32
 8004980:	d060      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x15a>
 8004982:	2b20      	cmp	r3, #32
 8004984:	d867      	bhi.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d05c      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x15a>
 800498a:	2b10      	cmp	r3, #16
 800498c:	d05a      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x15a>
 800498e:	e062      	b.n	8004a56 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6899      	ldr	r1, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f000 f98c 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
      break;
 80049bc:	e04f      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6899      	ldr	r1, [r3, #8]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f000 f975 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e0:	609a      	str	r2, [r3, #8]
      break;
 80049e2:	e03c      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	461a      	mov	r2, r3
 80049f2:	f000 f8e9 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2150      	movs	r1, #80	; 0x50
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f942 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a02:	e02c      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f000 f908 	bl	8004c26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2160      	movs	r1, #96	; 0x60
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f932 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a22:	e01c      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f000 f8c9 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2140      	movs	r1, #64	; 0x40
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f922 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a42:	e00c      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 f919 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e003      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5a:	e000      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <TIM_Base_SetConfig+0xe4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d00b      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <TIM_Base_SetConfig+0xe8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <TIM_Base_SetConfig+0xec>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <TIM_Base_SetConfig+0xf0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d108      	bne.n	8004b12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <TIM_Base_SetConfig+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01b      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d017      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <TIM_Base_SetConfig+0xe8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <TIM_Base_SetConfig+0xec>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00f      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <TIM_Base_SetConfig+0xf0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <TIM_Base_SetConfig+0xf4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <TIM_Base_SetConfig+0xf8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_Base_SetConfig+0xfc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <TIM_Base_SetConfig+0xe4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d103      	bne.n	8004b98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800

08004bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 030a 	bic.w	r3, r3, #10
 8004c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b087      	sub	sp, #28
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0210 	bic.w	r2, r3, #16
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f043 0307 	orr.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e050      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d013      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40014000 	.word	0x40014000

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03f      	b.n	8004e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fd fd66 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fe81 	bl	8005b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d130      	bne.n	8004f16 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Transmit_IT+0x26>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e029      	b.n	8004f18 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Transmit_IT+0x38>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e022      	b.n	8004f18 <HAL_UART_Transmit_IT+0x7e>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2221      	movs	r2, #33	; 0x21
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d11d      	bne.n	8004f7a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_Receive_IT+0x26>
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e016      	b.n	8004f7c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_UART_Receive_IT+0x38>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e00f      	b.n	8004f7c <HAL_UART_Receive_IT+0x58>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fbe5 	bl	8005740 <UART_Start_Receive_IT>
 8004f76:	4603      	mov	r3, r0
 8004f78:	e000      	b.n	8004f7c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d13c      	bne.n	8005048 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3314      	adds	r3, #20
 8004fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fee:	61ba      	str	r2, [r7, #24]
 8004ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d013      	beq.n	8005032 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	4a16      	ldr	r2, [pc, #88]	; (8005068 <HAL_UART_AbortTransmit_IT+0xe4>)
 8005010:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe f861 	bl	80030de <HAL_DMA_Abort_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01c      	beq.n	800505c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
 8005030:	e014      	b.n	800505c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fb5d 	bl	8005700 <HAL_UART_AbortTransmitCpltCallback>
 8005046:	e009      	b.n	800505c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fb52 	bl	8005700 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3738      	adds	r7, #56	; 0x38
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	080058ab 	.word	0x080058ab

0800506c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b09a      	sub	sp, #104	; 0x68
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800508a:	667b      	str	r3, [r7, #100]	; 0x64
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005094:	657a      	str	r2, [r7, #84]	; 0x54
 8005096:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800509a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e5      	bne.n	8005074 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	663b      	str	r3, [r7, #96]	; 0x60
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050c8:	643a      	str	r2, [r7, #64]	; 0x40
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d119      	bne.n	8005118 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f023 0310 	bic.w	r3, r3, #16
 80050fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800510a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d13f      	bne.n	80051a6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	60bb      	str	r3, [r7, #8]
   return(result);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	65bb      	str	r3, [r7, #88]	; 0x58
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3314      	adds	r3, #20
 8005144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005146:	61ba      	str	r2, [r7, #24]
 8005148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6979      	ldr	r1, [r7, #20]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	613b      	str	r3, [r7, #16]
   return(result);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e5      	bne.n	8005126 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_UART_AbortReceive_IT+0x160>)
 8005168:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd ffb5 	bl	80030de <HAL_DMA_Abort_IT>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d022      	beq.n	80051c0 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005184:	4610      	mov	r0, r2
 8005186:	4798      	blx	r3
 8005188:	e01a      	b.n	80051c0 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fab8 	bl	8005714 <HAL_UART_AbortReceiveCpltCallback>
 80051a4:	e00c      	b.n	80051c0 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 faaa 	bl	8005714 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3768      	adds	r7, #104	; 0x68
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	080058d5 	.word	0x080058d5

080051d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b0ba      	sub	sp, #232	; 0xe8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800520e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_UART_IRQHandler+0x66>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fbd0 	bl	80059d4 <UART_Receive_IT>
      return;
 8005234:	e256      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80de 	beq.w	80053fc <HAL_UART_IRQHandler+0x22c>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80d1 	beq.w	80053fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_UART_IRQHandler+0xae>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <HAL_UART_IRQHandler+0xd2>
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0202 	orr.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0xf6>
 80052ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <HAL_UART_IRQHandler+0x126>
 80052d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0208 	orr.w	r2, r3, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 81ed 	beq.w	80056da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_UART_IRQHandler+0x14e>
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb5b 	bl	80059d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_UART_IRQHandler+0x17a>
 8005342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04f      	beq.n	80053ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa36 	bl	80057bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d141      	bne.n	80053e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800538a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800538e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1d9      	bne.n	800535e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d013      	beq.n	80053da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	4a7d      	ldr	r2, [pc, #500]	; (80055ac <HAL_UART_IRQHandler+0x3dc>)
 80053b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fe8d 	bl	80030de <HAL_DMA_Abort_IT>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053d4:	4610      	mov	r0, r2
 80053d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e00e      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f986 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	e00a      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f982 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	e006      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f97e 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053f6:	e170      	b.n	80056da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	bf00      	nop
    return;
 80053fa:	e16e      	b.n	80056da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	2b01      	cmp	r3, #1
 8005402:	f040 814a 	bne.w	800569a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8143 	beq.w	800569a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 813c 	beq.w	800569a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	f040 80b4 	bne.w	80055b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8140 	beq.w	80056de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005466:	429a      	cmp	r2, r3
 8005468:	f080 8139 	bcs.w	80056de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	f000 8088 	beq.w	8005592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800549c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1d9      	bne.n	8005482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e1      	bne.n	80054ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800551a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3314      	adds	r3, #20
 800552a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800552e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800553c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e3      	bne.n	800550a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005562:	f023 0310 	bic.w	r3, r3, #16
 8005566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005574:	65ba      	str	r2, [r7, #88]	; 0x58
 8005576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800557a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e3      	bne.n	8005550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	4618      	mov	r0, r3
 800558e:	f7fd fd36 	bl	8002ffe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800559a:	b29b      	uxth	r3, r3
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	b29b      	uxth	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8c0 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055a8:	e099      	b.n	80056de <HAL_UART_IRQHandler+0x50e>
 80055aa:	bf00      	nop
 80055ac:	08005883 	.word	0x08005883
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 808b 	beq.w	80056e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055fa:	647a      	str	r2, [r7, #68]	; 0x44
 80055fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e3      	bne.n	80055d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	623b      	str	r3, [r7, #32]
   return(result);
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005632:	633a      	str	r2, [r7, #48]	; 0x30
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e3      	bne.n	800560e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60fb      	str	r3, [r7, #12]
   return(result);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005678:	61fa      	str	r2, [r7, #28]
 800567a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	617b      	str	r3, [r7, #20]
   return(result);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e3      	bne.n	8005654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800568c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f848 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005698:	e023      	b.n	80056e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_UART_IRQHandler+0x4ea>
 80056a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f926 	bl	8005904 <UART_Transmit_IT>
    return;
 80056b8:	e014      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <HAL_UART_IRQHandler+0x514>
 80056c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f966 	bl	80059a4 <UART_EndTransmit_IT>
    return;
 80056d8:	e004      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
    return;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
      return;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
      return;
 80056e2:	bf00      	nop
  }
}
 80056e4:	37e8      	adds	r7, #232	; 0xe8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2222      	movs	r2, #34	; 0x22
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0220 	orr.w	r2, r2, #32
 80057ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b095      	sub	sp, #84	; 0x54
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e4:	643a      	str	r2, [r7, #64]	; 0x40
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	61fb      	str	r3, [r7, #28]
   return(result);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60bb      	str	r3, [r7, #8]
   return(result);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	647b      	str	r3, [r7, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005854:	61ba      	str	r2, [r7, #24]
 8005856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005876:	bf00      	nop
 8005878:	3754      	adds	r7, #84	; 0x54
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff ff25 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff ff1a 	bl	8005700 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ff0c 	bl	8005714 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b21      	cmp	r3, #33	; 0x21
 8005916:	d13e      	bne.n	8005996 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005920:	d114      	bne.n	800594c <UART_Transmit_IT+0x48>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d110      	bne.n	800594c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]
 800594a:	e008      	b.n	800595e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	1c59      	adds	r1, r3, #1
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6211      	str	r1, [r2, #32]
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29b      	uxth	r3, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4619      	mov	r1, r3
 800596c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fc fe97 	bl	80026f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	; 0x30
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b22      	cmp	r3, #34	; 0x22
 80059e6:	f040 80ab 	bne.w	8005b40 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f2:	d117      	bne.n	8005a24 <UART_Receive_IT+0x50>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d113      	bne.n	8005a24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	1c9a      	adds	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28
 8005a22:	e026      	b.n	8005a72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a36:	d007      	beq.n	8005a48 <UART_Receive_IT+0x74>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <UART_Receive_IT+0x82>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e008      	b.n	8005a68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d15a      	bne.n	8005b3c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0220 	bic.w	r2, r2, #32
 8005a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0201 	bic.w	r2, r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d135      	bne.n	8005b32 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	613b      	str	r3, [r7, #16]
   return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	623a      	str	r2, [r7, #32]
 8005aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d10a      	bne.n	8005b24 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fdfc 	bl	8005728 <HAL_UARTEx_RxEventCallback>
 8005b30:	e002      	b.n	8005b38 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc fdf4 	bl	8002720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e002      	b.n	8005b42 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b40:	2302      	movs	r3, #2
  }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3730      	adds	r7, #48	; 0x30
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b50:	b0c0      	sub	sp, #256	; 0x100
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	68d9      	ldr	r1, [r3, #12]
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	ea40 0301 	orr.w	r3, r0, r1
 8005b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ba4:	f021 010c 	bic.w	r1, r1, #12
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc6:	6999      	ldr	r1, [r3, #24]
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	ea40 0301 	orr.w	r3, r0, r1
 8005bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b8f      	ldr	r3, [pc, #572]	; (8005e18 <UART_SetConfig+0x2cc>)
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d005      	beq.n	8005bec <UART_SetConfig+0xa0>
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b8d      	ldr	r3, [pc, #564]	; (8005e1c <UART_SetConfig+0x2d0>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d104      	bne.n	8005bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7fe f894 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bf4:	e003      	b.n	8005bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bf6:	f7fe f87b 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c08:	f040 810c 	bne.w	8005e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c1e:	4622      	mov	r2, r4
 8005c20:	462b      	mov	r3, r5
 8005c22:	1891      	adds	r1, r2, r2
 8005c24:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c26:	415b      	adcs	r3, r3
 8005c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c2e:	4621      	mov	r1, r4
 8005c30:	eb12 0801 	adds.w	r8, r2, r1
 8005c34:	4629      	mov	r1, r5
 8005c36:	eb43 0901 	adc.w	r9, r3, r1
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c4e:	4690      	mov	r8, r2
 8005c50:	4699      	mov	r9, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	eb18 0303 	adds.w	r3, r8, r3
 8005c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	eb49 0303 	adc.w	r3, r9, r3
 8005c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	18db      	adds	r3, r3, r3
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c80:	4613      	mov	r3, r2
 8005c82:	eb42 0303 	adc.w	r3, r2, r3
 8005c86:	657b      	str	r3, [r7, #84]	; 0x54
 8005c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c90:	f7fa fdfc 	bl	800088c <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4b61      	ldr	r3, [pc, #388]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	011c      	lsls	r4, r3, #4
 8005ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	1891      	adds	r1, r2, r2
 8005cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cbc:	415b      	adcs	r3, r3
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005cca:	4649      	mov	r1, r9
 8005ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce4:	4692      	mov	sl, r2
 8005ce6:	469b      	mov	fp, r3
 8005ce8:	4643      	mov	r3, r8
 8005cea:	eb1a 0303 	adds.w	r3, sl, r3
 8005cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d10:	460b      	mov	r3, r1
 8005d12:	18db      	adds	r3, r3, r3
 8005d14:	643b      	str	r3, [r7, #64]	; 0x40
 8005d16:	4613      	mov	r3, r2
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d26:	f7fa fdb1 	bl	800088c <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4b3b      	ldr	r3, [pc, #236]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005d32:	fba3 2301 	umull	r2, r3, r3, r1
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	2264      	movs	r2, #100	; 0x64
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	1acb      	subs	r3, r1, r3
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d46:	4b36      	ldr	r3, [pc, #216]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005d48:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d54:	441c      	add	r4, r3
 8005d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d68:	4642      	mov	r2, r8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	1891      	adds	r1, r2, r2
 8005d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d70:	415b      	adcs	r3, r3
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d78:	4641      	mov	r1, r8
 8005d7a:	1851      	adds	r1, r2, r1
 8005d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d7e:	4649      	mov	r1, r9
 8005d80:	414b      	adcs	r3, r1
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d90:	4659      	mov	r1, fp
 8005d92:	00cb      	lsls	r3, r1, #3
 8005d94:	4651      	mov	r1, sl
 8005d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	00ca      	lsls	r2, r1, #3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	4642      	mov	r2, r8
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dac:	464b      	mov	r3, r9
 8005dae:	460a      	mov	r2, r1
 8005db0:	eb42 0303 	adc.w	r3, r2, r3
 8005db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dcc:	460b      	mov	r3, r1
 8005dce:	18db      	adds	r3, r3, r3
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	eb42 0303 	adc.w	r3, r2, r3
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005de2:	f7fa fd53 	bl	800088c <__aeabi_uldivmod>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005dec:	fba3 1302 	umull	r1, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	2164      	movs	r1, #100	; 0x64
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	3332      	adds	r3, #50	; 0x32
 8005dfe:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f003 0207 	and.w	r2, r3, #7
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4422      	add	r2, r4
 8005e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e14:	e106      	b.n	8006024 <UART_SetConfig+0x4d8>
 8005e16:	bf00      	nop
 8005e18:	40011000 	.word	0x40011000
 8005e1c:	40011400 	.word	0x40011400
 8005e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e36:	4642      	mov	r2, r8
 8005e38:	464b      	mov	r3, r9
 8005e3a:	1891      	adds	r1, r2, r2
 8005e3c:	6239      	str	r1, [r7, #32]
 8005e3e:	415b      	adcs	r3, r3
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
 8005e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e46:	4641      	mov	r1, r8
 8005e48:	1854      	adds	r4, r2, r1
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	eb43 0501 	adc.w	r5, r3, r1
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	00eb      	lsls	r3, r5, #3
 8005e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e5e:	00e2      	lsls	r2, r4, #3
 8005e60:	4614      	mov	r4, r2
 8005e62:	461d      	mov	r5, r3
 8005e64:	4643      	mov	r3, r8
 8005e66:	18e3      	adds	r3, r4, r3
 8005e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	eb45 0303 	adc.w	r3, r5, r3
 8005e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e92:	4629      	mov	r1, r5
 8005e94:	008b      	lsls	r3, r1, #2
 8005e96:	4621      	mov	r1, r4
 8005e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	008a      	lsls	r2, r1, #2
 8005ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ea4:	f7fa fcf2 	bl	800088c <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4b60      	ldr	r3, [pc, #384]	; (8006030 <UART_SetConfig+0x4e4>)
 8005eae:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	011c      	lsls	r4, r3, #4
 8005eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	61b9      	str	r1, [r7, #24]
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed8:	4641      	mov	r1, r8
 8005eda:	1851      	adds	r1, r2, r1
 8005edc:	6139      	str	r1, [r7, #16]
 8005ede:	4649      	mov	r1, r9
 8005ee0:	414b      	adcs	r3, r1
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	00cb      	lsls	r3, r1, #3
 8005ef4:	4651      	mov	r1, sl
 8005ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efa:	4651      	mov	r1, sl
 8005efc:	00ca      	lsls	r2, r1, #3
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	4642      	mov	r2, r8
 8005f06:	189b      	adds	r3, r3, r2
 8005f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	460a      	mov	r2, r1
 8005f10:	eb42 0303 	adc.w	r3, r2, r3
 8005f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f30:	4649      	mov	r1, r9
 8005f32:	008b      	lsls	r3, r1, #2
 8005f34:	4641      	mov	r1, r8
 8005f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	008a      	lsls	r2, r1, #2
 8005f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f42:	f7fa fca3 	bl	800088c <__aeabi_uldivmod>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4b38      	ldr	r3, [pc, #224]	; (8006030 <UART_SetConfig+0x4e4>)
 8005f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	2264      	movs	r2, #100	; 0x64
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	1acb      	subs	r3, r1, r3
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	3332      	adds	r3, #50	; 0x32
 8005f60:	4a33      	ldr	r2, [pc, #204]	; (8006030 <UART_SetConfig+0x4e4>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6c:	441c      	add	r4, r3
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f72:	2200      	movs	r2, #0
 8005f74:	673b      	str	r3, [r7, #112]	; 0x70
 8005f76:	677a      	str	r2, [r7, #116]	; 0x74
 8005f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	1891      	adds	r1, r2, r2
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	415b      	adcs	r3, r3
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	1851      	adds	r1, r2, r1
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	4649      	mov	r1, r9
 8005f94:	414b      	adcs	r3, r1
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	00cb      	lsls	r3, r1, #3
 8005fa8:	4651      	mov	r1, sl
 8005faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fae:	4651      	mov	r1, sl
 8005fb0:	00ca      	lsls	r2, r1, #3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4642      	mov	r2, r8
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	460a      	mov	r2, r1
 8005fc2:	eb42 0303 	adc.w	r3, r2, r3
 8005fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd2:	667a      	str	r2, [r7, #100]	; 0x64
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	008b      	lsls	r3, r1, #2
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fea:	4641      	mov	r1, r8
 8005fec:	008a      	lsls	r2, r1, #2
 8005fee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ff2:	f7fa fc4b 	bl	800088c <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <UART_SetConfig+0x4e4>)
 8005ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	2164      	movs	r1, #100	; 0x64
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	3332      	adds	r3, #50	; 0x32
 800600e:	4a08      	ldr	r2, [pc, #32]	; (8006030 <UART_SetConfig+0x4e4>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f003 020f 	and.w	r2, r3, #15
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4422      	add	r2, r4
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800602a:	46bd      	mov	sp, r7
 800602c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006030:	51eb851f 	.word	0x51eb851f

08006034 <__assert_func>:
 8006034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006036:	4614      	mov	r4, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4b09      	ldr	r3, [pc, #36]	; (8006060 <__assert_func+0x2c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4605      	mov	r5, r0
 8006040:	68d8      	ldr	r0, [r3, #12]
 8006042:	b14c      	cbz	r4, 8006058 <__assert_func+0x24>
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <__assert_func+0x30>)
 8006046:	9100      	str	r1, [sp, #0]
 8006048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800604c:	4906      	ldr	r1, [pc, #24]	; (8006068 <__assert_func+0x34>)
 800604e:	462b      	mov	r3, r5
 8006050:	f000 f95e 	bl	8006310 <fiprintf>
 8006054:	f000 fafd 	bl	8006652 <abort>
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <__assert_func+0x38>)
 800605a:	461c      	mov	r4, r3
 800605c:	e7f3      	b.n	8006046 <__assert_func+0x12>
 800605e:	bf00      	nop
 8006060:	200000fc 	.word	0x200000fc
 8006064:	080072e4 	.word	0x080072e4
 8006068:	080072f1 	.word	0x080072f1
 800606c:	0800731f 	.word	0x0800731f

08006070 <sbrk_aligned>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4e0e      	ldr	r6, [pc, #56]	; (80060ac <sbrk_aligned+0x3c>)
 8006074:	460c      	mov	r4, r1
 8006076:	6831      	ldr	r1, [r6, #0]
 8006078:	4605      	mov	r5, r0
 800607a:	b911      	cbnz	r1, 8006082 <sbrk_aligned+0x12>
 800607c:	f000 fa8c 	bl	8006598 <_sbrk_r>
 8006080:	6030      	str	r0, [r6, #0]
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 fa87 	bl	8006598 <_sbrk_r>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d00a      	beq.n	80060a4 <sbrk_aligned+0x34>
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d007      	beq.n	80060a8 <sbrk_aligned+0x38>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4628      	mov	r0, r5
 800609c:	f000 fa7c 	bl	8006598 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d101      	bne.n	80060a8 <sbrk_aligned+0x38>
 80060a4:	f04f 34ff 	mov.w	r4, #4294967295
 80060a8:	4620      	mov	r0, r4
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	200003c4 	.word	0x200003c4

080060b0 <_malloc_r>:
 80060b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b4:	1ccd      	adds	r5, r1, #3
 80060b6:	f025 0503 	bic.w	r5, r5, #3
 80060ba:	3508      	adds	r5, #8
 80060bc:	2d0c      	cmp	r5, #12
 80060be:	bf38      	it	cc
 80060c0:	250c      	movcc	r5, #12
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	4607      	mov	r7, r0
 80060c6:	db01      	blt.n	80060cc <_malloc_r+0x1c>
 80060c8:	42a9      	cmp	r1, r5
 80060ca:	d905      	bls.n	80060d8 <_malloc_r+0x28>
 80060cc:	230c      	movs	r3, #12
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	2600      	movs	r6, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061ac <_malloc_r+0xfc>
 80060dc:	f000 f868 	bl	80061b0 <__malloc_lock>
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	461c      	mov	r4, r3
 80060e6:	bb5c      	cbnz	r4, 8006140 <_malloc_r+0x90>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4638      	mov	r0, r7
 80060ec:	f7ff ffc0 	bl	8006070 <sbrk_aligned>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	4604      	mov	r4, r0
 80060f4:	d155      	bne.n	80061a2 <_malloc_r+0xf2>
 80060f6:	f8d8 4000 	ldr.w	r4, [r8]
 80060fa:	4626      	mov	r6, r4
 80060fc:	2e00      	cmp	r6, #0
 80060fe:	d145      	bne.n	800618c <_malloc_r+0xdc>
 8006100:	2c00      	cmp	r4, #0
 8006102:	d048      	beq.n	8006196 <_malloc_r+0xe6>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	4631      	mov	r1, r6
 8006108:	4638      	mov	r0, r7
 800610a:	eb04 0903 	add.w	r9, r4, r3
 800610e:	f000 fa43 	bl	8006598 <_sbrk_r>
 8006112:	4581      	cmp	r9, r0
 8006114:	d13f      	bne.n	8006196 <_malloc_r+0xe6>
 8006116:	6821      	ldr	r1, [r4, #0]
 8006118:	1a6d      	subs	r5, r5, r1
 800611a:	4629      	mov	r1, r5
 800611c:	4638      	mov	r0, r7
 800611e:	f7ff ffa7 	bl	8006070 <sbrk_aligned>
 8006122:	3001      	adds	r0, #1
 8006124:	d037      	beq.n	8006196 <_malloc_r+0xe6>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	442b      	add	r3, r5
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	f8d8 3000 	ldr.w	r3, [r8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d038      	beq.n	80061a6 <_malloc_r+0xf6>
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	42a2      	cmp	r2, r4
 8006138:	d12b      	bne.n	8006192 <_malloc_r+0xe2>
 800613a:	2200      	movs	r2, #0
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	e00f      	b.n	8006160 <_malloc_r+0xb0>
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	1b52      	subs	r2, r2, r5
 8006144:	d41f      	bmi.n	8006186 <_malloc_r+0xd6>
 8006146:	2a0b      	cmp	r2, #11
 8006148:	d917      	bls.n	800617a <_malloc_r+0xca>
 800614a:	1961      	adds	r1, r4, r5
 800614c:	42a3      	cmp	r3, r4
 800614e:	6025      	str	r5, [r4, #0]
 8006150:	bf18      	it	ne
 8006152:	6059      	strne	r1, [r3, #4]
 8006154:	6863      	ldr	r3, [r4, #4]
 8006156:	bf08      	it	eq
 8006158:	f8c8 1000 	streq.w	r1, [r8]
 800615c:	5162      	str	r2, [r4, r5]
 800615e:	604b      	str	r3, [r1, #4]
 8006160:	4638      	mov	r0, r7
 8006162:	f104 060b 	add.w	r6, r4, #11
 8006166:	f000 f829 	bl	80061bc <__malloc_unlock>
 800616a:	f026 0607 	bic.w	r6, r6, #7
 800616e:	1d23      	adds	r3, r4, #4
 8006170:	1af2      	subs	r2, r6, r3
 8006172:	d0ae      	beq.n	80060d2 <_malloc_r+0x22>
 8006174:	1b9b      	subs	r3, r3, r6
 8006176:	50a3      	str	r3, [r4, r2]
 8006178:	e7ab      	b.n	80060d2 <_malloc_r+0x22>
 800617a:	42a3      	cmp	r3, r4
 800617c:	6862      	ldr	r2, [r4, #4]
 800617e:	d1dd      	bne.n	800613c <_malloc_r+0x8c>
 8006180:	f8c8 2000 	str.w	r2, [r8]
 8006184:	e7ec      	b.n	8006160 <_malloc_r+0xb0>
 8006186:	4623      	mov	r3, r4
 8006188:	6864      	ldr	r4, [r4, #4]
 800618a:	e7ac      	b.n	80060e6 <_malloc_r+0x36>
 800618c:	4634      	mov	r4, r6
 800618e:	6876      	ldr	r6, [r6, #4]
 8006190:	e7b4      	b.n	80060fc <_malloc_r+0x4c>
 8006192:	4613      	mov	r3, r2
 8006194:	e7cc      	b.n	8006130 <_malloc_r+0x80>
 8006196:	230c      	movs	r3, #12
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4638      	mov	r0, r7
 800619c:	f000 f80e 	bl	80061bc <__malloc_unlock>
 80061a0:	e797      	b.n	80060d2 <_malloc_r+0x22>
 80061a2:	6025      	str	r5, [r4, #0]
 80061a4:	e7dc      	b.n	8006160 <_malloc_r+0xb0>
 80061a6:	605b      	str	r3, [r3, #4]
 80061a8:	deff      	udf	#255	; 0xff
 80061aa:	bf00      	nop
 80061ac:	200003c0 	.word	0x200003c0

080061b0 <__malloc_lock>:
 80061b0:	4801      	ldr	r0, [pc, #4]	; (80061b8 <__malloc_lock+0x8>)
 80061b2:	f000 ba3e 	b.w	8006632 <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	20000508 	.word	0x20000508

080061bc <__malloc_unlock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__malloc_unlock+0x8>)
 80061be:	f000 ba39 	b.w	8006634 <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	20000508 	.word	0x20000508

080061c8 <std>:
 80061c8:	2300      	movs	r3, #0
 80061ca:	b510      	push	{r4, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	e9c0 3300 	strd	r3, r3, [r0]
 80061d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061d6:	6083      	str	r3, [r0, #8]
 80061d8:	8181      	strh	r1, [r0, #12]
 80061da:	6643      	str	r3, [r0, #100]	; 0x64
 80061dc:	81c2      	strh	r2, [r0, #14]
 80061de:	6183      	str	r3, [r0, #24]
 80061e0:	4619      	mov	r1, r3
 80061e2:	2208      	movs	r2, #8
 80061e4:	305c      	adds	r0, #92	; 0x5c
 80061e6:	f000 f99b 	bl	8006520 <memset>
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <std+0x58>)
 80061ec:	6263      	str	r3, [r4, #36]	; 0x24
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <std+0x5c>)
 80061f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <std+0x60>)
 80061f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061f6:	4b0d      	ldr	r3, [pc, #52]	; (800622c <std+0x64>)
 80061f8:	6323      	str	r3, [r4, #48]	; 0x30
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <std+0x68>)
 80061fc:	6224      	str	r4, [r4, #32]
 80061fe:	429c      	cmp	r4, r3
 8006200:	d006      	beq.n	8006210 <std+0x48>
 8006202:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006206:	4294      	cmp	r4, r2
 8006208:	d002      	beq.n	8006210 <std+0x48>
 800620a:	33d0      	adds	r3, #208	; 0xd0
 800620c:	429c      	cmp	r4, r3
 800620e:	d105      	bne.n	800621c <std+0x54>
 8006210:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006218:	f000 ba0a 	b.w	8006630 <__retarget_lock_init_recursive>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	bf00      	nop
 8006220:	08006371 	.word	0x08006371
 8006224:	08006393 	.word	0x08006393
 8006228:	080063cb 	.word	0x080063cb
 800622c:	080063ef 	.word	0x080063ef
 8006230:	200003c8 	.word	0x200003c8

08006234 <stdio_exit_handler>:
 8006234:	4a02      	ldr	r2, [pc, #8]	; (8006240 <stdio_exit_handler+0xc>)
 8006236:	4903      	ldr	r1, [pc, #12]	; (8006244 <stdio_exit_handler+0x10>)
 8006238:	4803      	ldr	r0, [pc, #12]	; (8006248 <stdio_exit_handler+0x14>)
 800623a:	f000 b87b 	b.w	8006334 <_fwalk_sglue>
 800623e:	bf00      	nop
 8006240:	200000a4 	.word	0x200000a4
 8006244:	08006dad 	.word	0x08006dad
 8006248:	200000b0 	.word	0x200000b0

0800624c <cleanup_stdio>:
 800624c:	6841      	ldr	r1, [r0, #4]
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <cleanup_stdio+0x34>)
 8006250:	4299      	cmp	r1, r3
 8006252:	b510      	push	{r4, lr}
 8006254:	4604      	mov	r4, r0
 8006256:	d001      	beq.n	800625c <cleanup_stdio+0x10>
 8006258:	f000 fda8 	bl	8006dac <_fflush_r>
 800625c:	68a1      	ldr	r1, [r4, #8]
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <cleanup_stdio+0x38>)
 8006260:	4299      	cmp	r1, r3
 8006262:	d002      	beq.n	800626a <cleanup_stdio+0x1e>
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fda1 	bl	8006dac <_fflush_r>
 800626a:	68e1      	ldr	r1, [r4, #12]
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <cleanup_stdio+0x3c>)
 800626e:	4299      	cmp	r1, r3
 8006270:	d004      	beq.n	800627c <cleanup_stdio+0x30>
 8006272:	4620      	mov	r0, r4
 8006274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006278:	f000 bd98 	b.w	8006dac <_fflush_r>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	bf00      	nop
 8006280:	200003c8 	.word	0x200003c8
 8006284:	20000430 	.word	0x20000430
 8006288:	20000498 	.word	0x20000498

0800628c <global_stdio_init.part.0>:
 800628c:	b510      	push	{r4, lr}
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <global_stdio_init.part.0+0x30>)
 8006290:	4c0b      	ldr	r4, [pc, #44]	; (80062c0 <global_stdio_init.part.0+0x34>)
 8006292:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <global_stdio_init.part.0+0x38>)
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	4620      	mov	r0, r4
 8006298:	2200      	movs	r2, #0
 800629a:	2104      	movs	r1, #4
 800629c:	f7ff ff94 	bl	80061c8 <std>
 80062a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80062a4:	2201      	movs	r2, #1
 80062a6:	2109      	movs	r1, #9
 80062a8:	f7ff ff8e 	bl	80061c8 <std>
 80062ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062b0:	2202      	movs	r2, #2
 80062b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b6:	2112      	movs	r1, #18
 80062b8:	f7ff bf86 	b.w	80061c8 <std>
 80062bc:	20000500 	.word	0x20000500
 80062c0:	200003c8 	.word	0x200003c8
 80062c4:	08006235 	.word	0x08006235

080062c8 <__sfp_lock_acquire>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__sfp_lock_acquire+0x8>)
 80062ca:	f000 b9b2 	b.w	8006632 <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	20000509 	.word	0x20000509

080062d4 <__sfp_lock_release>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__sfp_lock_release+0x8>)
 80062d6:	f000 b9ad 	b.w	8006634 <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	20000509 	.word	0x20000509

080062e0 <__sinit>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	f7ff fff0 	bl	80062c8 <__sfp_lock_acquire>
 80062e8:	6a23      	ldr	r3, [r4, #32]
 80062ea:	b11b      	cbz	r3, 80062f4 <__sinit+0x14>
 80062ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f0:	f7ff bff0 	b.w	80062d4 <__sfp_lock_release>
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <__sinit+0x28>)
 80062f6:	6223      	str	r3, [r4, #32]
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <__sinit+0x2c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f5      	bne.n	80062ec <__sinit+0xc>
 8006300:	f7ff ffc4 	bl	800628c <global_stdio_init.part.0>
 8006304:	e7f2      	b.n	80062ec <__sinit+0xc>
 8006306:	bf00      	nop
 8006308:	0800624d 	.word	0x0800624d
 800630c:	20000500 	.word	0x20000500

08006310 <fiprintf>:
 8006310:	b40e      	push	{r1, r2, r3}
 8006312:	b503      	push	{r0, r1, lr}
 8006314:	4601      	mov	r1, r0
 8006316:	ab03      	add	r3, sp, #12
 8006318:	4805      	ldr	r0, [pc, #20]	; (8006330 <fiprintf+0x20>)
 800631a:	f853 2b04 	ldr.w	r2, [r3], #4
 800631e:	6800      	ldr	r0, [r0, #0]
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	f000 fa13 	bl	800674c <_vfiprintf_r>
 8006326:	b002      	add	sp, #8
 8006328:	f85d eb04 	ldr.w	lr, [sp], #4
 800632c:	b003      	add	sp, #12
 800632e:	4770      	bx	lr
 8006330:	200000fc 	.word	0x200000fc

08006334 <_fwalk_sglue>:
 8006334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006338:	4607      	mov	r7, r0
 800633a:	4688      	mov	r8, r1
 800633c:	4614      	mov	r4, r2
 800633e:	2600      	movs	r6, #0
 8006340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006344:	f1b9 0901 	subs.w	r9, r9, #1
 8006348:	d505      	bpl.n	8006356 <_fwalk_sglue+0x22>
 800634a:	6824      	ldr	r4, [r4, #0]
 800634c:	2c00      	cmp	r4, #0
 800634e:	d1f7      	bne.n	8006340 <_fwalk_sglue+0xc>
 8006350:	4630      	mov	r0, r6
 8006352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d907      	bls.n	800636c <_fwalk_sglue+0x38>
 800635c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006360:	3301      	adds	r3, #1
 8006362:	d003      	beq.n	800636c <_fwalk_sglue+0x38>
 8006364:	4629      	mov	r1, r5
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	4306      	orrs	r6, r0
 800636c:	3568      	adds	r5, #104	; 0x68
 800636e:	e7e9      	b.n	8006344 <_fwalk_sglue+0x10>

08006370 <__sread>:
 8006370:	b510      	push	{r4, lr}
 8006372:	460c      	mov	r4, r1
 8006374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006378:	f000 f8fc 	bl	8006574 <_read_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	bfab      	itete	ge
 8006380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006382:	89a3      	ldrhlt	r3, [r4, #12]
 8006384:	181b      	addge	r3, r3, r0
 8006386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800638a:	bfac      	ite	ge
 800638c:	6563      	strge	r3, [r4, #84]	; 0x54
 800638e:	81a3      	strhlt	r3, [r4, #12]
 8006390:	bd10      	pop	{r4, pc}

08006392 <__swrite>:
 8006392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006396:	461f      	mov	r7, r3
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	05db      	lsls	r3, r3, #23
 800639c:	4605      	mov	r5, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	4616      	mov	r6, r2
 80063a2:	d505      	bpl.n	80063b0 <__swrite+0x1e>
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	2302      	movs	r3, #2
 80063aa:	2200      	movs	r2, #0
 80063ac:	f000 f8d0 	bl	8006550 <_lseek_r>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	4632      	mov	r2, r6
 80063be:	463b      	mov	r3, r7
 80063c0:	4628      	mov	r0, r5
 80063c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	f000 b8f7 	b.w	80065b8 <_write_r>

080063ca <__sseek>:
 80063ca:	b510      	push	{r4, lr}
 80063cc:	460c      	mov	r4, r1
 80063ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d2:	f000 f8bd 	bl	8006550 <_lseek_r>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	bf15      	itete	ne
 80063dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063e6:	81a3      	strheq	r3, [r4, #12]
 80063e8:	bf18      	it	ne
 80063ea:	81a3      	strhne	r3, [r4, #12]
 80063ec:	bd10      	pop	{r4, pc}

080063ee <__sclose>:
 80063ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f2:	f000 b89d 	b.w	8006530 <_close_r>

080063f6 <__swbuf_r>:
 80063f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f8:	460e      	mov	r6, r1
 80063fa:	4614      	mov	r4, r2
 80063fc:	4605      	mov	r5, r0
 80063fe:	b118      	cbz	r0, 8006408 <__swbuf_r+0x12>
 8006400:	6a03      	ldr	r3, [r0, #32]
 8006402:	b90b      	cbnz	r3, 8006408 <__swbuf_r+0x12>
 8006404:	f7ff ff6c 	bl	80062e0 <__sinit>
 8006408:	69a3      	ldr	r3, [r4, #24]
 800640a:	60a3      	str	r3, [r4, #8]
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	071a      	lsls	r2, r3, #28
 8006410:	d525      	bpl.n	800645e <__swbuf_r+0x68>
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	b31b      	cbz	r3, 800645e <__swbuf_r+0x68>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	6922      	ldr	r2, [r4, #16]
 800641a:	1a98      	subs	r0, r3, r2
 800641c:	6963      	ldr	r3, [r4, #20]
 800641e:	b2f6      	uxtb	r6, r6
 8006420:	4283      	cmp	r3, r0
 8006422:	4637      	mov	r7, r6
 8006424:	dc04      	bgt.n	8006430 <__swbuf_r+0x3a>
 8006426:	4621      	mov	r1, r4
 8006428:	4628      	mov	r0, r5
 800642a:	f000 fcbf 	bl	8006dac <_fflush_r>
 800642e:	b9e0      	cbnz	r0, 800646a <__swbuf_r+0x74>
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	3b01      	subs	r3, #1
 8006434:	60a3      	str	r3, [r4, #8]
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	701e      	strb	r6, [r3, #0]
 800643e:	6962      	ldr	r2, [r4, #20]
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	429a      	cmp	r2, r3
 8006444:	d004      	beq.n	8006450 <__swbuf_r+0x5a>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	07db      	lsls	r3, r3, #31
 800644a:	d506      	bpl.n	800645a <__swbuf_r+0x64>
 800644c:	2e0a      	cmp	r6, #10
 800644e:	d104      	bne.n	800645a <__swbuf_r+0x64>
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 fcaa 	bl	8006dac <_fflush_r>
 8006458:	b938      	cbnz	r0, 800646a <__swbuf_r+0x74>
 800645a:	4638      	mov	r0, r7
 800645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f805 	bl	8006470 <__swsetup_r>
 8006466:	2800      	cmp	r0, #0
 8006468:	d0d5      	beq.n	8006416 <__swbuf_r+0x20>
 800646a:	f04f 37ff 	mov.w	r7, #4294967295
 800646e:	e7f4      	b.n	800645a <__swbuf_r+0x64>

08006470 <__swsetup_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <__swsetup_r+0xac>)
 8006474:	4605      	mov	r5, r0
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	460c      	mov	r4, r1
 800647a:	b118      	cbz	r0, 8006484 <__swsetup_r+0x14>
 800647c:	6a03      	ldr	r3, [r0, #32]
 800647e:	b90b      	cbnz	r3, 8006484 <__swsetup_r+0x14>
 8006480:	f7ff ff2e 	bl	80062e0 <__sinit>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800648a:	0718      	lsls	r0, r3, #28
 800648c:	d422      	bmi.n	80064d4 <__swsetup_r+0x64>
 800648e:	06d9      	lsls	r1, r3, #27
 8006490:	d407      	bmi.n	80064a2 <__swsetup_r+0x32>
 8006492:	2309      	movs	r3, #9
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e034      	b.n	800650c <__swsetup_r+0x9c>
 80064a2:	0758      	lsls	r0, r3, #29
 80064a4:	d512      	bpl.n	80064cc <__swsetup_r+0x5c>
 80064a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064a8:	b141      	cbz	r1, 80064bc <__swsetup_r+0x4c>
 80064aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ae:	4299      	cmp	r1, r3
 80064b0:	d002      	beq.n	80064b8 <__swsetup_r+0x48>
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 f8d4 	bl	8006660 <_free_r>
 80064b8:	2300      	movs	r3, #0
 80064ba:	6363      	str	r3, [r4, #52]	; 0x34
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	2300      	movs	r3, #0
 80064c6:	6063      	str	r3, [r4, #4]
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f043 0308 	orr.w	r3, r3, #8
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	b94b      	cbnz	r3, 80064ec <__swsetup_r+0x7c>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e2:	d003      	beq.n	80064ec <__swsetup_r+0x7c>
 80064e4:	4621      	mov	r1, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 fcae 	bl	8006e48 <__smakebuf_r>
 80064ec:	89a0      	ldrh	r0, [r4, #12]
 80064ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064f2:	f010 0301 	ands.w	r3, r0, #1
 80064f6:	d00a      	beq.n	800650e <__swsetup_r+0x9e>
 80064f8:	2300      	movs	r3, #0
 80064fa:	60a3      	str	r3, [r4, #8]
 80064fc:	6963      	ldr	r3, [r4, #20]
 80064fe:	425b      	negs	r3, r3
 8006500:	61a3      	str	r3, [r4, #24]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	b943      	cbnz	r3, 8006518 <__swsetup_r+0xa8>
 8006506:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800650a:	d1c4      	bne.n	8006496 <__swsetup_r+0x26>
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	0781      	lsls	r1, r0, #30
 8006510:	bf58      	it	pl
 8006512:	6963      	ldrpl	r3, [r4, #20]
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	e7f4      	b.n	8006502 <__swsetup_r+0x92>
 8006518:	2000      	movs	r0, #0
 800651a:	e7f7      	b.n	800650c <__swsetup_r+0x9c>
 800651c:	200000fc 	.word	0x200000fc

08006520 <memset>:
 8006520:	4402      	add	r2, r0
 8006522:	4603      	mov	r3, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	d100      	bne.n	800652a <memset+0xa>
 8006528:	4770      	bx	lr
 800652a:	f803 1b01 	strb.w	r1, [r3], #1
 800652e:	e7f9      	b.n	8006524 <memset+0x4>

08006530 <_close_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	; (800654c <_close_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fc fb35 	bl	8002baa <_close>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_close_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_close_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20000504 	.word	0x20000504

08006550 <_lseek_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d07      	ldr	r5, [pc, #28]	; (8006570 <_lseek_r+0x20>)
 8006554:	4604      	mov	r4, r0
 8006556:	4608      	mov	r0, r1
 8006558:	4611      	mov	r1, r2
 800655a:	2200      	movs	r2, #0
 800655c:	602a      	str	r2, [r5, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	f7fc fb4a 	bl	8002bf8 <_lseek>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_lseek_r+0x1e>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_lseek_r+0x1e>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000504 	.word	0x20000504

08006574 <_read_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	; (8006594 <_read_r+0x20>)
 8006578:	4604      	mov	r4, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	602a      	str	r2, [r5, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fc fad8 	bl	8002b38 <_read>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_read_r+0x1e>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_read_r+0x1e>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000504 	.word	0x20000504

08006598 <_sbrk_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	; (80065b4 <_sbrk_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fc fb36 	bl	8002c14 <_sbrk>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_sbrk_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_sbrk_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	20000504 	.word	0x20000504

080065b8 <_write_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d07      	ldr	r5, [pc, #28]	; (80065d8 <_write_r+0x20>)
 80065bc:	4604      	mov	r4, r0
 80065be:	4608      	mov	r0, r1
 80065c0:	4611      	mov	r1, r2
 80065c2:	2200      	movs	r2, #0
 80065c4:	602a      	str	r2, [r5, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f7fc fad3 	bl	8002b72 <_write>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_write_r+0x1e>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_write_r+0x1e>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	20000504 	.word	0x20000504

080065dc <__errno>:
 80065dc:	4b01      	ldr	r3, [pc, #4]	; (80065e4 <__errno+0x8>)
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	200000fc 	.word	0x200000fc

080065e8 <__libc_init_array>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	4d0d      	ldr	r5, [pc, #52]	; (8006620 <__libc_init_array+0x38>)
 80065ec:	4c0d      	ldr	r4, [pc, #52]	; (8006624 <__libc_init_array+0x3c>)
 80065ee:	1b64      	subs	r4, r4, r5
 80065f0:	10a4      	asrs	r4, r4, #2
 80065f2:	2600      	movs	r6, #0
 80065f4:	42a6      	cmp	r6, r4
 80065f6:	d109      	bne.n	800660c <__libc_init_array+0x24>
 80065f8:	4d0b      	ldr	r5, [pc, #44]	; (8006628 <__libc_init_array+0x40>)
 80065fa:	4c0c      	ldr	r4, [pc, #48]	; (800662c <__libc_init_array+0x44>)
 80065fc:	f000 fcc6 	bl	8006f8c <_init>
 8006600:	1b64      	subs	r4, r4, r5
 8006602:	10a4      	asrs	r4, r4, #2
 8006604:	2600      	movs	r6, #0
 8006606:	42a6      	cmp	r6, r4
 8006608:	d105      	bne.n	8006616 <__libc_init_array+0x2e>
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006610:	4798      	blx	r3
 8006612:	3601      	adds	r6, #1
 8006614:	e7ee      	b.n	80065f4 <__libc_init_array+0xc>
 8006616:	f855 3b04 	ldr.w	r3, [r5], #4
 800661a:	4798      	blx	r3
 800661c:	3601      	adds	r6, #1
 800661e:	e7f2      	b.n	8006606 <__libc_init_array+0x1e>
 8006620:	0800735c 	.word	0x0800735c
 8006624:	0800735c 	.word	0x0800735c
 8006628:	0800735c 	.word	0x0800735c
 800662c:	08007360 	.word	0x08007360

08006630 <__retarget_lock_init_recursive>:
 8006630:	4770      	bx	lr

08006632 <__retarget_lock_acquire_recursive>:
 8006632:	4770      	bx	lr

08006634 <__retarget_lock_release_recursive>:
 8006634:	4770      	bx	lr

08006636 <memcpy>:
 8006636:	440a      	add	r2, r1
 8006638:	4291      	cmp	r1, r2
 800663a:	f100 33ff 	add.w	r3, r0, #4294967295
 800663e:	d100      	bne.n	8006642 <memcpy+0xc>
 8006640:	4770      	bx	lr
 8006642:	b510      	push	{r4, lr}
 8006644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800664c:	4291      	cmp	r1, r2
 800664e:	d1f9      	bne.n	8006644 <memcpy+0xe>
 8006650:	bd10      	pop	{r4, pc}

08006652 <abort>:
 8006652:	b508      	push	{r3, lr}
 8006654:	2006      	movs	r0, #6
 8006656:	f000 fc5b 	bl	8006f10 <raise>
 800665a:	2001      	movs	r0, #1
 800665c:	f7fc fa62 	bl	8002b24 <_exit>

08006660 <_free_r>:
 8006660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006662:	2900      	cmp	r1, #0
 8006664:	d044      	beq.n	80066f0 <_free_r+0x90>
 8006666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800666a:	9001      	str	r0, [sp, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f1a1 0404 	sub.w	r4, r1, #4
 8006672:	bfb8      	it	lt
 8006674:	18e4      	addlt	r4, r4, r3
 8006676:	f7ff fd9b 	bl	80061b0 <__malloc_lock>
 800667a:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <_free_r+0x94>)
 800667c:	9801      	ldr	r0, [sp, #4]
 800667e:	6813      	ldr	r3, [r2, #0]
 8006680:	b933      	cbnz	r3, 8006690 <_free_r+0x30>
 8006682:	6063      	str	r3, [r4, #4]
 8006684:	6014      	str	r4, [r2, #0]
 8006686:	b003      	add	sp, #12
 8006688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800668c:	f7ff bd96 	b.w	80061bc <__malloc_unlock>
 8006690:	42a3      	cmp	r3, r4
 8006692:	d908      	bls.n	80066a6 <_free_r+0x46>
 8006694:	6825      	ldr	r5, [r4, #0]
 8006696:	1961      	adds	r1, r4, r5
 8006698:	428b      	cmp	r3, r1
 800669a:	bf01      	itttt	eq
 800669c:	6819      	ldreq	r1, [r3, #0]
 800669e:	685b      	ldreq	r3, [r3, #4]
 80066a0:	1949      	addeq	r1, r1, r5
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	e7ed      	b.n	8006682 <_free_r+0x22>
 80066a6:	461a      	mov	r2, r3
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b10b      	cbz	r3, 80066b0 <_free_r+0x50>
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d9fa      	bls.n	80066a6 <_free_r+0x46>
 80066b0:	6811      	ldr	r1, [r2, #0]
 80066b2:	1855      	adds	r5, r2, r1
 80066b4:	42a5      	cmp	r5, r4
 80066b6:	d10b      	bne.n	80066d0 <_free_r+0x70>
 80066b8:	6824      	ldr	r4, [r4, #0]
 80066ba:	4421      	add	r1, r4
 80066bc:	1854      	adds	r4, r2, r1
 80066be:	42a3      	cmp	r3, r4
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	d1e0      	bne.n	8006686 <_free_r+0x26>
 80066c4:	681c      	ldr	r4, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	6053      	str	r3, [r2, #4]
 80066ca:	440c      	add	r4, r1
 80066cc:	6014      	str	r4, [r2, #0]
 80066ce:	e7da      	b.n	8006686 <_free_r+0x26>
 80066d0:	d902      	bls.n	80066d8 <_free_r+0x78>
 80066d2:	230c      	movs	r3, #12
 80066d4:	6003      	str	r3, [r0, #0]
 80066d6:	e7d6      	b.n	8006686 <_free_r+0x26>
 80066d8:	6825      	ldr	r5, [r4, #0]
 80066da:	1961      	adds	r1, r4, r5
 80066dc:	428b      	cmp	r3, r1
 80066de:	bf04      	itt	eq
 80066e0:	6819      	ldreq	r1, [r3, #0]
 80066e2:	685b      	ldreq	r3, [r3, #4]
 80066e4:	6063      	str	r3, [r4, #4]
 80066e6:	bf04      	itt	eq
 80066e8:	1949      	addeq	r1, r1, r5
 80066ea:	6021      	streq	r1, [r4, #0]
 80066ec:	6054      	str	r4, [r2, #4]
 80066ee:	e7ca      	b.n	8006686 <_free_r+0x26>
 80066f0:	b003      	add	sp, #12
 80066f2:	bd30      	pop	{r4, r5, pc}
 80066f4:	200003c0 	.word	0x200003c0

080066f8 <__sfputc_r>:
 80066f8:	6893      	ldr	r3, [r2, #8]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	b410      	push	{r4}
 8006700:	6093      	str	r3, [r2, #8]
 8006702:	da08      	bge.n	8006716 <__sfputc_r+0x1e>
 8006704:	6994      	ldr	r4, [r2, #24]
 8006706:	42a3      	cmp	r3, r4
 8006708:	db01      	blt.n	800670e <__sfputc_r+0x16>
 800670a:	290a      	cmp	r1, #10
 800670c:	d103      	bne.n	8006716 <__sfputc_r+0x1e>
 800670e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006712:	f7ff be70 	b.w	80063f6 <__swbuf_r>
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	1c58      	adds	r0, r3, #1
 800671a:	6010      	str	r0, [r2, #0]
 800671c:	7019      	strb	r1, [r3, #0]
 800671e:	4608      	mov	r0, r1
 8006720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006724:	4770      	bx	lr

08006726 <__sfputs_r>:
 8006726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006728:	4606      	mov	r6, r0
 800672a:	460f      	mov	r7, r1
 800672c:	4614      	mov	r4, r2
 800672e:	18d5      	adds	r5, r2, r3
 8006730:	42ac      	cmp	r4, r5
 8006732:	d101      	bne.n	8006738 <__sfputs_r+0x12>
 8006734:	2000      	movs	r0, #0
 8006736:	e007      	b.n	8006748 <__sfputs_r+0x22>
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	463a      	mov	r2, r7
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ffda 	bl	80066f8 <__sfputc_r>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d1f3      	bne.n	8006730 <__sfputs_r+0xa>
 8006748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800674c <_vfiprintf_r>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	460d      	mov	r5, r1
 8006752:	b09d      	sub	sp, #116	; 0x74
 8006754:	4614      	mov	r4, r2
 8006756:	4698      	mov	r8, r3
 8006758:	4606      	mov	r6, r0
 800675a:	b118      	cbz	r0, 8006764 <_vfiprintf_r+0x18>
 800675c:	6a03      	ldr	r3, [r0, #32]
 800675e:	b90b      	cbnz	r3, 8006764 <_vfiprintf_r+0x18>
 8006760:	f7ff fdbe 	bl	80062e0 <__sinit>
 8006764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	d405      	bmi.n	8006776 <_vfiprintf_r+0x2a>
 800676a:	89ab      	ldrh	r3, [r5, #12]
 800676c:	059a      	lsls	r2, r3, #22
 800676e:	d402      	bmi.n	8006776 <_vfiprintf_r+0x2a>
 8006770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006772:	f7ff ff5e 	bl	8006632 <__retarget_lock_acquire_recursive>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	071b      	lsls	r3, r3, #28
 800677a:	d501      	bpl.n	8006780 <_vfiprintf_r+0x34>
 800677c:	692b      	ldr	r3, [r5, #16]
 800677e:	b99b      	cbnz	r3, 80067a8 <_vfiprintf_r+0x5c>
 8006780:	4629      	mov	r1, r5
 8006782:	4630      	mov	r0, r6
 8006784:	f7ff fe74 	bl	8006470 <__swsetup_r>
 8006788:	b170      	cbz	r0, 80067a8 <_vfiprintf_r+0x5c>
 800678a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800678c:	07dc      	lsls	r4, r3, #31
 800678e:	d504      	bpl.n	800679a <_vfiprintf_r+0x4e>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	b01d      	add	sp, #116	; 0x74
 8006796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	0598      	lsls	r0, r3, #22
 800679e:	d4f7      	bmi.n	8006790 <_vfiprintf_r+0x44>
 80067a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067a2:	f7ff ff47 	bl	8006634 <__retarget_lock_release_recursive>
 80067a6:	e7f3      	b.n	8006790 <_vfiprintf_r+0x44>
 80067a8:	2300      	movs	r3, #0
 80067aa:	9309      	str	r3, [sp, #36]	; 0x24
 80067ac:	2320      	movs	r3, #32
 80067ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80067b6:	2330      	movs	r3, #48	; 0x30
 80067b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800696c <_vfiprintf_r+0x220>
 80067bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067c0:	f04f 0901 	mov.w	r9, #1
 80067c4:	4623      	mov	r3, r4
 80067c6:	469a      	mov	sl, r3
 80067c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067cc:	b10a      	cbz	r2, 80067d2 <_vfiprintf_r+0x86>
 80067ce:	2a25      	cmp	r2, #37	; 0x25
 80067d0:	d1f9      	bne.n	80067c6 <_vfiprintf_r+0x7a>
 80067d2:	ebba 0b04 	subs.w	fp, sl, r4
 80067d6:	d00b      	beq.n	80067f0 <_vfiprintf_r+0xa4>
 80067d8:	465b      	mov	r3, fp
 80067da:	4622      	mov	r2, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	4630      	mov	r0, r6
 80067e0:	f7ff ffa1 	bl	8006726 <__sfputs_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	f000 80a9 	beq.w	800693c <_vfiprintf_r+0x1f0>
 80067ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ec:	445a      	add	r2, fp
 80067ee:	9209      	str	r2, [sp, #36]	; 0x24
 80067f0:	f89a 3000 	ldrb.w	r3, [sl]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80a1 	beq.w	800693c <_vfiprintf_r+0x1f0>
 80067fa:	2300      	movs	r3, #0
 80067fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006804:	f10a 0a01 	add.w	sl, sl, #1
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	9307      	str	r3, [sp, #28]
 800680c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006810:	931a      	str	r3, [sp, #104]	; 0x68
 8006812:	4654      	mov	r4, sl
 8006814:	2205      	movs	r2, #5
 8006816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681a:	4854      	ldr	r0, [pc, #336]	; (800696c <_vfiprintf_r+0x220>)
 800681c:	f7f9 fce0 	bl	80001e0 <memchr>
 8006820:	9a04      	ldr	r2, [sp, #16]
 8006822:	b9d8      	cbnz	r0, 800685c <_vfiprintf_r+0x110>
 8006824:	06d1      	lsls	r1, r2, #27
 8006826:	bf44      	itt	mi
 8006828:	2320      	movmi	r3, #32
 800682a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800682e:	0713      	lsls	r3, r2, #28
 8006830:	bf44      	itt	mi
 8006832:	232b      	movmi	r3, #43	; 0x2b
 8006834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006838:	f89a 3000 	ldrb.w	r3, [sl]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	d015      	beq.n	800686c <_vfiprintf_r+0x120>
 8006840:	9a07      	ldr	r2, [sp, #28]
 8006842:	4654      	mov	r4, sl
 8006844:	2000      	movs	r0, #0
 8006846:	f04f 0c0a 	mov.w	ip, #10
 800684a:	4621      	mov	r1, r4
 800684c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006850:	3b30      	subs	r3, #48	; 0x30
 8006852:	2b09      	cmp	r3, #9
 8006854:	d94d      	bls.n	80068f2 <_vfiprintf_r+0x1a6>
 8006856:	b1b0      	cbz	r0, 8006886 <_vfiprintf_r+0x13a>
 8006858:	9207      	str	r2, [sp, #28]
 800685a:	e014      	b.n	8006886 <_vfiprintf_r+0x13a>
 800685c:	eba0 0308 	sub.w	r3, r0, r8
 8006860:	fa09 f303 	lsl.w	r3, r9, r3
 8006864:	4313      	orrs	r3, r2
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	46a2      	mov	sl, r4
 800686a:	e7d2      	b.n	8006812 <_vfiprintf_r+0xc6>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	1d19      	adds	r1, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	9103      	str	r1, [sp, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	bfbb      	ittet	lt
 8006878:	425b      	neglt	r3, r3
 800687a:	f042 0202 	orrlt.w	r2, r2, #2
 800687e:	9307      	strge	r3, [sp, #28]
 8006880:	9307      	strlt	r3, [sp, #28]
 8006882:	bfb8      	it	lt
 8006884:	9204      	strlt	r2, [sp, #16]
 8006886:	7823      	ldrb	r3, [r4, #0]
 8006888:	2b2e      	cmp	r3, #46	; 0x2e
 800688a:	d10c      	bne.n	80068a6 <_vfiprintf_r+0x15a>
 800688c:	7863      	ldrb	r3, [r4, #1]
 800688e:	2b2a      	cmp	r3, #42	; 0x2a
 8006890:	d134      	bne.n	80068fc <_vfiprintf_r+0x1b0>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	9203      	str	r2, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfb8      	it	lt
 800689e:	f04f 33ff 	movlt.w	r3, #4294967295
 80068a2:	3402      	adds	r4, #2
 80068a4:	9305      	str	r3, [sp, #20]
 80068a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800697c <_vfiprintf_r+0x230>
 80068aa:	7821      	ldrb	r1, [r4, #0]
 80068ac:	2203      	movs	r2, #3
 80068ae:	4650      	mov	r0, sl
 80068b0:	f7f9 fc96 	bl	80001e0 <memchr>
 80068b4:	b138      	cbz	r0, 80068c6 <_vfiprintf_r+0x17a>
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	eba0 000a 	sub.w	r0, r0, sl
 80068bc:	2240      	movs	r2, #64	; 0x40
 80068be:	4082      	lsls	r2, r0
 80068c0:	4313      	orrs	r3, r2
 80068c2:	3401      	adds	r4, #1
 80068c4:	9304      	str	r3, [sp, #16]
 80068c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ca:	4829      	ldr	r0, [pc, #164]	; (8006970 <_vfiprintf_r+0x224>)
 80068cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068d0:	2206      	movs	r2, #6
 80068d2:	f7f9 fc85 	bl	80001e0 <memchr>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d03f      	beq.n	800695a <_vfiprintf_r+0x20e>
 80068da:	4b26      	ldr	r3, [pc, #152]	; (8006974 <_vfiprintf_r+0x228>)
 80068dc:	bb1b      	cbnz	r3, 8006926 <_vfiprintf_r+0x1da>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	3307      	adds	r3, #7
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	3308      	adds	r3, #8
 80068e8:	9303      	str	r3, [sp, #12]
 80068ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ec:	443b      	add	r3, r7
 80068ee:	9309      	str	r3, [sp, #36]	; 0x24
 80068f0:	e768      	b.n	80067c4 <_vfiprintf_r+0x78>
 80068f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f6:	460c      	mov	r4, r1
 80068f8:	2001      	movs	r0, #1
 80068fa:	e7a6      	b.n	800684a <_vfiprintf_r+0xfe>
 80068fc:	2300      	movs	r3, #0
 80068fe:	3401      	adds	r4, #1
 8006900:	9305      	str	r3, [sp, #20]
 8006902:	4619      	mov	r1, r3
 8006904:	f04f 0c0a 	mov.w	ip, #10
 8006908:	4620      	mov	r0, r4
 800690a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800690e:	3a30      	subs	r2, #48	; 0x30
 8006910:	2a09      	cmp	r2, #9
 8006912:	d903      	bls.n	800691c <_vfiprintf_r+0x1d0>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0c6      	beq.n	80068a6 <_vfiprintf_r+0x15a>
 8006918:	9105      	str	r1, [sp, #20]
 800691a:	e7c4      	b.n	80068a6 <_vfiprintf_r+0x15a>
 800691c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006920:	4604      	mov	r4, r0
 8006922:	2301      	movs	r3, #1
 8006924:	e7f0      	b.n	8006908 <_vfiprintf_r+0x1bc>
 8006926:	ab03      	add	r3, sp, #12
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	462a      	mov	r2, r5
 800692c:	4b12      	ldr	r3, [pc, #72]	; (8006978 <_vfiprintf_r+0x22c>)
 800692e:	a904      	add	r1, sp, #16
 8006930:	4630      	mov	r0, r6
 8006932:	f3af 8000 	nop.w
 8006936:	4607      	mov	r7, r0
 8006938:	1c78      	adds	r0, r7, #1
 800693a:	d1d6      	bne.n	80068ea <_vfiprintf_r+0x19e>
 800693c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693e:	07d9      	lsls	r1, r3, #31
 8006940:	d405      	bmi.n	800694e <_vfiprintf_r+0x202>
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	059a      	lsls	r2, r3, #22
 8006946:	d402      	bmi.n	800694e <_vfiprintf_r+0x202>
 8006948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800694a:	f7ff fe73 	bl	8006634 <__retarget_lock_release_recursive>
 800694e:	89ab      	ldrh	r3, [r5, #12]
 8006950:	065b      	lsls	r3, r3, #25
 8006952:	f53f af1d 	bmi.w	8006790 <_vfiprintf_r+0x44>
 8006956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006958:	e71c      	b.n	8006794 <_vfiprintf_r+0x48>
 800695a:	ab03      	add	r3, sp, #12
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	462a      	mov	r2, r5
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <_vfiprintf_r+0x22c>)
 8006962:	a904      	add	r1, sp, #16
 8006964:	4630      	mov	r0, r6
 8006966:	f000 f879 	bl	8006a5c <_printf_i>
 800696a:	e7e4      	b.n	8006936 <_vfiprintf_r+0x1ea>
 800696c:	08007320 	.word	0x08007320
 8006970:	0800732a 	.word	0x0800732a
 8006974:	00000000 	.word	0x00000000
 8006978:	08006727 	.word	0x08006727
 800697c:	08007326 	.word	0x08007326

08006980 <_printf_common>:
 8006980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	4616      	mov	r6, r2
 8006986:	4699      	mov	r9, r3
 8006988:	688a      	ldr	r2, [r1, #8]
 800698a:	690b      	ldr	r3, [r1, #16]
 800698c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006990:	4293      	cmp	r3, r2
 8006992:	bfb8      	it	lt
 8006994:	4613      	movlt	r3, r2
 8006996:	6033      	str	r3, [r6, #0]
 8006998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800699c:	4607      	mov	r7, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	b10a      	cbz	r2, 80069a6 <_printf_common+0x26>
 80069a2:	3301      	adds	r3, #1
 80069a4:	6033      	str	r3, [r6, #0]
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	0699      	lsls	r1, r3, #26
 80069aa:	bf42      	ittt	mi
 80069ac:	6833      	ldrmi	r3, [r6, #0]
 80069ae:	3302      	addmi	r3, #2
 80069b0:	6033      	strmi	r3, [r6, #0]
 80069b2:	6825      	ldr	r5, [r4, #0]
 80069b4:	f015 0506 	ands.w	r5, r5, #6
 80069b8:	d106      	bne.n	80069c8 <_printf_common+0x48>
 80069ba:	f104 0a19 	add.w	sl, r4, #25
 80069be:	68e3      	ldr	r3, [r4, #12]
 80069c0:	6832      	ldr	r2, [r6, #0]
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	42ab      	cmp	r3, r5
 80069c6:	dc26      	bgt.n	8006a16 <_printf_common+0x96>
 80069c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069cc:	1e13      	subs	r3, r2, #0
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	bf18      	it	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	0692      	lsls	r2, r2, #26
 80069d6:	d42b      	bmi.n	8006a30 <_printf_common+0xb0>
 80069d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069dc:	4649      	mov	r1, r9
 80069de:	4638      	mov	r0, r7
 80069e0:	47c0      	blx	r8
 80069e2:	3001      	adds	r0, #1
 80069e4:	d01e      	beq.n	8006a24 <_printf_common+0xa4>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	6922      	ldr	r2, [r4, #16]
 80069ea:	f003 0306 	and.w	r3, r3, #6
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	bf02      	ittt	eq
 80069f2:	68e5      	ldreq	r5, [r4, #12]
 80069f4:	6833      	ldreq	r3, [r6, #0]
 80069f6:	1aed      	subeq	r5, r5, r3
 80069f8:	68a3      	ldr	r3, [r4, #8]
 80069fa:	bf0c      	ite	eq
 80069fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a00:	2500      	movne	r5, #0
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bfc4      	itt	gt
 8006a06:	1a9b      	subgt	r3, r3, r2
 8006a08:	18ed      	addgt	r5, r5, r3
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	341a      	adds	r4, #26
 8006a0e:	42b5      	cmp	r5, r6
 8006a10:	d11a      	bne.n	8006a48 <_printf_common+0xc8>
 8006a12:	2000      	movs	r0, #0
 8006a14:	e008      	b.n	8006a28 <_printf_common+0xa8>
 8006a16:	2301      	movs	r3, #1
 8006a18:	4652      	mov	r2, sl
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	47c0      	blx	r8
 8006a20:	3001      	adds	r0, #1
 8006a22:	d103      	bne.n	8006a2c <_printf_common+0xac>
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	e7c6      	b.n	80069be <_printf_common+0x3e>
 8006a30:	18e1      	adds	r1, r4, r3
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	2030      	movs	r0, #48	; 0x30
 8006a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a3a:	4422      	add	r2, r4
 8006a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a44:	3302      	adds	r3, #2
 8006a46:	e7c7      	b.n	80069d8 <_printf_common+0x58>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4638      	mov	r0, r7
 8006a50:	47c0      	blx	r8
 8006a52:	3001      	adds	r0, #1
 8006a54:	d0e6      	beq.n	8006a24 <_printf_common+0xa4>
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7d9      	b.n	8006a0e <_printf_common+0x8e>
	...

08006a5c <_printf_i>:
 8006a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	7e0f      	ldrb	r7, [r1, #24]
 8006a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a64:	2f78      	cmp	r7, #120	; 0x78
 8006a66:	4691      	mov	r9, r2
 8006a68:	4680      	mov	r8, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	469a      	mov	sl, r3
 8006a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a72:	d807      	bhi.n	8006a84 <_printf_i+0x28>
 8006a74:	2f62      	cmp	r7, #98	; 0x62
 8006a76:	d80a      	bhi.n	8006a8e <_printf_i+0x32>
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	f000 80d4 	beq.w	8006c26 <_printf_i+0x1ca>
 8006a7e:	2f58      	cmp	r7, #88	; 0x58
 8006a80:	f000 80c0 	beq.w	8006c04 <_printf_i+0x1a8>
 8006a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a8c:	e03a      	b.n	8006b04 <_printf_i+0xa8>
 8006a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a92:	2b15      	cmp	r3, #21
 8006a94:	d8f6      	bhi.n	8006a84 <_printf_i+0x28>
 8006a96:	a101      	add	r1, pc, #4	; (adr r1, 8006a9c <_printf_i+0x40>)
 8006a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a9c:	08006af5 	.word	0x08006af5
 8006aa0:	08006b09 	.word	0x08006b09
 8006aa4:	08006a85 	.word	0x08006a85
 8006aa8:	08006a85 	.word	0x08006a85
 8006aac:	08006a85 	.word	0x08006a85
 8006ab0:	08006a85 	.word	0x08006a85
 8006ab4:	08006b09 	.word	0x08006b09
 8006ab8:	08006a85 	.word	0x08006a85
 8006abc:	08006a85 	.word	0x08006a85
 8006ac0:	08006a85 	.word	0x08006a85
 8006ac4:	08006a85 	.word	0x08006a85
 8006ac8:	08006c0d 	.word	0x08006c0d
 8006acc:	08006b35 	.word	0x08006b35
 8006ad0:	08006bc7 	.word	0x08006bc7
 8006ad4:	08006a85 	.word	0x08006a85
 8006ad8:	08006a85 	.word	0x08006a85
 8006adc:	08006c2f 	.word	0x08006c2f
 8006ae0:	08006a85 	.word	0x08006a85
 8006ae4:	08006b35 	.word	0x08006b35
 8006ae8:	08006a85 	.word	0x08006a85
 8006aec:	08006a85 	.word	0x08006a85
 8006af0:	08006bcf 	.word	0x08006bcf
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	1d1a      	adds	r2, r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	602a      	str	r2, [r5, #0]
 8006afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b04:	2301      	movs	r3, #1
 8006b06:	e09f      	b.n	8006c48 <_printf_i+0x1ec>
 8006b08:	6820      	ldr	r0, [r4, #0]
 8006b0a:	682b      	ldr	r3, [r5, #0]
 8006b0c:	0607      	lsls	r7, r0, #24
 8006b0e:	f103 0104 	add.w	r1, r3, #4
 8006b12:	6029      	str	r1, [r5, #0]
 8006b14:	d501      	bpl.n	8006b1a <_printf_i+0xbe>
 8006b16:	681e      	ldr	r6, [r3, #0]
 8006b18:	e003      	b.n	8006b22 <_printf_i+0xc6>
 8006b1a:	0646      	lsls	r6, r0, #25
 8006b1c:	d5fb      	bpl.n	8006b16 <_printf_i+0xba>
 8006b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	da03      	bge.n	8006b2e <_printf_i+0xd2>
 8006b26:	232d      	movs	r3, #45	; 0x2d
 8006b28:	4276      	negs	r6, r6
 8006b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2e:	485a      	ldr	r0, [pc, #360]	; (8006c98 <_printf_i+0x23c>)
 8006b30:	230a      	movs	r3, #10
 8006b32:	e012      	b.n	8006b5a <_printf_i+0xfe>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	1d19      	adds	r1, r3, #4
 8006b3a:	6029      	str	r1, [r5, #0]
 8006b3c:	0605      	lsls	r5, r0, #24
 8006b3e:	d501      	bpl.n	8006b44 <_printf_i+0xe8>
 8006b40:	681e      	ldr	r6, [r3, #0]
 8006b42:	e002      	b.n	8006b4a <_printf_i+0xee>
 8006b44:	0641      	lsls	r1, r0, #25
 8006b46:	d5fb      	bpl.n	8006b40 <_printf_i+0xe4>
 8006b48:	881e      	ldrh	r6, [r3, #0]
 8006b4a:	4853      	ldr	r0, [pc, #332]	; (8006c98 <_printf_i+0x23c>)
 8006b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b4e:	bf0c      	ite	eq
 8006b50:	2308      	moveq	r3, #8
 8006b52:	230a      	movne	r3, #10
 8006b54:	2100      	movs	r1, #0
 8006b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b5a:	6865      	ldr	r5, [r4, #4]
 8006b5c:	60a5      	str	r5, [r4, #8]
 8006b5e:	2d00      	cmp	r5, #0
 8006b60:	bfa2      	ittt	ge
 8006b62:	6821      	ldrge	r1, [r4, #0]
 8006b64:	f021 0104 	bicge.w	r1, r1, #4
 8006b68:	6021      	strge	r1, [r4, #0]
 8006b6a:	b90e      	cbnz	r6, 8006b70 <_printf_i+0x114>
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	d04b      	beq.n	8006c08 <_printf_i+0x1ac>
 8006b70:	4615      	mov	r5, r2
 8006b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b76:	fb03 6711 	mls	r7, r3, r1, r6
 8006b7a:	5dc7      	ldrb	r7, [r0, r7]
 8006b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b80:	4637      	mov	r7, r6
 8006b82:	42bb      	cmp	r3, r7
 8006b84:	460e      	mov	r6, r1
 8006b86:	d9f4      	bls.n	8006b72 <_printf_i+0x116>
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d10b      	bne.n	8006ba4 <_printf_i+0x148>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	07de      	lsls	r6, r3, #31
 8006b90:	d508      	bpl.n	8006ba4 <_printf_i+0x148>
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	6861      	ldr	r1, [r4, #4]
 8006b96:	4299      	cmp	r1, r3
 8006b98:	bfde      	ittt	le
 8006b9a:	2330      	movle	r3, #48	; 0x30
 8006b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ba4:	1b52      	subs	r2, r2, r5
 8006ba6:	6122      	str	r2, [r4, #16]
 8006ba8:	f8cd a000 	str.w	sl, [sp]
 8006bac:	464b      	mov	r3, r9
 8006bae:	aa03      	add	r2, sp, #12
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7ff fee4 	bl	8006980 <_printf_common>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d14a      	bne.n	8006c52 <_printf_i+0x1f6>
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc0:	b004      	add	sp, #16
 8006bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f043 0320 	orr.w	r3, r3, #32
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	4833      	ldr	r0, [pc, #204]	; (8006c9c <_printf_i+0x240>)
 8006bd0:	2778      	movs	r7, #120	; 0x78
 8006bd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	6829      	ldr	r1, [r5, #0]
 8006bda:	061f      	lsls	r7, r3, #24
 8006bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006be0:	d402      	bmi.n	8006be8 <_printf_i+0x18c>
 8006be2:	065f      	lsls	r7, r3, #25
 8006be4:	bf48      	it	mi
 8006be6:	b2b6      	uxthmi	r6, r6
 8006be8:	07df      	lsls	r7, r3, #31
 8006bea:	bf48      	it	mi
 8006bec:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf0:	6029      	str	r1, [r5, #0]
 8006bf2:	bf48      	it	mi
 8006bf4:	6023      	strmi	r3, [r4, #0]
 8006bf6:	b91e      	cbnz	r6, 8006c00 <_printf_i+0x1a4>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	f023 0320 	bic.w	r3, r3, #32
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	2310      	movs	r3, #16
 8006c02:	e7a7      	b.n	8006b54 <_printf_i+0xf8>
 8006c04:	4824      	ldr	r0, [pc, #144]	; (8006c98 <_printf_i+0x23c>)
 8006c06:	e7e4      	b.n	8006bd2 <_printf_i+0x176>
 8006c08:	4615      	mov	r5, r2
 8006c0a:	e7bd      	b.n	8006b88 <_printf_i+0x12c>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	6826      	ldr	r6, [r4, #0]
 8006c10:	6961      	ldr	r1, [r4, #20]
 8006c12:	1d18      	adds	r0, r3, #4
 8006c14:	6028      	str	r0, [r5, #0]
 8006c16:	0635      	lsls	r5, r6, #24
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	d501      	bpl.n	8006c20 <_printf_i+0x1c4>
 8006c1c:	6019      	str	r1, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <_printf_i+0x1ca>
 8006c20:	0670      	lsls	r0, r6, #25
 8006c22:	d5fb      	bpl.n	8006c1c <_printf_i+0x1c0>
 8006c24:	8019      	strh	r1, [r3, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	4615      	mov	r5, r2
 8006c2c:	e7bc      	b.n	8006ba8 <_printf_i+0x14c>
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	1d1a      	adds	r2, r3, #4
 8006c32:	602a      	str	r2, [r5, #0]
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	6862      	ldr	r2, [r4, #4]
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7f9 fad0 	bl	80001e0 <memchr>
 8006c40:	b108      	cbz	r0, 8006c46 <_printf_i+0x1ea>
 8006c42:	1b40      	subs	r0, r0, r5
 8006c44:	6060      	str	r0, [r4, #4]
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c50:	e7aa      	b.n	8006ba8 <_printf_i+0x14c>
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	462a      	mov	r2, r5
 8006c56:	4649      	mov	r1, r9
 8006c58:	4640      	mov	r0, r8
 8006c5a:	47d0      	blx	sl
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d0ad      	beq.n	8006bbc <_printf_i+0x160>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	079b      	lsls	r3, r3, #30
 8006c64:	d413      	bmi.n	8006c8e <_printf_i+0x232>
 8006c66:	68e0      	ldr	r0, [r4, #12]
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	4298      	cmp	r0, r3
 8006c6c:	bfb8      	it	lt
 8006c6e:	4618      	movlt	r0, r3
 8006c70:	e7a6      	b.n	8006bc0 <_printf_i+0x164>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4632      	mov	r2, r6
 8006c76:	4649      	mov	r1, r9
 8006c78:	4640      	mov	r0, r8
 8006c7a:	47d0      	blx	sl
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d09d      	beq.n	8006bbc <_printf_i+0x160>
 8006c80:	3501      	adds	r5, #1
 8006c82:	68e3      	ldr	r3, [r4, #12]
 8006c84:	9903      	ldr	r1, [sp, #12]
 8006c86:	1a5b      	subs	r3, r3, r1
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	dcf2      	bgt.n	8006c72 <_printf_i+0x216>
 8006c8c:	e7eb      	b.n	8006c66 <_printf_i+0x20a>
 8006c8e:	2500      	movs	r5, #0
 8006c90:	f104 0619 	add.w	r6, r4, #25
 8006c94:	e7f5      	b.n	8006c82 <_printf_i+0x226>
 8006c96:	bf00      	nop
 8006c98:	08007331 	.word	0x08007331
 8006c9c:	08007342 	.word	0x08007342

08006ca0 <__sflush_r>:
 8006ca0:	898a      	ldrh	r2, [r1, #12]
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	0710      	lsls	r0, r2, #28
 8006caa:	460c      	mov	r4, r1
 8006cac:	d458      	bmi.n	8006d60 <__sflush_r+0xc0>
 8006cae:	684b      	ldr	r3, [r1, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc05      	bgt.n	8006cc0 <__sflush_r+0x20>
 8006cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dc02      	bgt.n	8006cc0 <__sflush_r+0x20>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d0f9      	beq.n	8006cba <__sflush_r+0x1a>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ccc:	682f      	ldr	r7, [r5, #0]
 8006cce:	6a21      	ldr	r1, [r4, #32]
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	d032      	beq.n	8006d3a <__sflush_r+0x9a>
 8006cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	075a      	lsls	r2, r3, #29
 8006cda:	d505      	bpl.n	8006ce8 <__sflush_r+0x48>
 8006cdc:	6863      	ldr	r3, [r4, #4]
 8006cde:	1ac0      	subs	r0, r0, r3
 8006ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce2:	b10b      	cbz	r3, 8006ce8 <__sflush_r+0x48>
 8006ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce6:	1ac0      	subs	r0, r0, r3
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4602      	mov	r2, r0
 8006cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cee:	6a21      	ldr	r1, [r4, #32]
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b0      	blx	r6
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	d106      	bne.n	8006d08 <__sflush_r+0x68>
 8006cfa:	6829      	ldr	r1, [r5, #0]
 8006cfc:	291d      	cmp	r1, #29
 8006cfe:	d82b      	bhi.n	8006d58 <__sflush_r+0xb8>
 8006d00:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <__sflush_r+0x108>)
 8006d02:	410a      	asrs	r2, r1
 8006d04:	07d6      	lsls	r6, r2, #31
 8006d06:	d427      	bmi.n	8006d58 <__sflush_r+0xb8>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	6062      	str	r2, [r4, #4]
 8006d0c:	04d9      	lsls	r1, r3, #19
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	6022      	str	r2, [r4, #0]
 8006d12:	d504      	bpl.n	8006d1e <__sflush_r+0x7e>
 8006d14:	1c42      	adds	r2, r0, #1
 8006d16:	d101      	bne.n	8006d1c <__sflush_r+0x7c>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b903      	cbnz	r3, 8006d1e <__sflush_r+0x7e>
 8006d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8006d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d20:	602f      	str	r7, [r5, #0]
 8006d22:	2900      	cmp	r1, #0
 8006d24:	d0c9      	beq.n	8006cba <__sflush_r+0x1a>
 8006d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d002      	beq.n	8006d34 <__sflush_r+0x94>
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7ff fc96 	bl	8006660 <_free_r>
 8006d34:	2000      	movs	r0, #0
 8006d36:	6360      	str	r0, [r4, #52]	; 0x34
 8006d38:	e7c0      	b.n	8006cbc <__sflush_r+0x1c>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	1c41      	adds	r1, r0, #1
 8006d42:	d1c8      	bne.n	8006cd6 <__sflush_r+0x36>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c5      	beq.n	8006cd6 <__sflush_r+0x36>
 8006d4a:	2b1d      	cmp	r3, #29
 8006d4c:	d001      	beq.n	8006d52 <__sflush_r+0xb2>
 8006d4e:	2b16      	cmp	r3, #22
 8006d50:	d101      	bne.n	8006d56 <__sflush_r+0xb6>
 8006d52:	602f      	str	r7, [r5, #0]
 8006d54:	e7b1      	b.n	8006cba <__sflush_r+0x1a>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	e7ad      	b.n	8006cbc <__sflush_r+0x1c>
 8006d60:	690f      	ldr	r7, [r1, #16]
 8006d62:	2f00      	cmp	r7, #0
 8006d64:	d0a9      	beq.n	8006cba <__sflush_r+0x1a>
 8006d66:	0793      	lsls	r3, r2, #30
 8006d68:	680e      	ldr	r6, [r1, #0]
 8006d6a:	bf08      	it	eq
 8006d6c:	694b      	ldreq	r3, [r1, #20]
 8006d6e:	600f      	str	r7, [r1, #0]
 8006d70:	bf18      	it	ne
 8006d72:	2300      	movne	r3, #0
 8006d74:	eba6 0807 	sub.w	r8, r6, r7
 8006d78:	608b      	str	r3, [r1, #8]
 8006d7a:	f1b8 0f00 	cmp.w	r8, #0
 8006d7e:	dd9c      	ble.n	8006cba <__sflush_r+0x1a>
 8006d80:	6a21      	ldr	r1, [r4, #32]
 8006d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d84:	4643      	mov	r3, r8
 8006d86:	463a      	mov	r2, r7
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b0      	blx	r6
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	dc06      	bgt.n	8006d9e <__sflush_r+0xfe>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e78e      	b.n	8006cbc <__sflush_r+0x1c>
 8006d9e:	4407      	add	r7, r0
 8006da0:	eba8 0800 	sub.w	r8, r8, r0
 8006da4:	e7e9      	b.n	8006d7a <__sflush_r+0xda>
 8006da6:	bf00      	nop
 8006da8:	dfbffffe 	.word	0xdfbffffe

08006dac <_fflush_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b913      	cbnz	r3, 8006dbc <_fflush_r+0x10>
 8006db6:	2500      	movs	r5, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	b118      	cbz	r0, 8006dc6 <_fflush_r+0x1a>
 8006dbe:	6a03      	ldr	r3, [r0, #32]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <_fflush_r+0x1a>
 8006dc2:	f7ff fa8d 	bl	80062e0 <__sinit>
 8006dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f3      	beq.n	8006db6 <_fflush_r+0xa>
 8006dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dd0:	07d0      	lsls	r0, r2, #31
 8006dd2:	d404      	bmi.n	8006dde <_fflush_r+0x32>
 8006dd4:	0599      	lsls	r1, r3, #22
 8006dd6:	d402      	bmi.n	8006dde <_fflush_r+0x32>
 8006dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dda:	f7ff fc2a 	bl	8006632 <__retarget_lock_acquire_recursive>
 8006dde:	4628      	mov	r0, r5
 8006de0:	4621      	mov	r1, r4
 8006de2:	f7ff ff5d 	bl	8006ca0 <__sflush_r>
 8006de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006de8:	07da      	lsls	r2, r3, #31
 8006dea:	4605      	mov	r5, r0
 8006dec:	d4e4      	bmi.n	8006db8 <_fflush_r+0xc>
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	059b      	lsls	r3, r3, #22
 8006df2:	d4e1      	bmi.n	8006db8 <_fflush_r+0xc>
 8006df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df6:	f7ff fc1d 	bl	8006634 <__retarget_lock_release_recursive>
 8006dfa:	e7dd      	b.n	8006db8 <_fflush_r+0xc>

08006dfc <__swhatbuf_r>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	460c      	mov	r4, r1
 8006e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e04:	2900      	cmp	r1, #0
 8006e06:	b096      	sub	sp, #88	; 0x58
 8006e08:	4615      	mov	r5, r2
 8006e0a:	461e      	mov	r6, r3
 8006e0c:	da0d      	bge.n	8006e2a <__swhatbuf_r+0x2e>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e14:	f04f 0100 	mov.w	r1, #0
 8006e18:	bf0c      	ite	eq
 8006e1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e1e:	2340      	movne	r3, #64	; 0x40
 8006e20:	2000      	movs	r0, #0
 8006e22:	6031      	str	r1, [r6, #0]
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	b016      	add	sp, #88	; 0x58
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
 8006e2a:	466a      	mov	r2, sp
 8006e2c:	f000 f878 	bl	8006f20 <_fstat_r>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	dbec      	blt.n	8006e0e <__swhatbuf_r+0x12>
 8006e34:	9901      	ldr	r1, [sp, #4]
 8006e36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e3e:	4259      	negs	r1, r3
 8006e40:	4159      	adcs	r1, r3
 8006e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e46:	e7eb      	b.n	8006e20 <__swhatbuf_r+0x24>

08006e48 <__smakebuf_r>:
 8006e48:	898b      	ldrh	r3, [r1, #12]
 8006e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e4c:	079d      	lsls	r5, r3, #30
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	d507      	bpl.n	8006e64 <__smakebuf_r+0x1c>
 8006e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	6163      	str	r3, [r4, #20]
 8006e60:	b002      	add	sp, #8
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	ab01      	add	r3, sp, #4
 8006e66:	466a      	mov	r2, sp
 8006e68:	f7ff ffc8 	bl	8006dfc <__swhatbuf_r>
 8006e6c:	9900      	ldr	r1, [sp, #0]
 8006e6e:	4605      	mov	r5, r0
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff f91d 	bl	80060b0 <_malloc_r>
 8006e76:	b948      	cbnz	r0, 8006e8c <__smakebuf_r+0x44>
 8006e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7c:	059a      	lsls	r2, r3, #22
 8006e7e:	d4ef      	bmi.n	8006e60 <__smakebuf_r+0x18>
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	f043 0302 	orr.w	r3, r3, #2
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	e7e3      	b.n	8006e54 <__smakebuf_r+0xc>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	6020      	str	r0, [r4, #0]
 8006e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	6163      	str	r3, [r4, #20]
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	6120      	str	r0, [r4, #16]
 8006e9e:	b15b      	cbz	r3, 8006eb8 <__smakebuf_r+0x70>
 8006ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f000 f84d 	bl	8006f44 <_isatty_r>
 8006eaa:	b128      	cbz	r0, 8006eb8 <__smakebuf_r+0x70>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f023 0303 	bic.w	r3, r3, #3
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	431d      	orrs	r5, r3
 8006ebc:	81a5      	strh	r5, [r4, #12]
 8006ebe:	e7cf      	b.n	8006e60 <__smakebuf_r+0x18>

08006ec0 <_raise_r>:
 8006ec0:	291f      	cmp	r1, #31
 8006ec2:	b538      	push	{r3, r4, r5, lr}
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	d904      	bls.n	8006ed4 <_raise_r+0x14>
 8006eca:	2316      	movs	r3, #22
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ed6:	b112      	cbz	r2, 8006ede <_raise_r+0x1e>
 8006ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006edc:	b94b      	cbnz	r3, 8006ef2 <_raise_r+0x32>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 f852 	bl	8006f88 <_getpid_r>
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	4620      	mov	r0, r4
 8006eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eee:	f000 b839 	b.w	8006f64 <_kill_r>
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d00a      	beq.n	8006f0c <_raise_r+0x4c>
 8006ef6:	1c59      	adds	r1, r3, #1
 8006ef8:	d103      	bne.n	8006f02 <_raise_r+0x42>
 8006efa:	2316      	movs	r3, #22
 8006efc:	6003      	str	r3, [r0, #0]
 8006efe:	2001      	movs	r0, #1
 8006f00:	e7e7      	b.n	8006ed2 <_raise_r+0x12>
 8006f02:	2400      	movs	r4, #0
 8006f04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	4798      	blx	r3
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e7e0      	b.n	8006ed2 <_raise_r+0x12>

08006f10 <raise>:
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <raise+0xc>)
 8006f12:	4601      	mov	r1, r0
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	f7ff bfd3 	b.w	8006ec0 <_raise_r>
 8006f1a:	bf00      	nop
 8006f1c:	200000fc 	.word	0x200000fc

08006f20 <_fstat_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	; (8006f40 <_fstat_r+0x20>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	f7fb fe48 	bl	8002bc2 <_fstat>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d102      	bne.n	8006f3c <_fstat_r+0x1c>
 8006f36:	682b      	ldr	r3, [r5, #0]
 8006f38:	b103      	cbz	r3, 8006f3c <_fstat_r+0x1c>
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000504 	.word	0x20000504

08006f44 <_isatty_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_isatty_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fb fe47 	bl	8002be2 <_isatty>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_isatty_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_isatty_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20000504 	.word	0x20000504

08006f64 <_kill_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d07      	ldr	r5, [pc, #28]	; (8006f84 <_kill_r+0x20>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f7fb fdc7 	bl	8002b04 <_kill>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d102      	bne.n	8006f80 <_kill_r+0x1c>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b103      	cbz	r3, 8006f80 <_kill_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	20000504 	.word	0x20000504

08006f88 <_getpid_r>:
 8006f88:	f7fb bdb4 	b.w	8002af4 <_getpid>

08006f8c <_init>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr

08006f98 <_fini>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr
