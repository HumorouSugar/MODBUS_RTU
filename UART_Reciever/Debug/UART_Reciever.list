
UART_Reciever.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800745c  0800745c  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007464  08007464  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800746c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200000f0  0800755c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800755c  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d37  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a2  00000000  00000000  00032e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  00037368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae79  00000000  00000000  00038087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018be8  00000000  00000000  00052f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097653  00000000  00000000  0006bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e08  00000000  00000000  0010313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00107f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800705c 	.word	0x0800705c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0800705c 	.word	0x0800705c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f002 f91b 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f837 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f99b 	bl	8000ed0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 f945 	bl	8000e28 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b9e:	f000 f8f7 	bl	8000d90 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 f96b 	bl	8000e7c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ba6:	f000 f899 	bl	8000cdc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	MT_PORT_SetTimerModule(&htim3);
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <main+0x68>)
 8000bac:	f001 fd20 	bl	80025f0 <MT_PORT_SetTimerModule>
	MT_PORT_SetUartModule(&huart1);
 8000bb0:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <main+0x6c>)
 8000bb2:	f001 fd2d 	bl	8002610 <MT_PORT_SetUartModule>
	eMBErrorCode eStatus;
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 19200, MB_PAR_NONE);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210a      	movs	r1, #10
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fca0 	bl	8001508 <eMBInit>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	eStatus = eMBEnable();
 8000bcc:	f000 fd18 	bl	8001600 <eMBEnable>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
	{

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		eMBPoll();
 8000bd4:	f000 fd30 	bl	8001638 <eMBPoll>
//		usRegInputBuf[REG_INPUT_NREGS - 2] =  HAL_GetTick() / 1000;
//		usRegInputBuf[REG_INPUT_NREGS - 1] =  HAL_GetTick();
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <main+0x70>)
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <main+0x74>)
 8000bde:	f003 fb15 	bl	800420c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000be2:	2200      	movs	r2, #0
 8000be4:	4906      	ldr	r1, [pc, #24]	; (8000c00 <main+0x78>)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <main+0x74>)
 8000be8:	f003 fbf2 	bl	80043d0 <HAL_RTC_GetDate>
		eMBPoll();
 8000bec:	e7f2      	b.n	8000bd4 <main+0x4c>
 8000bee:	bf00      	nop
 8000bf0:	2000012c 	.word	0x2000012c
 8000bf4:	20000174 	.word	0x20000174
 8000bf8:	20000218 	.word	0x20000218
 8000bfc:	2000010c 	.word	0x2000010c
 8000c00:	2000022c 	.word	0x2000022c

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b094      	sub	sp, #80	; 0x50
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	2230      	movs	r2, #48	; 0x30
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 fcec 	bl	80065f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <SystemClock_Config+0xd0>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <SystemClock_Config+0xd0>)
 8000c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <SystemClock_Config+0xd0>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <SystemClock_Config+0xd4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <SystemClock_Config+0xd4>)
 8000c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <SystemClock_Config+0xd4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c64:	2305      	movs	r3, #5
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c7c:	2319      	movs	r3, #25
 8000c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c80:	23a8      	movs	r3, #168	; 0xa8
 8000c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 fc65 	bl	8003560 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c9c:	f000 fc2e 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fec7 	bl	8003a50 <HAL_RCC_ClockConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cc8:	f000 fc18 	bl	80014fc <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3750      	adds	r7, #80	; 0x50
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40007000 	.word	0x40007000

08000cdc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_RTC_Init+0xac>)
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <MX_RTC_Init+0xb0>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_RTC_Init+0xac>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d02:	227f      	movs	r2, #127	; 0x7f
 8000d04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d08:	22ff      	movs	r2, #255	; 0xff
 8000d0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d20:	f003 f964 	bl	8003fec <HAL_RTC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 fbe7 	bl	80014fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 8000d2e:	230e      	movs	r3, #14
 8000d30:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000d32:	2334      	movs	r3, #52	; 0x34
 8000d34:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	4619      	mov	r1, r3
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d4a:	f003 f9c5 	bl	80040d8 <HAL_RTC_SetTime>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d54:	f000 fbd2 	bl	80014fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 11;
 8000d60:	230b      	movs	r3, #11
 8000d62:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000d64:	2318      	movs	r3, #24
 8000d66:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_RTC_Init+0xac>)
 8000d70:	f003 faaa 	bl	80042c8 <HAL_RTC_SetDate>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d7a:	f000 fbbf 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000010c 	.word	0x2000010c
 8000d8c:	40002800 	.word	0x40002800

08000d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <MX_TIM3_Init+0x94>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000db4:	2253      	movs	r2, #83	; 0x53
 8000db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dc0:	2232      	movs	r2, #50	; 0x32
 8000dc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dd2:	f003 fc09 	bl	80045e8 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000ddc:	f000 fb8e 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000dee:	f003 fde4 	bl	80049ba <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000df8:	f000 fb80 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM3_Init+0x90>)
 8000e0a:	f003 ffdf 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000e14:	f000 fb72 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000012c 	.word	0x2000012c
 8000e24:	40000400 	.word	0x40000400

08000e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f004 f836 	bl	8004ed0 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 fb47 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000174 	.word	0x20000174
 8000e78:	40011000 	.word	0x40011000

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_USART2_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f004 f80c 	bl	8004ed0 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 fb1d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001b8 	.word	0x200001b8
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b48      	ldr	r3, [pc, #288]	; (800100c <MX_GPIO_Init+0x13c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a47      	ldr	r2, [pc, #284]	; (800100c <MX_GPIO_Init+0x13c>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <MX_GPIO_Init+0x13c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b41      	ldr	r3, [pc, #260]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a40      	ldr	r2, [pc, #256]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b3e      	ldr	r3, [pc, #248]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b37      	ldr	r3, [pc, #220]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a32      	ldr	r2, [pc, #200]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <MX_GPIO_Init+0x13c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	482c      	ldr	r0, [pc, #176]	; (8001010 <MX_GPIO_Init+0x140>)
 8000f5e:	f002 facd 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4825      	ldr	r0, [pc, #148]	; (8001010 <MX_GPIO_Init+0x140>)
 8000f7c:	f002 f93a 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f80:	23f0      	movs	r3, #240	; 0xf0
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f84:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <MX_GPIO_Init+0x144>)
 8000f96:	f002 f92d 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f9e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_GPIO_Init+0x148>)
 8000fb0:	f002 f920 	bl	80031f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2006      	movs	r0, #6
 8000fba:	f002 f852 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f002 f86b 	bl	800309a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2007      	movs	r0, #7
 8000fca:	f002 f84a 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fce:	2007      	movs	r0, #7
 8000fd0:	f002 f863 	bl	800309a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2008      	movs	r0, #8
 8000fda:	f002 f842 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fde:	2008      	movs	r0, #8
 8000fe0:	f002 f85b 	bl	800309a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f002 f83a 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f002 f853 	bl	800309a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2017      	movs	r0, #23
 8000ffa:	f002 f832 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ffe:	2017      	movs	r0, #23
 8001000:	f002 f84b 	bl	800309a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400

0800101c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	usRegDiscreteBuf[0] =(GPIOA->IDR & GPIO_IDR_ID7) |(GPIOA->IDR & GPIO_IDR_ID6)|(GPIOA->IDR & GPIO_IDR_ID5)|(GPIOA->IDR & GPIO_IDR_ID4)|(GPIOB->IDR & GPIO_IDR_ID2)|(GPIOB->IDR & GPIO_IDR_ID1)|(GPIOB->IDR & GPIO_IDR_ID0);
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001094:	701a      	strb	r2, [r3, #0]
	a = ((GPIOB->IDR & GPIO_IDR_ID0) | (GPIOB->IDR & GPIO_IDR_ID1) | (GPIOB->IDR & GPIO_IDR_ID2) | (GPIOA->IDR & GPIO_IDR_ID3)
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	431a      	orrs	r2, r3
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	431a      	orrs	r2, r3
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	431a      	orrs	r2, r3
| (GPIOA->IDR & GPIO_IDR_ID4) | (GPIOA->IDR & GPIO_IDR_ID5) | (GPIOA->IDR & GPIO_IDR_ID6) | (GPIOA->IDR & GPIO_IDR_ID7));
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	431a      	orrs	r2, r3
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	431a      	orrs	r2, r3
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d8:	431a      	orrs	r2, r3
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	4313      	orrs	r3, r2
 80010e4:	461a      	mov	r2, r3
	a = ((GPIOB->IDR & GPIO_IDR_ID0) | (GPIOB->IDR & GPIO_IDR_ID1) | (GPIOB->IDR & GPIO_IDR_ID2) | (GPIOA->IDR & GPIO_IDR_ID3)
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_GPIO_EXTI_Callback+0xe8>)
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	20000200 	.word	0x20000200
 8001104:	20000214 	.word	0x20000214

08001108 <eMBRegInputCB>:
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	803b      	strh	r3, [r7, #0]
	return MB_ENOREG;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <eMBRegHoldingCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
		eMBRegisterMode eMode)
{
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	817b      	strh	r3, [r7, #10]
 800113a:	460b      	mov	r3, r1
 800113c:	813b      	strh	r3, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
	eMBErrorCode eStatus = MB_ENOERR;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
	short iNRegs = ( short )usNRegs;
 8001146:	893b      	ldrh	r3, [r7, #8]
 8001148:	82bb      	strh	r3, [r7, #20]
	int iRegIndex = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]

	if(( usAddress >= REG_HOLDING_START ) &&( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ))
 800114e:	897b      	ldrh	r3, [r7, #10]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8103 	beq.w	800135c <eMBRegHoldingCB+0x234>
 8001156:	897a      	ldrh	r2, [r7, #10]
 8001158:	893b      	ldrh	r3, [r7, #8]
 800115a:	4413      	add	r3, r2
 800115c:	2b08      	cmp	r3, #8
 800115e:	f300 80fd 	bgt.w	800135c <eMBRegHoldingCB+0x234>
	{
		iRegIndex = (int)(usAddress - usRegHoldingStart);
 8001162:	897b      	ldrh	r3, [r7, #10]
 8001164:	4a86      	ldr	r2, [pc, #536]	; (8001380 <eMBRegHoldingCB+0x258>)
 8001166:	8812      	ldrh	r2, [r2, #0]
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	613b      	str	r3, [r7, #16]
		switch ( eMode )
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <eMBRegHoldingCB+0x52>
 8001172:	2b01      	cmp	r3, #1
 8001174:	f000 809e 	beq.w	80012b4 <eMBRegHoldingCB+0x18c>
 8001178:	e0f2      	b.n	8001360 <eMBRegHoldingCB+0x238>
		{
		case MB_REG_READ:
			usRegHoldingBuf[REG_HOLDING_NREGS - 7] = sDate.Year;
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <eMBRegHoldingCB+0x25c>)
 800117c:	78db      	ldrb	r3, [r3, #3]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001182:	801a      	strh	r2, [r3, #0]
			usRegHoldingBuf[REG_HOLDING_NREGS - 6] = sDate.Month;
 8001184:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <eMBRegHoldingCB+0x25c>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	b29a      	uxth	r2, r3
 800118a:	4b7f      	ldr	r3, [pc, #508]	; (8001388 <eMBRegHoldingCB+0x260>)
 800118c:	805a      	strh	r2, [r3, #2]
			usRegHoldingBuf[REG_HOLDING_NREGS - 5] = sDate.Date;
 800118e:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <eMBRegHoldingCB+0x25c>)
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001196:	809a      	strh	r2, [r3, #4]
			usRegHoldingBuf[REG_HOLDING_NREGS - 4] = sTime.Hours;
 8001198:	4b7c      	ldr	r3, [pc, #496]	; (800138c <eMBRegHoldingCB+0x264>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <eMBRegHoldingCB+0x260>)
 80011a0:	80da      	strh	r2, [r3, #6]
			usRegHoldingBuf[REG_HOLDING_NREGS - 3] = sTime.Minutes;
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <eMBRegHoldingCB+0x264>)
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b77      	ldr	r3, [pc, #476]	; (8001388 <eMBRegHoldingCB+0x260>)
 80011aa:	811a      	strh	r2, [r3, #8]
			usRegHoldingBuf[REG_HOLDING_NREGS - 2] = sTime.Seconds;
 80011ac:	4b77      	ldr	r3, [pc, #476]	; (800138c <eMBRegHoldingCB+0x264>)
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b75      	ldr	r3, [pc, #468]	; (8001388 <eMBRegHoldingCB+0x260>)
 80011b4:	815a      	strh	r2, [r3, #10]
			usRegHoldingBuf[REG_HOLDING_NREGS - 1] = ((sTime.Seconds)*1000) + (999 - ((sTime.SubSeconds)*3.91)+3);
 80011b6:	4b75      	ldr	r3, [pc, #468]	; (800138c <eMBRegHoldingCB+0x264>)
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	461a      	mov	r2, r3
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fad7 	bl	8000778 <__aeabi_i2d>
 80011ca:	4604      	mov	r4, r0
 80011cc:	460d      	mov	r5, r1
 80011ce:	4b6f      	ldr	r3, [pc, #444]	; (800138c <eMBRegHoldingCB+0x264>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fac0 	bl	8000758 <__aeabi_ui2d>
 80011d8:	a365      	add	r3, pc, #404	; (adr r3, 8001370 <eMBRegHoldingCB+0x248>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff f84f 	bl	8000280 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	a164      	add	r1, pc, #400	; (adr r1, 8001378 <eMBRegHoldingCB+0x250>)
 80011e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011ec:	f7ff f976 	bl	80004dc <__aeabi_dsub>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b64      	ldr	r3, [pc, #400]	; (8001390 <eMBRegHoldingCB+0x268>)
 80011fe:	f7ff f96f 	bl	80004e0 <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f969 	bl	80004e0 <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fb19 	bl	800084c <__aeabi_d2uiz>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001220:	819a      	strh	r2, [r3, #12]
			while(iNRegs > 0)
 8001222:	e01c      	b.n	800125e <eMBRegHoldingCB+0x136>
			{
				*pucRegBuffer++ = (usRegHoldingBuf[iRegIndex] >> 8);
 8001224:	4a58      	ldr	r2, [pc, #352]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	b299      	uxth	r1, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60fa      	str	r2, [r7, #12]
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ = (usRegHoldingBuf[iRegIndex] & 0xFF);
 800123a:	4a53      	ldr	r2, [pc, #332]	; (8001388 <eMBRegHoldingCB+0x260>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	60fa      	str	r2, [r7, #12]
 8001248:	b2ca      	uxtb	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]

				iRegIndex++;
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	3301      	adds	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
				iNRegs--;
 8001252:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001256:	b29b      	uxth	r3, r3
 8001258:	3b01      	subs	r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	82bb      	strh	r3, [r7, #20]
			while(iNRegs > 0)
 800125e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	dcde      	bgt.n	8001224 <eMBRegHoldingCB+0xfc>
			}
		case MB_REG_WRITE:
			while( iNRegs > 0 )
 8001266:	e025      	b.n	80012b4 <eMBRegHoldingCB+0x18c>
			{
				usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60fa      	str	r2, [r7, #12]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b299      	uxth	r1, r3
 8001276:	4a44      	ldr	r2, [pc, #272]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	60fa      	str	r2, [r7, #12]
 8001284:	7819      	ldrb	r1, [r3, #0]
 8001286:	4a40      	ldr	r2, [pc, #256]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800128e:	b28b      	uxth	r3, r1
 8001290:	4313      	orrs	r3, r2
 8001292:	b299      	uxth	r1, r3
 8001294:	4a3c      	ldr	r2, [pc, #240]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				iRegIndex++;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	3301      	adds	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
				iNRegs--;
 80012a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	82bb      	strh	r3, [r7, #20]
				rdy_set_time = 1;
 80012ae:	4b39      	ldr	r3, [pc, #228]	; (8001394 <eMBRegHoldingCB+0x26c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
			while( iNRegs > 0 )
 80012b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dcd5      	bgt.n	8001268 <eMBRegHoldingCB+0x140>
			}
			if(rdy_set_time == 1)
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <eMBRegHoldingCB+0x26c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d149      	bne.n	8001358 <eMBRegHoldingCB+0x230>
			{
				__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <eMBRegHoldingCB+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	22ca      	movs	r2, #202	; 0xca
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <eMBRegHoldingCB+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2253      	movs	r2, #83	; 0x53
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
				sTime.Hours = usRegHoldingBuf[REG_HOLDING_NREGS - 4];
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <eMBRegHoldingCB+0x260>)
 80012d6:	88db      	ldrh	r3, [r3, #6]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <eMBRegHoldingCB+0x264>)
 80012dc:	701a      	strb	r2, [r3, #0]
				sTime.Minutes = usRegHoldingBuf[REG_HOLDING_NREGS - 3];
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <eMBRegHoldingCB+0x260>)
 80012e0:	891b      	ldrh	r3, [r3, #8]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <eMBRegHoldingCB+0x264>)
 80012e6:	705a      	strb	r2, [r3, #1]
				sTime.Seconds = usRegHoldingBuf[REG_HOLDING_NREGS - 2];
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <eMBRegHoldingCB+0x260>)
 80012ea:	895b      	ldrh	r3, [r3, #10]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <eMBRegHoldingCB+0x264>)
 80012f0:	709a      	strb	r2, [r3, #2]
				sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <eMBRegHoldingCB+0x264>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
				sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <eMBRegHoldingCB+0x264>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
				if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012fe:	2200      	movs	r2, #0
 8001300:	4922      	ldr	r1, [pc, #136]	; (800138c <eMBRegHoldingCB+0x264>)
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <eMBRegHoldingCB+0x270>)
 8001304:	f002 fee8 	bl	80040d8 <HAL_RTC_SetTime>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <eMBRegHoldingCB+0x1ea>
				{
					Error_Handler();
 800130e:	f000 f8f5 	bl	80014fc <Error_Handler>
				}
				sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <eMBRegHoldingCB+0x25c>)
 8001314:	2204      	movs	r2, #4
 8001316:	701a      	strb	r2, [r3, #0]
				sDate.Date = usRegHoldingBuf[REG_HOLDING_NREGS - 5];
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <eMBRegHoldingCB+0x260>)
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <eMBRegHoldingCB+0x25c>)
 8001320:	709a      	strb	r2, [r3, #2]
				sDate.Month = usRegHoldingBuf[REG_HOLDING_NREGS - 6];
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <eMBRegHoldingCB+0x260>)
 8001324:	885b      	ldrh	r3, [r3, #2]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <eMBRegHoldingCB+0x25c>)
 800132a:	705a      	strb	r2, [r3, #1]
				sDate.Year = usRegHoldingBuf[REG_HOLDING_NREGS - 7];
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <eMBRegHoldingCB+0x260>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <eMBRegHoldingCB+0x25c>)
 8001334:	70da      	strb	r2, [r3, #3]

				if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001336:	2200      	movs	r2, #0
 8001338:	4912      	ldr	r1, [pc, #72]	; (8001384 <eMBRegHoldingCB+0x25c>)
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <eMBRegHoldingCB+0x270>)
 800133c:	f002 ffc4 	bl	80042c8 <HAL_RTC_SetDate>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <eMBRegHoldingCB+0x222>
				{
					Error_Handler();
 8001346:	f000 f8d9 	bl	80014fc <Error_Handler>
				}
				__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <eMBRegHoldingCB+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
				rdy_set_time = 0;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <eMBRegHoldingCB+0x26c>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001358:	bf00      	nop
		switch ( eMode )
 800135a:	e001      	b.n	8001360 <eMBRegHoldingCB+0x238>
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 800135c:	2301      	movs	r3, #1
 800135e:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 8001360:	7dfb      	ldrb	r3, [r7, #23]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	147ae148 	.word	0x147ae148
 8001374:	400f47ae 	.word	0x400f47ae
 8001378:	00000000 	.word	0x00000000
 800137c:	408f3800 	.word	0x408f3800
 8001380:	20000002 	.word	0x20000002
 8001384:	2000022c 	.word	0x2000022c
 8001388:	20000204 	.word	0x20000204
 800138c:	20000218 	.word	0x20000218
 8001390:	40080000 	.word	0x40080000
 8001394:	20000230 	.word	0x20000230
 8001398:	2000010c 	.word	0x2000010c

0800139c <eMBRegCoilsCB>:


/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
		eMBRegisterMode eMode)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	460b      	mov	r3, r1
 80013b0:	813b      	strh	r3, [r7, #8]
 80013b2:	4613      	mov	r3, r2
 80013b4:	71fb      	strb	r3, [r7, #7]

	eMBErrorCode    eStatus = MB_ENOERR;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
	short           iNCoils = ( short )usNCoils;
 80013ba:	893b      	ldrh	r3, [r7, #8]
 80013bc:	82bb      	strh	r3, [r7, #20]
	unsigned short  iRegIndex;

	if( ( usAddress >= REG_COILS_START ) &&( usAddress + usNCoils <= REG_COILS_START + REG_COILS_NREGS ) )
 80013be:	897b      	ldrh	r3, [r7, #10]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d94b      	bls.n	800145c <eMBRegCoilsCB+0xc0>
 80013c4:	897a      	ldrh	r2, [r7, #10]
 80013c6:	893b      	ldrh	r3, [r7, #8]
 80013c8:	4413      	add	r3, r2
 80013ca:	2b22      	cmp	r3, #34	; 0x22
 80013cc:	dc46      	bgt.n	800145c <eMBRegCoilsCB+0xc0>
	{
		iRegIndex = ( unsigned short )(usAddress - usRegCoilStart);
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <eMBRegCoilsCB+0xd0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	897a      	ldrh	r2, [r7, #10]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	827b      	strh	r3, [r7, #18]
		switch ( eMode )
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01b      	beq.n	8001418 <eMBRegCoilsCB+0x7c>
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d035      	beq.n	8001450 <eMBRegCoilsCB+0xb4>
 80013e4:	e03c      	b.n	8001460 <eMBRegCoilsCB+0xc4>
		{
		case MB_REG_READ:
			while( iNCoils > 0 )
			{
				*pucRegBuffer++ = xMBUtilGetBits(usRegCoilBuf,iRegIndex,(unsigned char)( iNCoils >8 ? 8 :iNCoils ) );
 80013e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	dc02      	bgt.n	80013f4 <eMBRegCoilsCB+0x58>
 80013ee:	8abb      	ldrh	r3, [r7, #20]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	e000      	b.n	80013f6 <eMBRegCoilsCB+0x5a>
 80013f4:	2308      	movs	r3, #8
 80013f6:	68fc      	ldr	r4, [r7, #12]
 80013f8:	1c62      	adds	r2, r4, #1
 80013fa:	60fa      	str	r2, [r7, #12]
 80013fc:	8a79      	ldrh	r1, [r7, #18]
 80013fe:	461a      	mov	r2, r3
 8001400:	481b      	ldr	r0, [pc, #108]	; (8001470 <eMBRegCoilsCB+0xd4>)
 8001402:	f001 f875 	bl	80024f0 <xMBUtilGetBits>
 8001406:	4603      	mov	r3, r0
 8001408:	7023      	strb	r3, [r4, #0]
				iNCoils -= 8;
 800140a:	8abb      	ldrh	r3, [r7, #20]
 800140c:	3b08      	subs	r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	82bb      	strh	r3, [r7, #20]
				iRegIndex += 8;
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	3308      	adds	r3, #8
 8001416:	827b      	strh	r3, [r7, #18]
			while( iNCoils > 0 )
 8001418:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	dce2      	bgt.n	80013e6 <eMBRegCoilsCB+0x4a>
			}
			break;
 8001420:	e01b      	b.n	800145a <eMBRegCoilsCB+0xbe>
		case MB_REG_WRITE:
			while( iNCoils > 0 )
			{
				 xMBUtilSetBits( usRegCoilBuf, iRegIndex,( unsigned char )( iNCoils > 8 ? 8 : iNCoils ),*pucRegBuffer++ );
 8001422:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001426:	2b08      	cmp	r3, #8
 8001428:	dc02      	bgt.n	8001430 <eMBRegCoilsCB+0x94>
 800142a:	8abb      	ldrh	r3, [r7, #20]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	e000      	b.n	8001432 <eMBRegCoilsCB+0x96>
 8001430:	2208      	movs	r2, #8
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1c59      	adds	r1, r3, #1
 8001436:	60f9      	str	r1, [r7, #12]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	8a79      	ldrh	r1, [r7, #18]
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <eMBRegCoilsCB+0xd4>)
 800143e:	f000 ffeb 	bl	8002418 <xMBUtilSetBits>
				 iRegIndex += 8;
 8001442:	8a7b      	ldrh	r3, [r7, #18]
 8001444:	3308      	adds	r3, #8
 8001446:	827b      	strh	r3, [r7, #18]
				 iNCoils -= 8;
 8001448:	8abb      	ldrh	r3, [r7, #20]
 800144a:	3b08      	subs	r3, #8
 800144c:	b29b      	uxth	r3, r3
 800144e:	82bb      	strh	r3, [r7, #20]
			while( iNCoils > 0 )
 8001450:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dce4      	bgt.n	8001422 <eMBRegCoilsCB+0x86>
			}
			break;
 8001458:	bf00      	nop
		switch ( eMode )
 800145a:	e001      	b.n	8001460 <eMBRegCoilsCB+0xc4>
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 800145c:	2301      	movs	r3, #1
 800145e:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 8001460:	7dfb      	ldrb	r3, [r7, #23]
}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000
 8001470:	200001fc 	.word	0x200001fc

08001474 <eMBRegDiscreteCB>:



/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegDiscreteCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	803b      	strh	r3, [r7, #0]
	eMBErrorCode    eStatus = MB_ENOERR;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
	short           iNCoils = ( short )usNDiscrete;
 8001488:	883b      	ldrh	r3, [r7, #0]
 800148a:	81bb      	strh	r3, [r7, #12]
	unsigned short  iRegIndex;

	if( ( usAddress >= REG_DISCRETE_START ) &&( usAddress + usNDiscrete <= REG_DISCRETE_START + REG_DISCRETE_NREGS ) )
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d929      	bls.n	80014e6 <eMBRegDiscreteCB+0x72>
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	883b      	ldrh	r3, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	2b22      	cmp	r3, #34	; 0x22
 800149a:	dc24      	bgt.n	80014e6 <eMBRegDiscreteCB+0x72>
	{
		iRegIndex = ( unsigned short )(usAddress - usRegDiscreteStart);
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <eMBRegDiscreteCB+0x80>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	817b      	strh	r3, [r7, #10]
		while( iNCoils > 0 )
 80014a8:	e018      	b.n	80014dc <eMBRegDiscreteCB+0x68>
		{
			*pucRegBuffer++ = xMBUtilGetBits( usRegDiscreteBuf, iRegIndex,( unsigned char )( iNCoils >8 ? 8 :iNCoils ) );
 80014aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	dc02      	bgt.n	80014b8 <eMBRegDiscreteCB+0x44>
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e000      	b.n	80014ba <eMBRegDiscreteCB+0x46>
 80014b8:	2308      	movs	r3, #8
 80014ba:	687c      	ldr	r4, [r7, #4]
 80014bc:	1c62      	adds	r2, r4, #1
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	8979      	ldrh	r1, [r7, #10]
 80014c2:	461a      	mov	r2, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <eMBRegDiscreteCB+0x84>)
 80014c6:	f001 f813 	bl	80024f0 <xMBUtilGetBits>
 80014ca:	4603      	mov	r3, r0
 80014cc:	7023      	strb	r3, [r4, #0]
			iNCoils -= 8;
 80014ce:	89bb      	ldrh	r3, [r7, #12]
 80014d0:	3b08      	subs	r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	81bb      	strh	r3, [r7, #12]
			iRegIndex += 8;
 80014d6:	897b      	ldrh	r3, [r7, #10]
 80014d8:	3308      	adds	r3, #8
 80014da:	817b      	strh	r3, [r7, #10]
		while( iNCoils > 0 )
 80014dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dce2      	bgt.n	80014aa <eMBRegDiscreteCB+0x36>
	if( ( usAddress >= REG_DISCRETE_START ) &&( usAddress + usNDiscrete <= REG_DISCRETE_START + REG_DISCRETE_NREGS ) )
 80014e4:	e001      	b.n	80014ea <eMBRegDiscreteCB+0x76>
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
	}
	return eStatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	20000001 	.word	0x20000001
 80014f8:	20000200 	.word	0x20000200

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	460b      	mov	r3, r1
 8001516:	71bb      	strb	r3, [r7, #6]
 8001518:	4613      	mov	r3, r2
 800151a:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <eMBInit+0x2a>
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	2bf7      	cmp	r3, #247	; 0xf7
 8001530:	d902      	bls.n	8001538 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8001532:	2302      	movs	r3, #2
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e03a      	b.n	80015ae <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <eMBInit+0xb0>)
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d121      	bne.n	8001588 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <eMBInit+0xb4>)
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <eMBInit+0xb8>)
 8001548:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <eMBInit+0xbc>)
 800154c:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <eMBInit+0xc0>)
 800154e:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <eMBInit+0xc4>)
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <eMBInit+0xc8>)
 8001554:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <eMBInit+0xcc>)
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <eMBInit+0xd0>)
 800155a:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <eMBInit+0xd4>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <eMBInit+0xd8>)
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <eMBInit+0xdc>)
 8001566:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <eMBInit+0xe0>)
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <eMBInit+0xe4>)
 800156c:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <eMBInit+0xe8>)
 8001570:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <eMBInit+0xec>)
 8001572:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <eMBInit+0xb0>)
 8001576:	7818      	ldrb	r0, [r3, #0]
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	7979      	ldrb	r1, [r7, #5]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	f000 fd39 	bl	8001ff4 <eMBRTUInit>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
            break;
 8001586:	e001      	b.n	800158c <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8001588:	2302      	movs	r3, #2
 800158a:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10d      	bne.n	80015ae <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8001592:	f001 f84d 	bl	8002630 <xMBPortEventInit>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 800159c:	2303      	movs	r3, #3
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e005      	b.n	80015ae <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <eMBInit+0xf0>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <eMBInit+0xf4>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000231 	.word	0x20000231
 80015bc:	20000238 	.word	0x20000238
 80015c0:	0800206d 	.word	0x0800206d
 80015c4:	2000023c 	.word	0x2000023c
 80015c8:	08002095 	.word	0x08002095
 80015cc:	20000234 	.word	0x20000234
 80015d0:	08002145 	.word	0x08002145
 80015d4:	20000240 	.word	0x20000240
 80015d8:	080020b1 	.word	0x080020b1
 80015dc:	20000244 	.word	0x20000244
 80015e0:	20000248 	.word	0x20000248
 80015e4:	0800220d 	.word	0x0800220d
 80015e8:	2000024c 	.word	0x2000024c
 80015ec:	080022dd 	.word	0x080022dd
 80015f0:	20000250 	.word	0x20000250
 80015f4:	0800238d 	.word	0x0800238d
 80015f8:	20000232 	.word	0x20000232
 80015fc:	20000004 	.word	0x20000004

08001600 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8001606:	2300      	movs	r3, #0
 8001608:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <eMBEnable+0x30>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d106      	bne.n	8001620 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <eMBEnable+0x34>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <eMBEnable+0x30>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e001      	b.n	8001624 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8001620:	2306      	movs	r3, #6
 8001622:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8001624:	79fb      	ldrb	r3, [r7, #7]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000004 	.word	0x20000004
 8001634:	20000238 	.word	0x20000238

08001638 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800163e:	2300      	movs	r3, #0
 8001640:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001642:	4b50      	ldr	r3, [pc, #320]	; (8001784 <eMBPoll+0x14c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800164a:	2306      	movs	r3, #6
 800164c:	e095      	b.n	800177a <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800164e:	1cbb      	adds	r3, r7, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f001 f811 	bl	8002678 <xMBPortEventGet>
 8001656:	4603      	mov	r3, r0
 8001658:	2b01      	cmp	r3, #1
 800165a:	f040 808d 	bne.w	8001778 <eMBPoll+0x140>
    {
        switch ( eEvent )
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	2b03      	cmp	r3, #3
 8001662:	f200 8089 	bhi.w	8001778 <eMBPoll+0x140>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <eMBPoll+0x34>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001779 	.word	0x08001779
 8001670:	0800167d 	.word	0x0800167d
 8001674:	080016af 	.word	0x080016af
 8001678:	08001779 	.word	0x08001779
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <eMBPoll+0x150>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a42      	ldr	r2, [pc, #264]	; (800178c <eMBPoll+0x154>)
 8001682:	4943      	ldr	r1, [pc, #268]	; (8001790 <eMBPoll+0x158>)
 8001684:	4843      	ldr	r0, [pc, #268]	; (8001794 <eMBPoll+0x15c>)
 8001686:	4798      	blx	r3
 8001688:	4603      	mov	r3, r0
 800168a:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d16f      	bne.n	8001772 <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <eMBPoll+0x15c>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b40      	ldr	r3, [pc, #256]	; (8001798 <eMBPoll+0x160>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d003      	beq.n	80016a6 <eMBPoll+0x6e>
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <eMBPoll+0x15c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d165      	bne.n	8001772 <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80016a6:	2002      	movs	r0, #2
 80016a8:	f000 ffd0 	bl	800264c <xMBPortEventPost>
                }
            }
            break;
 80016ac:	e061      	b.n	8001772 <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <eMBPoll+0x158>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <eMBPoll+0x164>)
 80016b6:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <eMBPoll+0x168>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e01f      	b.n	8001704 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80016c4:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <eMBPoll+0x16c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01d      	beq.n	800170c <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80016d0:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <eMBPoll+0x16c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <eMBPoll+0x164>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d10e      	bne.n	80016fe <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80016e0:	4a30      	ldr	r2, [pc, #192]	; (80017a4 <eMBPoll+0x16c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a29      	ldr	r2, [pc, #164]	; (8001790 <eMBPoll+0x158>)
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <eMBPoll+0x154>)
 80016f0:	4610      	mov	r0, r2
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <eMBPoll+0x168>)
 80016fa:	701a      	strb	r2, [r3, #0]
                    break;
 80016fc:	e007      	b.n	800170e <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3301      	adds	r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	dddc      	ble.n	80016c4 <eMBPoll+0x8c>
 800170a:	e000      	b.n	800170e <eMBPoll+0xd6>
                    break;
 800170c:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <eMBPoll+0x15c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02f      	beq.n	8001776 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <eMBPoll+0x168>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01d      	beq.n	800175a <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <eMBPoll+0x154>)
 8001720:	2200      	movs	r2, #0
 8001722:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <eMBPoll+0x164>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <eMBPoll+0x158>)
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <eMBPoll+0x154>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	1c58      	adds	r0, r3, #1
 8001732:	b284      	uxth	r4, r0
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <eMBPoll+0x154>)
 8001736:	8004      	strh	r4, [r0, #0]
 8001738:	440b      	add	r3, r1
 800173a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <eMBPoll+0x158>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <eMBPoll+0x154>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	b288      	uxth	r0, r1
 800174e:	490f      	ldr	r1, [pc, #60]	; (800178c <eMBPoll+0x154>)
 8001750:	8008      	strh	r0, [r1, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <eMBPoll+0x168>)
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <eMBPoll+0x170>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <eMBPoll+0x160>)
 8001760:	7810      	ldrb	r0, [r2, #0]
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <eMBPoll+0x158>)
 8001764:	6811      	ldr	r1, [r2, #0]
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <eMBPoll+0x154>)
 8001768:	8812      	ldrh	r2, [r2, #0]
 800176a:	4798      	blx	r3
 800176c:	4603      	mov	r3, r0
 800176e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8001770:	e001      	b.n	8001776 <eMBPoll+0x13e>
            break;
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <eMBPoll+0x140>
            break;
 8001776:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}
 8001782:	bf00      	nop
 8001784:	20000004 	.word	0x20000004
 8001788:	20000240 	.word	0x20000240
 800178c:	2000025c 	.word	0x2000025c
 8001790:	20000258 	.word	0x20000258
 8001794:	20000254 	.word	0x20000254
 8001798:	20000231 	.word	0x20000231
 800179c:	2000025e 	.word	0x2000025e
 80017a0:	2000025f 	.word	0x2000025f
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000234 	.word	0x20000234

080017ac <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 80017b8:	23ff      	movs	r3, #255	; 0xff
 80017ba:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 80017bc:	23ff      	movs	r3, #255	; 0xff
 80017be:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 80017c0:	e013      	b.n	80017ea <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	4053      	eors	r3, r2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <usMBCRC16+0x64>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4413      	add	r3, r2
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	4053      	eors	r3, r2
 80017de:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <usMBCRC16+0x68>)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	807a      	strh	r2, [r7, #2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e6      	bne.n	80017c2 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	7bbb      	ldrb	r3, [r7, #14]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21b      	sxth	r3, r3
 8001802:	b29b      	uxth	r3, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	08007174 	.word	0x08007174
 8001814:	08007274 	.word	0x08007274

08001818 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001822:	2300      	movs	r3, #0
 8001824:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d16c      	bne.n	8001908 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3301      	adds	r3, #1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3302      	adds	r3, #2
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b29a      	uxth	r2, r3
 8001842:	8abb      	ldrh	r3, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001848:	8abb      	ldrh	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3303      	adds	r3, #3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3304      	adds	r3, #4
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	8a7b      	ldrh	r3, [r7, #18]
 8001864:	4313      	orrs	r3, r2
 8001866:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d049      	beq.n	8001902 <eMBFuncReadCoils+0xea>
 800186e:	8a7b      	ldrh	r3, [r7, #18]
 8001870:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001874:	d245      	bcs.n	8001902 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60fa      	str	r2, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8001896:	8a7b      	ldrh	r3, [r7, #18]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80018a0:	8a7b      	ldrh	r3, [r7, #18]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	75fb      	strb	r3, [r7, #23]
 80018ac:	e003      	b.n	80018b6 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80018ae:	8a7b      	ldrh	r3, [r7, #18]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	60fa      	str	r2, [r7, #12]
 80018bc:	7dfa      	ldrb	r2, [r7, #23]
 80018be:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80018cc:	8a7a      	ldrh	r2, [r7, #18]
 80018ce:	8ab9      	ldrh	r1, [r7, #20]
 80018d0:	2300      	movs	r3, #0
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff fd62 	bl	800139c <eMBRegCoilsCB>
 80018d8:	4603      	mov	r3, r0
 80018da:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fe3d 	bl	8002564 <prveMBError2Exception>
 80018ea:	4603      	mov	r3, r0
 80018ec:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80018ee:	e00d      	b.n	800190c <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001900:	e004      	b.n	800190c <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001902:	2303      	movs	r3, #3
 8001904:	75bb      	strb	r3, [r7, #22]
 8001906:	e001      	b.n	800190c <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001908:	2303      	movs	r3, #3
 800190a:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800190c:	7dbb      	ldrb	r3, [r7, #22]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d140      	bne.n	80019ae <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3302      	adds	r3, #2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	89bb      	ldrh	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001946:	89bb      	ldrh	r3, [r7, #12]
 8001948:	3301      	adds	r3, #1
 800194a:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d128      	bne.n	80019a8 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3303      	adds	r3, #3
 800195a:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800195c:	2bff      	cmp	r3, #255	; 0xff
 800195e:	d004      	beq.n	800196a <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3303      	adds	r3, #3
 8001964:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11e      	bne.n	80019a8 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3303      	adds	r3, #3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2bff      	cmp	r3, #255	; 0xff
 8001976:	d102      	bne.n	800197e <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8001978:	2301      	movs	r3, #1
 800197a:	723b      	strb	r3, [r7, #8]
 800197c:	e001      	b.n	8001982 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8001982:	89b9      	ldrh	r1, [r7, #12]
 8001984:	f107 0008 	add.w	r0, r7, #8
 8001988:	2301      	movs	r3, #1
 800198a:	2201      	movs	r2, #1
 800198c:	f7ff fd06 	bl	800139c <eMBRegCoilsCB>
 8001990:	4603      	mov	r3, r0
 8001992:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fde1 	bl	8002564 <prveMBError2Exception>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80019a6:	e004      	b.n	80019b2 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80019a8:	2303      	movs	r3, #3
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e001      	b.n	80019b2 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80019ae:	2303      	movs	r3, #3
 80019b0:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d954      	bls.n	8001a7c <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3301      	adds	r3, #1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3302      	adds	r3, #2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	89bb      	ldrh	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3303      	adds	r3, #3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3304      	adds	r3, #4
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	795b      	ldrb	r3, [r3, #5]
 8001a10:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8001a1c:	897b      	ldrh	r3, [r7, #10]
 8001a1e:	08db      	lsrs	r3, r3, #3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e003      	b.n	8001a32 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01e      	beq.n	8001a76 <eMBFuncWriteMultipleCoils+0xba>
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8001a3e:	d81a      	bhi.n	8001a76 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	7a7b      	ldrb	r3, [r7, #9]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d116      	bne.n	8001a76 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1d98      	adds	r0, r3, #6
 8001a4c:	897a      	ldrh	r2, [r7, #10]
 8001a4e:	89b9      	ldrh	r1, [r7, #12]
 8001a50:	2301      	movs	r3, #1
 8001a52:	f7ff fca3 	bl	800139c <eMBRegCoilsCB>
 8001a56:	4603      	mov	r3, r0
 8001a58:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001a5a:	7a3b      	ldrb	r3, [r7, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001a60:	7a3b      	ldrb	r3, [r7, #8]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fd7e 	bl	8002564 <prveMBError2Exception>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8001a6c:	e008      	b.n	8001a80 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2205      	movs	r2, #5
 8001a72:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001a74:	e004      	b.n	8001a80 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001a76:	2303      	movs	r3, #3
 8001a78:	73bb      	strb	r3, [r7, #14]
 8001a7a:	e001      	b.n	8001a80 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d16c      	bne.n	8001b7a <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	8abb      	ldrh	r3, [r7, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001aba:	8abb      	ldrh	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	8a7b      	ldrh	r3, [r7, #18]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8001ada:	8a7b      	ldrh	r3, [r7, #18]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d049      	beq.n	8001b74 <eMBFuncReadDiscreteInputs+0xea>
 8001ae0:	8a7b      	ldrh	r3, [r7, #18]
 8001ae2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ae6:	d245      	bcs.n	8001b74 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	60fa      	str	r2, [r7, #12]
 8001af8:	2202      	movs	r2, #2
 8001afa:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8001b08:	8a7b      	ldrh	r3, [r7, #18]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8001b12:	8a7b      	ldrh	r3, [r7, #18]
 8001b14:	08db      	lsrs	r3, r3, #3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
 8001b1e:	e003      	b.n	8001b28 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8001b20:	8a7b      	ldrh	r3, [r7, #18]
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60fa      	str	r2, [r7, #12]
 8001b2e:	7dfa      	ldrb	r2, [r7, #23]
 8001b30:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8001b3e:	8a7a      	ldrh	r2, [r7, #18]
 8001b40:	8abb      	ldrh	r3, [r7, #20]
 8001b42:	4619      	mov	r1, r3
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fc95 	bl	8001474 <eMBRegDiscreteCB>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001b54:	7afb      	ldrb	r3, [r7, #11]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fd04 	bl	8002564 <prveMBError2Exception>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8001b60:	e00d      	b.n	8001b7e <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001b72:	e004      	b.n	8001b7e <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001b74:	2303      	movs	r3, #3
 8001b76:	75bb      	strb	r3, [r7, #22]
 8001b78:	e001      	b.n	8001b7e <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d122      	bne.n	8001be4 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3302      	adds	r3, #2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	89bb      	ldrh	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001bb8:	89bb      	ldrh	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	1cd8      	adds	r0, r3, #3
 8001bc2:	89b9      	ldrh	r1, [r7, #12]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f7ff faae 	bl	8001128 <eMBRegHoldingCB>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fcc3 	bl	8002564 <prveMBError2Exception>
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e001      	b.n	8001be8 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001be4:	2303      	movs	r3, #3
 8001be6:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d946      	bls.n	8001c96 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3302      	adds	r3, #2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	89bb      	ldrh	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001c22:	89bb      	ldrh	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3303      	adds	r3, #3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	897b      	ldrh	r3, [r7, #10]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8001c48:	897b      	ldrh	r3, [r7, #10]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d020      	beq.n	8001c90 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8001c4e:	897b      	ldrh	r3, [r7, #10]
 8001c50:	2b78      	cmp	r3, #120	; 0x78
 8001c52:	d81d      	bhi.n	8001c90 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8001c54:	897b      	ldrh	r3, [r7, #10]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8001c5c:	7a7a      	ldrb	r2, [r7, #9]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d116      	bne.n	8001c90 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	1d98      	adds	r0, r3, #6
 8001c66:	897a      	ldrh	r2, [r7, #10]
 8001c68:	89b9      	ldrh	r1, [r7, #12]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f7ff fa5c 	bl	8001128 <eMBRegHoldingCB>
 8001c70:	4603      	mov	r3, r0
 8001c72:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001c74:	7a3b      	ldrb	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001c7a:	7a3b      	ldrb	r3, [r7, #8]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fc71 	bl	8002564 <prveMBError2Exception>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8001c86:	e008      	b.n	8001c9a <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001c8e:	e004      	b.n	8001c9a <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001c90:	2303      	movs	r3, #3
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e001      	b.n	8001c9a <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001c96:	2303      	movs	r3, #3
 8001c98:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d15c      	bne.n	8001d74 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3302      	adds	r3, #2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	8abb      	ldrh	r3, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001cd4:	8abb      	ldrh	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001cee:	8a7b      	ldrh	r3, [r7, #18]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03c      	beq.n	8001d6e <eMBFuncReadHoldingRegister+0xca>
 8001cf4:	8a7b      	ldrh	r3, [r7, #18]
 8001cf6:	2b7d      	cmp	r3, #125	; 0x7d
 8001cf8:	d839      	bhi.n	8001d6e <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60fa      	str	r2, [r7, #12]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8001d1a:	8a7b      	ldrh	r3, [r7, #18]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	60f9      	str	r1, [r7, #12]
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8001d36:	8a7a      	ldrh	r2, [r7, #18]
 8001d38:	8ab9      	ldrh	r1, [r7, #20]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff f9f3 	bl	8001128 <eMBRegHoldingCB>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fc08 	bl	8002564 <prveMBError2Exception>
 8001d54:	4603      	mov	r3, r0
 8001d56:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8001d58:	e00e      	b.n	8001d78 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	881a      	ldrh	r2, [r3, #0]
 8001d5e:	8a7b      	ldrh	r3, [r7, #18]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001d6c:	e004      	b.n	8001d78 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	75fb      	strb	r3, [r7, #23]
 8001d72:	e001      	b.n	8001d78 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d74:	2303      	movs	r3, #3
 8001d76:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	f240 8099 	bls.w	8001ecc <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3302      	adds	r3, #2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	8abb      	ldrh	r3, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8001db4:	8abb      	ldrh	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	8a7b      	ldrh	r3, [r7, #18]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3305      	adds	r3, #5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3306      	adds	r3, #6
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	8a3b      	ldrh	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8001dee:	8a3b      	ldrh	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3307      	adds	r3, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3308      	adds	r3, #8
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7a5b      	ldrb	r3, [r3, #9]
 8001e12:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d056      	beq.n	8001ec8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8001e1a:	8a7b      	ldrh	r3, [r7, #18]
 8001e1c:	2b7d      	cmp	r3, #125	; 0x7d
 8001e1e:	d853      	bhi.n	8001ec8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d050      	beq.n	8001ec8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	2b79      	cmp	r3, #121	; 0x79
 8001e2a:	d84d      	bhi.n	8001ec8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	005a      	lsls	r2, r3, #1
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d148      	bne.n	8001ec8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f103 000a 	add.w	r0, r3, #10
 8001e3c:	89fa      	ldrh	r2, [r7, #14]
 8001e3e:	8a39      	ldrh	r1, [r7, #16]
 8001e40:	2301      	movs	r3, #1
 8001e42:	f7ff f971 	bl	8001128 <eMBRegHoldingCB>
 8001e46:	4603      	mov	r3, r0
 8001e48:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8001e4a:	7dbb      	ldrb	r3, [r7, #22]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d131      	bne.n	8001eb4 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	60ba      	str	r2, [r7, #8]
 8001e60:	2217      	movs	r2, #23
 8001e62:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8001e70:	8a7b      	ldrh	r3, [r7, #18]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8001e8c:	8a7a      	ldrh	r2, [r7, #18]
 8001e8e:	8ab9      	ldrh	r1, [r7, #20]
 8001e90:	2300      	movs	r3, #0
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f7ff f948 	bl	8001128 <eMBRegHoldingCB>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8001e9c:	7dbb      	ldrb	r3, [r7, #22]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	8a7b      	ldrh	r3, [r7, #18]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8001eb4:	7dbb      	ldrb	r3, [r7, #22]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001eba:	7dbb      	ldrb	r3, [r7, #22]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fb51 	bl	8002564 <prveMBError2Exception>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8001ec6:	e001      	b.n	8001ecc <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d15f      	bne.n	8001fac <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3302      	adds	r3, #2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	8abb      	ldrh	r3, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001f06:	8abb      	ldrh	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3303      	adds	r3, #3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	8a7b      	ldrh	r3, [r7, #18]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8001f26:	8a7b      	ldrh	r3, [r7, #18]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03c      	beq.n	8001fa6 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001f2c:	8a7b      	ldrh	r3, [r7, #18]
 8001f2e:	2b7c      	cmp	r3, #124	; 0x7c
 8001f30:	d839      	bhi.n	8001fa6 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60fa      	str	r2, [r7, #12]
 8001f42:	2204      	movs	r2, #4
 8001f44:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8001f52:	8a7b      	ldrh	r3, [r7, #18]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	60f9      	str	r1, [r7, #12]
 8001f5c:	0052      	lsls	r2, r2, #1
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8001f6e:	8a7a      	ldrh	r2, [r7, #18]
 8001f70:	8abb      	ldrh	r3, [r7, #20]
 8001f72:	4619      	mov	r1, r3
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff f8c7 	bl	8001108 <eMBRegInputCB>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 faec 	bl	8002564 <prveMBError2Exception>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8001f90:	e00e      	b.n	8001fb0 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	8a7b      	ldrh	r3, [r7, #18]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001fa4:	e004      	b.n	8001fb0 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	75fb      	strb	r3, [r7, #23]
 8001faa:	e001      	b.n	8001fb0 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001fac:	2303      	movs	r3, #3
 8001fae:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <eMBFuncReportSlaveID+0x30>)
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <eMBFuncReportSlaveID+0x34>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fb98 	bl	8006706 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <eMBFuncReportSlaveID+0x30>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000280 	.word	0x20000280
 8001ff0:	20000260 	.word	0x20000260

08001ff4 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	603a      	str	r2, [r7, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
 8002002:	460b      	mov	r3, r1
 8002004:	71bb      	strb	r3, [r7, #6]
 8002006:	4613      	mov	r3, r2
 8002008:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800200e:	f000 facb 	bl	80025a8 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8002012:	797b      	ldrb	r3, [r7, #5]
 8002014:	79b8      	ldrb	r0, [r7, #6]
 8002016:	2208      	movs	r2, #8
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	f000 fb7d 	bl	8002718 <xMBPortSerialInit>
 800201e:	4603      	mov	r3, r0
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8002024:	2303      	movs	r3, #3
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e016      	b.n	8002058 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8002030:	d902      	bls.n	8002038 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8002032:	2323      	movs	r3, #35	; 0x23
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	e005      	b.n	8002044 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <eMBRTUInit+0x74>)
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	b29b      	uxth	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fbe5 	bl	8002818 <xMBPortTimersInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8002054:	2303      	movs	r3, #3
 8002056:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8002058:	f000 fab6 	bl	80025c8 <ExitCriticalSection>

    return eStatus;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	00177fa0 	.word	0x00177fa0

0800206c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002070:	f000 fa9a 	bl	80025a8 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <eMBRTUStart+0x24>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800207a:	2100      	movs	r1, #0
 800207c:	2001      	movs	r0, #1
 800207e:	f000 fb19 	bl	80026b4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8002082:	f000 fbdb 	bl	800283c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8002086:	f000 fa9f 	bl	80025c8 <ExitCriticalSection>
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000283 	.word	0x20000283

08002094 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002098:	f000 fa86 	bl	80025a8 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 800209c:	2100      	movs	r1, #0
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 fb08 	bl	80026b4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80020a4:	f000 fbda 	bl	800285c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 80020a8:	f000 fa8e 	bl	80025c8 <ExitCriticalSection>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 80020c0:	f000 fa72 	bl	80025a8 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <eMBRTUReceive+0x7c>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2bff      	cmp	r3, #255	; 0xff
 80020cc:	d905      	bls.n	80020da <eMBRTUReceive+0x2a>
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <eMBRTUReceive+0x80>)
 80020d0:	4a18      	ldr	r2, [pc, #96]	; (8002134 <eMBRTUReceive+0x84>)
 80020d2:	219b      	movs	r1, #155	; 0x9b
 80020d4:	4818      	ldr	r0, [pc, #96]	; (8002138 <eMBRTUReceive+0x88>)
 80020d6:	f004 f815 	bl	8006104 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <eMBRTUReceive+0x7c>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d919      	bls.n	8002118 <eMBRTUReceive+0x68>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <eMBRTUReceive+0x7c>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	4813      	ldr	r0, [pc, #76]	; (800213c <eMBRTUReceive+0x8c>)
 80020ee:	f7ff fb5d 	bl	80017ac <usMBCRC16>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10f      	bne.n	8002118 <eMBRTUReceive+0x68>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <eMBRTUReceive+0x8c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <eMBRTUReceive+0x7c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b03      	subs	r3, #3
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <eMBRTUReceive+0x90>)
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e001      	b.n	800211c <eMBRTUReceive+0x6c>
    }
    else
    {
        eStatus = MB_EIO;
 8002118:	2305      	movs	r3, #5
 800211a:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800211c:	f000 fa54 	bl	80025c8 <ExitCriticalSection>
    return eStatus;
 8002120:	7dfb      	ldrb	r3, [r7, #23]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000038a 	.word	0x2000038a
 8002130:	08007074 	.word	0x08007074
 8002134:	08007374 	.word	0x08007374
 8002138:	0800709c 	.word	0x0800709c
 800213c:	20000284 	.word	0x20000284
 8002140:	20000285 	.word	0x20000285

08002144 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	4613      	mov	r3, r2
 8002152:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8002158:	f000 fa26 	bl	80025a8 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <eMBRTUSend+0xb4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d13f      	bne.n	80021e6 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3b01      	subs	r3, #1
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <eMBRTUSend+0xb8>)
 800216c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <eMBRTUSend+0xbc>)
 8002170:	2201      	movs	r2, #1
 8002172:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <eMBRTUSend+0xb8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	79fa      	ldrb	r2, [r7, #7]
 800217a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <eMBRTUSend+0xbc>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29a      	uxth	r2, r3
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <eMBRTUSend+0xbc>)
 800218a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <eMBRTUSend+0xb8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <eMBRTUSend+0xbc>)
 8002192:	8812      	ldrh	r2, [r2, #0]
 8002194:	b292      	uxth	r2, r2
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fb07 	bl	80017ac <usMBCRC16>
 800219e:	4603      	mov	r3, r0
 80021a0:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <eMBRTUSend+0xbc>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	b291      	uxth	r1, r2
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <eMBRTUSend+0xbc>)
 80021ae:	8011      	strh	r1, [r2, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	b2d9      	uxtb	r1, r3
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <eMBRTUSend+0xc0>)
 80021b8:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80021ba:	89bb      	ldrh	r3, [r7, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	b299      	uxth	r1, r3
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <eMBRTUSend+0xbc>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	b290      	uxth	r0, r2
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <eMBRTUSend+0xbc>)
 80021cc:	8010      	strh	r0, [r2, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	b2c9      	uxtb	r1, r1
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <eMBRTUSend+0xc0>)
 80021d4:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <eMBRTUSend+0xc4>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 80021dc:	2101      	movs	r1, #1
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 fa68 	bl	80026b4 <vMBPortSerialEnable>
 80021e4:	e001      	b.n	80021ea <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 80021e6:	2305      	movs	r3, #5
 80021e8:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 80021ea:	f000 f9ed 	bl	80025c8 <ExitCriticalSection>
    return eStatus;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000283 	.word	0x20000283
 80021fc:	20000384 	.word	0x20000384
 8002200:	20000388 	.word	0x20000388
 8002204:	20000284 	.word	0x20000284
 8002208:	20000282 	.word	0x20000282

0800220c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8002212:	2300      	movs	r3, #0
 8002214:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <xMBRTUReceiveFSM+0xb4>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <xMBRTUReceiveFSM+0x20>
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <xMBRTUReceiveFSM+0xb8>)
 8002222:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <xMBRTUReceiveFSM+0xbc>)
 8002224:	21e4      	movs	r1, #228	; 0xe4
 8002226:	4829      	ldr	r0, [pc, #164]	; (80022cc <xMBRTUReceiveFSM+0xc0>)
 8002228:	f003 ff6c 	bl	8006104 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800222c:	1dbb      	adds	r3, r7, #6
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fa9e 	bl	8002770 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <xMBRTUReceiveFSM+0xc4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b03      	cmp	r3, #3
 800223c:	d83b      	bhi.n	80022b6 <xMBRTUReceiveFSM+0xaa>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <xMBRTUReceiveFSM+0x38>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	08002261 	.word	0x08002261
 800224c:	08002289 	.word	0x08002289
 8002250:	0800225b 	.word	0x0800225b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8002254:	f000 faf2 	bl	800283c <vMBPortTimersEnable>
        break;
 8002258:	e02d      	b.n	80022b6 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800225a:	f000 faef 	bl	800283c <vMBPortTimersEnable>
        break;
 800225e:	e02a      	b.n	80022b6 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <xMBRTUReceiveFSM+0xc8>)
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <xMBRTUReceiveFSM+0xc8>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	b291      	uxth	r1, r2
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <xMBRTUReceiveFSM+0xc8>)
 8002272:	8011      	strh	r1, [r2, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	79b9      	ldrb	r1, [r7, #6]
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <xMBRTUReceiveFSM+0xcc>)
 800227a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <xMBRTUReceiveFSM+0xc4>)
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8002282:	f000 fadb 	bl	800283c <vMBPortTimersEnable>
        break;
 8002286:	e016      	b.n	80022b6 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <xMBRTUReceiveFSM+0xc8>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	2bff      	cmp	r3, #255	; 0xff
 8002290:	d80b      	bhi.n	80022aa <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <xMBRTUReceiveFSM+0xc8>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	b291      	uxth	r1, r2
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <xMBRTUReceiveFSM+0xc8>)
 800229e:	8011      	strh	r1, [r2, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	79b9      	ldrb	r1, [r7, #6]
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <xMBRTUReceiveFSM+0xcc>)
 80022a6:	5499      	strb	r1, [r3, r2]
 80022a8:	e002      	b.n	80022b0 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <xMBRTUReceiveFSM+0xc4>)
 80022ac:	2203      	movs	r2, #3
 80022ae:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80022b0:	f000 fac4 	bl	800283c <vMBPortTimersEnable>
        break;
 80022b4:	bf00      	nop
    }
    return xTaskNeedSwitch;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000282 	.word	0x20000282
 80022c4:	080070b0 	.word	0x080070b0
 80022c8:	08007384 	.word	0x08007384
 80022cc:	0800709c 	.word	0x0800709c
 80022d0:	20000283 	.word	0x20000283
 80022d4:	2000038a 	.word	0x2000038a
 80022d8:	20000284 	.word	0x20000284

080022dc <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <xMBRTUTransmitFSM+0x94>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d006      	beq.n	80022fe <xMBRTUTransmitFSM+0x22>
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <xMBRTUTransmitFSM+0x98>)
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <xMBRTUTransmitFSM+0x9c>)
 80022f4:	f240 111f 	movw	r1, #287	; 0x11f
 80022f8:	4820      	ldr	r0, [pc, #128]	; (800237c <xMBRTUTransmitFSM+0xa0>)
 80022fa:	f003 ff03 	bl	8006104 <__assert_func>

    switch ( eSndState )
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <xMBRTUTransmitFSM+0xa4>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <xMBRTUTransmitFSM+0x32>
 8002308:	2b01      	cmp	r3, #1
 800230a:	d005      	beq.n	8002318 <xMBRTUTransmitFSM+0x3c>
 800230c:	e02a      	b.n	8002364 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800230e:	2100      	movs	r1, #0
 8002310:	2001      	movs	r0, #1
 8002312:	f000 f9cf 	bl	80026b4 <vMBPortSerialEnable>
        break;
 8002316:	e025      	b.n	8002364 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <xMBRTUTransmitFSM+0xa8>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d013      	beq.n	800234a <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <xMBRTUTransmitFSM+0xac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fa08 	bl	8002740 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <xMBRTUTransmitFSM+0xac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <xMBRTUTransmitFSM+0xac>)
 8002338:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <xMBRTUTransmitFSM+0xa8>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <xMBRTUTransmitFSM+0xa8>)
 8002346:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8002348:	e00b      	b.n	8002362 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800234a:	2003      	movs	r0, #3
 800234c:	f000 f97e 	bl	800264c <xMBPortEventPost>
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8002354:	2100      	movs	r1, #0
 8002356:	2001      	movs	r0, #1
 8002358:	f000 f9ac 	bl	80026b4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <xMBRTUTransmitFSM+0xa4>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
        break;
 8002362:	bf00      	nop
    }

    return xNeedPoll;
 8002364:	79fb      	ldrb	r3, [r7, #7]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000283 	.word	0x20000283
 8002374:	080070cc 	.word	0x080070cc
 8002378:	08007398 	.word	0x08007398
 800237c:	0800709c 	.word	0x0800709c
 8002380:	20000282 	.word	0x20000282
 8002384:	20000388 	.word	0x20000388
 8002388:	20000384 	.word	0x20000384

0800238c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8002392:	2300      	movs	r3, #0
 8002394:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <xMBRTUTimerT35Expired+0x7c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d028      	beq.n	80023f2 <xMBRTUTimerT35Expired+0x66>
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	dc10      	bgt.n	80023c6 <xMBRTUTimerT35Expired+0x3a>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <xMBRTUTimerT35Expired+0x22>
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d006      	beq.n	80023ba <xMBRTUTimerT35Expired+0x2e>
 80023ac:	e00b      	b.n	80023c6 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 80023ae:	2000      	movs	r0, #0
 80023b0:	f000 f94c 	bl	800264c <xMBPortEventPost>
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
        break;
 80023b8:	e01c      	b.n	80023f4 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80023ba:	2001      	movs	r0, #1
 80023bc:	f000 f946 	bl	800264c <xMBPortEventPost>
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
        break;
 80023c4:	e016      	b.n	80023f4 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <xMBRTUTimerT35Expired+0x7c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d011      	beq.n	80023f4 <xMBRTUTimerT35Expired+0x68>
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <xMBRTUTimerT35Expired+0x7c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d00c      	beq.n	80023f4 <xMBRTUTimerT35Expired+0x68>
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <xMBRTUTimerT35Expired+0x7c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d007      	beq.n	80023f4 <xMBRTUTimerT35Expired+0x68>
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <xMBRTUTimerT35Expired+0x80>)
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <xMBRTUTimerT35Expired+0x84>)
 80023e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80023ec:	4809      	ldr	r0, [pc, #36]	; (8002414 <xMBRTUTimerT35Expired+0x88>)
 80023ee:	f003 fe89 	bl	8006104 <__assert_func>
        break;
 80023f2:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80023f4:	f000 fa32 	bl	800285c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <xMBRTUTimerT35Expired+0x7c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 80023fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000283 	.word	0x20000283
 800240c:	080070e8 	.word	0x080070e8
 8002410:	080073ac 	.word	0x080073ac
 8002414:	0800709c 	.word	0x0800709c

08002418 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	4608      	mov	r0, r1
 8002422:	4611      	mov	r1, r2
 8002424:	461a      	mov	r2, r3
 8002426:	4603      	mov	r3, r0
 8002428:	807b      	strh	r3, [r7, #2]
 800242a:	460b      	mov	r3, r1
 800242c:	707b      	strb	r3, [r7, #1]
 800242e:	4613      	mov	r3, r2
 8002430:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8002432:	783b      	ldrb	r3, [r7, #0]
 8002434:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8002436:	787b      	ldrb	r3, [r7, #1]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d905      	bls.n	8002448 <xMBUtilSetBits+0x30>
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <xMBUtilSetBits+0xcc>)
 800243e:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <xMBUtilSetBits+0xd0>)
 8002440:	2137      	movs	r1, #55	; 0x37
 8002442:	482a      	ldr	r0, [pc, #168]	; (80024ec <xMBUtilSetBits+0xd4>)
 8002444:	f003 fe5e 	bl	8006104 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	08db      	lsrs	r3, r3, #3
 800244c:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 800244e:	8abb      	ldrh	r3, [r7, #20]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	b29b      	uxth	r3, r3
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 800245a:	8afa      	ldrh	r2, [r7, #22]
 800245c:	8a7b      	ldrh	r3, [r7, #18]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2201      	movs	r2, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002472:	8a3a      	ldrh	r2, [r7, #16]
 8002474:	8879      	ldrh	r1, [r7, #2]
 8002476:	8abb      	ldrh	r3, [r7, #20]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	1acb      	subs	r3, r1, r3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8002482:	8abb      	ldrh	r3, [r7, #20]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800248c:	8abb      	ldrh	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	b21a      	sxth	r2, r3
 800249a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800249e:	4313      	orrs	r3, r2
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80024a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b0:	4013      	ands	r3, r2
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80024be:	8abb      	ldrh	r3, [r7, #20]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	89fa      	ldrh	r2, [r7, #14]
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80024ca:	89fb      	ldrh	r3, [r7, #14]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b299      	uxth	r1, r3
 80024d0:	8abb      	ldrh	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	b2ca      	uxtb	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0800714c 	.word	0x0800714c
 80024e8:	080073c4 	.word	0x080073c4
 80024ec:	0800715c 	.word	0x0800715c

080024f0 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8002506:	89fb      	ldrh	r3, [r7, #14]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	b29b      	uxth	r3, r3
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002512:	787b      	ldrb	r3, [r7, #1]
 8002514:	2201      	movs	r2, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8002520:	89fb      	ldrh	r3, [r7, #14]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800252a:	89fb      	ldrh	r3, [r7, #14]
 800252c:	3301      	adds	r3, #1
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b21a      	sxth	r2, r3
 8002538:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800253c:	4313      	orrs	r3, r2
 800253e:	b21b      	sxth	r3, r3
 8002540:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8002542:	893a      	ldrh	r2, [r7, #8]
 8002544:	89bb      	ldrh	r3, [r7, #12]
 8002546:	fa42 f303 	asr.w	r3, r2, r3
 800254a:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 800254c:	893a      	ldrh	r2, [r7, #8]
 800254e:	897b      	ldrh	r3, [r7, #10]
 8002550:	4013      	ands	r3, r2
 8002552:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8002554:	893b      	ldrh	r3, [r7, #8]
 8002556:	b2db      	uxtb	r3, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b07      	cmp	r3, #7
 8002572:	d00c      	beq.n	800258e <prveMBError2Exception+0x2a>
 8002574:	2b07      	cmp	r3, #7
 8002576:	dc0d      	bgt.n	8002594 <prveMBError2Exception+0x30>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <prveMBError2Exception+0x1e>
 800257c:	2b01      	cmp	r3, #1
 800257e:	d003      	beq.n	8002588 <prveMBError2Exception+0x24>
 8002580:	e008      	b.n	8002594 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
            break;
 8002586:	e008      	b.n	800259a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8002588:	2302      	movs	r3, #2
 800258a:	73fb      	strb	r3, [r7, #15]
            break;
 800258c:	e005      	b.n	800259a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800258e:	2306      	movs	r3, #6
 8002590:	73fb      	strb	r3, [r7, #15]
            break;
 8002592:	e002      	b.n	800259a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8002594:	2304      	movs	r3, #4
 8002596:	73fb      	strb	r3, [r7, #15]
            break;
 8002598:	bf00      	nop
    }

    return eStatus;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <EnterCriticalSection>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
  __disable_irq();
  lockCounter++;
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <EnterCriticalSection+0x1c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <EnterCriticalSection+0x1c>)
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	2000038c 	.word	0x2000038c

080025c8 <ExitCriticalSection>:



/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  lockCounter--;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <ExitCriticalSection+0x24>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	4a06      	ldr	r2, [pc, #24]	; (80025ec <ExitCriticalSection+0x24>)
 80025d4:	6013      	str	r3, [r2, #0]

  if (lockCounter == 0)
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <ExitCriticalSection+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <ExitCriticalSection+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80025de:	b662      	cpsie	i
}
 80025e0:	bf00      	nop
  {
    __enable_irq();
  }
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	2000038c 	.word	0x2000038c

080025f0 <MT_PORT_SetTimerModule>:



/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  modbusTimer = timer;
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <MT_PORT_SetTimerModule+0x1c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000394 	.word	0x20000394

08002610 <MT_PORT_SetUartModule>:



/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  modbusUart = uart;
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <MT_PORT_SetUartModule+0x1c>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000390 	.word	0x20000390

08002630 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  xEventInQueue = FALSE;
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <xMBPortEventInit+0x18>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
  return TRUE;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000399 	.word	0x20000399

0800264c <xMBPortEventPost>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventPost(eMBEventType eEvent)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  xEventInQueue = TRUE;
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <xMBPortEventPost+0x24>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
  eQueuedEvent = eEvent;
 800265c:	4a05      	ldr	r2, [pc, #20]	; (8002674 <xMBPortEventPost+0x28>)
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	7013      	strb	r3, [r2, #0]
  return TRUE;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	20000399 	.word	0x20000399
 8002674:	20000398 	.word	0x20000398

08002678 <xMBPortEventGet>:



/*----------------------------------------------------------------------------*/
BOOL xMBPortEventGet(eMBEventType * eEvent)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  BOOL xEventHappened = FALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]

  if( xEventInQueue )
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <xMBPortEventGet+0x34>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <xMBPortEventGet+0x26>
  {
    *eEvent = eQueuedEvent;
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <xMBPortEventGet+0x38>)
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	701a      	strb	r2, [r3, #0]
    xEventInQueue = FALSE;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <xMBPortEventGet+0x34>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
    xEventHappened = TRUE;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
  }

  return xEventHappened;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000399 	.word	0x20000399
 80026b0:	20000398 	.word	0x20000398

080026b4 <vMBPortSerialEnable>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	460a      	mov	r2, r1
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71bb      	strb	r3, [r7, #6]
  if (xRxEnable == FALSE)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <vMBPortSerialEnable+0x22>
  {
    HAL_UART_AbortReceive_IT(modbusUart);
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <vMBPortSerialEnable+0x5c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fd34 	bl	800513c <HAL_UART_AbortReceive_IT>
 80026d4:	e006      	b.n	80026e4 <vMBPortSerialEnable+0x30>
  }
  else
  {
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <vMBPortSerialEnable+0x5c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	490d      	ldr	r1, [pc, #52]	; (8002714 <vMBPortSerialEnable+0x60>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 fc88 	bl	8004ff4 <HAL_UART_Receive_IT>
  }

  if (xTxEnable == FALSE)
 80026e4:	79bb      	ldrb	r3, [r7, #6]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <vMBPortSerialEnable+0x42>
  {
    HAL_UART_AbortTransmit_IT(modbusUart);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <vMBPortSerialEnable+0x5c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fcb0 	bl	8005054 <HAL_UART_AbortTransmit_IT>
    if (modbusUart->gState == HAL_UART_STATE_READY)
    {
      prvvUARTTxReadyISR();
    }
  }
}
 80026f4:	e008      	b.n	8002708 <vMBPortSerialEnable+0x54>
    if (modbusUart->gState == HAL_UART_STATE_READY)
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <vMBPortSerialEnable+0x5c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	d101      	bne.n	8002708 <vMBPortSerialEnable+0x54>
      prvvUARTTxReadyISR();
 8002704:	f000 f84c 	bl	80027a0 <prvvUARTTxReadyISR>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000390 	.word	0x20000390
 8002714:	2000039b 	.word	0x2000039b

08002718 <xMBPortSerialInit>:



/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6039      	str	r1, [r7, #0]
 8002720:	4611      	mov	r1, r2
 8002722:	461a      	mov	r2, r3
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	460b      	mov	r3, r1
 800272a:	71bb      	strb	r3, [r7, #6]
 800272c:	4613      	mov	r3, r2
 800272e:	717b      	strb	r3, [r7, #5]
    return TRUE;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <xMBPortSerialPutByte>:



/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialPutByte(CHAR ucByte)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  txByte = ucByte;
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <xMBPortSerialPutByte+0x28>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	7013      	strb	r3, [r2, #0]
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <xMBPortSerialPutByte+0x2c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4904      	ldr	r1, [pc, #16]	; (8002768 <xMBPortSerialPutByte+0x28>)
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fc06 	bl	8004f6a <HAL_UART_Transmit_IT>
  return TRUE;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2000039a 	.word	0x2000039a
 800276c:	20000390 	.word	0x20000390

08002770 <xMBPortSerialGetByte>:



/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  *pucByte = rxByte;
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <xMBPortSerialGetByte+0x28>)
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <xMBPortSerialGetByte+0x2c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4904      	ldr	r1, [pc, #16]	; (8002798 <xMBPortSerialGetByte+0x28>)
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fc33 	bl	8004ff4 <HAL_UART_Receive_IT>
  return TRUE;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000039b 	.word	0x2000039b
 800279c:	20000390 	.word	0x20000390

080027a0 <prvvUARTTxReadyISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  pxMBFrameCBTransmitterEmpty();
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <prvvUARTTxReadyISR+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4798      	blx	r3
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000024c 	.word	0x2000024c

080027b4 <prvvUARTRxISR>:



/* --------------------------------------------------------------------------*/
static void prvvUARTRxISR(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  pxMBFrameCBByteReceived();
 80027b8:	4b02      	ldr	r3, [pc, #8]	; (80027c4 <prvvUARTRxISR+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4798      	blx	r3
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000248 	.word	0x20000248

080027c8 <HAL_UART_TxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_UART_TxCpltCallback+0x24>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_TxCpltCallback+0x1a>
  {
    prvvUARTTxReadyISR();
 80027de:	f7ff ffdf 	bl	80027a0 <prvvUARTTxReadyISR>
  }
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000390 	.word	0x20000390

080027f0 <HAL_UART_RxCpltCallback>:



/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_UART_RxCpltCallback+0x24>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d101      	bne.n	800280a <HAL_UART_RxCpltCallback+0x1a>
  {
    prvvUARTRxISR();
 8002806:	f7ff ffd5 	bl	80027b4 <prvvUARTRxISR>
  }
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000390 	.word	0x20000390

08002818 <xMBPortTimersInit>:

/* ----------------------- Start implementation -----------------------------*/

/*----------------------------------------------------------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
  timerPeriod = usTim1Timerout50us;
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <xMBPortTimersInit+0x20>)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	8013      	strh	r3, [r2, #0]
  return TRUE;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2000039c 	.word	0x2000039c

0800283c <vMBPortTimersEnable>:



/* --------------------------------------------------------------------------*/
inline void vMBPortTimersEnable()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  timerCounter = 0;
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <vMBPortTimersEnable+0x18>)
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(modbusTimer);
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <vMBPortTimersEnable+0x1c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f001 ff1c 	bl	8004688 <HAL_TIM_Base_Start_IT>
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000039e 	.word	0x2000039e
 8002858:	20000394 	.word	0x20000394

0800285c <vMBPortTimersDisable>:



/* --------------------------------------------------------------------------*/
inline void vMBPortTimersDisable()
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop_IT(modbusTimer);
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <vMBPortTimersDisable+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f001 ff71 	bl	800474c <HAL_TIM_Base_Stop_IT>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000394 	.word	0x20000394

08002874 <prvvTIMERExpiredISR>:



/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
    (void)pxMBPortCBTimerExpired();
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <prvvTIMERExpiredISR+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4798      	blx	r3
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000250 	.word	0x20000250

08002888 <HAL_TIM_PeriodElapsedCallback>:



/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == modbusTimer->Instance)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d10d      	bne.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    timerCounter++;
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80028a8:	801a      	strh	r2, [r3, #0]

    if (timerCounter == timerPeriod)
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x32>
    {
      prvvTIMERExpiredISR();
 80028b6:	f7ff ffdd 	bl	8002874 <prvvTIMERExpiredISR>
    }
  }
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000394 	.word	0x20000394
 80028c8:	2000039e 	.word	0x2000039e
 80028cc:	2000039c 	.word	0x2000039c

080028d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_MspInit+0x4c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_MspInit+0x4c>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_MspInit+0x4c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_MspInit+0x4c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_MspInit+0x4c>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_MspInit+0x4c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <HAL_RTC_MspInit+0x50>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d111      	bne.n	8002966 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002942:	2302      	movs	r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fa5d 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800295c:	f7fe fdce 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RTC_MspInit+0x54>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40002800 	.word	0x40002800
 8002974:	42470e3c 	.word	0x42470e3c

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_TIM_Base_MspInit+0x48>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d115      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_TIM_Base_MspInit+0x4c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	201d      	movs	r0, #29
 80029ac:	f000 fb59 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029b0:	201d      	movs	r0, #29
 80029b2:	f000 fb72 	bl	800309a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	; 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <HAL_UART_MspInit+0x108>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d135      	bne.n	8002a56 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a38      	ldr	r2, [pc, #224]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a34:	2307      	movs	r3, #7
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4826      	ldr	r0, [pc, #152]	; (8002ad8 <HAL_UART_MspInit+0x110>)
 8002a40:	f000 fbd8 	bl	80031f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2025      	movs	r0, #37	; 0x25
 8002a4a:	f000 fb0a 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a4e:	2025      	movs	r0, #37	; 0x25
 8002a50:	f000 fb23 	bl	800309a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a54:	e038      	b.n	8002ac8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <HAL_UART_MspInit+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d133      	bne.n	8002ac8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_UART_MspInit+0x10c>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a98:	230c      	movs	r3, #12
 8002a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <HAL_UART_MspInit+0x110>)
 8002ab4:	f000 fb9e 	bl	80031f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	2026      	movs	r0, #38	; 0x26
 8002abe:	f000 fad0 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ac2:	2026      	movs	r0, #38	; 0x26
 8002ac4:	f000 fae9 	bl	800309a <HAL_NVIC_EnableIRQ>
}
 8002ac8:	bf00      	nop
 8002aca:	3730      	adds	r7, #48	; 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40011000 	.word	0x40011000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	40004400 	.word	0x40004400

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x4>

08002af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <UsageFault_Handler+0x4>

08002afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2c:	f000 f99e 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f000 fcf9 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b46:	2002      	movs	r0, #2
 8002b48:	f000 fcf2 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002b54:	2004      	movs	r0, #4
 8002b56:	f000 fceb 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002b62:	2010      	movs	r0, #16
 8002b64:	f000 fce4 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b70:	2020      	movs	r0, #32
 8002b72:	f000 fcdd 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002b76:	2040      	movs	r0, #64	; 0x40
 8002b78:	f000 fcda 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002b7c:	2080      	movs	r0, #128	; 0x80
 8002b7e:	f000 fcd7 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <TIM3_IRQHandler+0x10>)
 8002b8e:	f001 fe0c 	bl	80047aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000012c 	.word	0x2000012c

08002b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <USART1_IRQHandler+0x10>)
 8002ba2:	f002 fb7d 	bl	80052a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000174 	.word	0x20000174

08002bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <USART2_IRQHandler+0x10>)
 8002bb6:	f002 fb73 	bl	80052a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200001b8 	.word	0x200001b8

08002bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	return 1;
 8002bc8:	2301      	movs	r3, #1
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_kill>:

int _kill(int pid, int sig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bde:	f003 fd65 	bl	80066ac <__errno>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2216      	movs	r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
	return -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_exit>:

void _exit (int status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffe7 	bl	8002bd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c06:	e7fe      	b.n	8002c06 <_exit+0x12>

08002c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e00a      	b.n	8002c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c1a:	f3af 8000 	nop.w
 8002c1e:	4601      	mov	r1, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	b2ca      	uxtb	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf0      	blt.n	8002c1a <_read+0x12>
	}

return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e009      	b.n	8002c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dbf1      	blt.n	8002c54 <_write+0x12>
	}
	return len;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_close>:

int _close(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	return -1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_isatty>:

int _isatty(int file)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <_sbrk+0x5c>)
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <_sbrk+0x60>)
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <_sbrk+0x64>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <_sbrk+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d207      	bcs.n	8002d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d14:	f003 fcca 	bl	80066ac <__errno>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e009      	b.n	8002d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <_sbrk+0x64>)
 8002d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20010000 	.word	0x20010000
 8002d44:	00000400 	.word	0x00000400
 8002d48:	200003a0 	.word	0x200003a0
 8002d4c:	200004f8 	.word	0x200004f8

08002d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <SystemInit+0x20>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <SystemInit+0x20>)
 8002d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d7a:	490e      	ldr	r1, [pc, #56]	; (8002db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d7c:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d90:	4c0b      	ldr	r4, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d9e:	f7ff ffd7 	bl	8002d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da2:	f003 fc89 	bl	80066b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da6:	f7fd feef 	bl	8000b88 <main>
  bx  lr    
 8002daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002db8:	0800746c 	.word	0x0800746c
  ldr r2, =_sbss
 8002dbc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002dc0:	200004f4 	.word	0x200004f4

08002dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC_IRQHandler>
	...

08002dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_Init+0x40>)
 8002dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_Init+0x40>)
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_Init+0x40>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f000 f92b 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df6:	200f      	movs	r0, #15
 8002df8:	f000 f808 	bl	8002e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dfc:	f7ff fd68 	bl	80028d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_InitTick+0x54>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_InitTick+0x58>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f943 	bl	80030b6 <HAL_SYSTICK_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00e      	b.n	8002e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d80a      	bhi.n	8002e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e40:	2200      	movs	r2, #0
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f000 f90b 	bl	8003062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4c:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <HAL_InitTick+0x5c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000088 	.word	0x20000088
 8002e64:	20000090 	.word	0x20000090
 8002e68:	2000008c 	.word	0x2000008c

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000090 	.word	0x20000090
 8002e90:	200003a4 	.word	0x200003a4

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200003a4 	.word	0x200003a4

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	; (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	; (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	; (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f7ff ff8e 	bl	8002f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff29 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003074:	f7ff ff3e 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7ff ff8e 	bl	8002fa0 <NVIC_EncodePriority>
 8003084:	4602      	mov	r2, r0
 8003086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff5d 	bl	8002f4c <__NVIC_SetPriority>
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff31 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffa2 	bl	8003008 <SysTick_Config>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff feda 	bl	8002e94 <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d008      	beq.n	8003100 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e052      	b.n	80031a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0216 	bic.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <HAL_DMA_Abort+0x62>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003150:	e013      	b.n	800317a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003152:	f7ff fe9f 	bl	8002e94 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b05      	cmp	r3, #5
 800315e:	d90c      	bls.n	800317a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e015      	b.n	80031a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e4      	bne.n	8003152 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	223f      	movs	r2, #63	; 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e00c      	b.n	80031e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2205      	movs	r2, #5
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e159      	b.n	80034c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8148 	bne.w	80034be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d005      	beq.n	8003246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	2b02      	cmp	r3, #2
 8003244:	d130      	bne.n	80032a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 0201 	and.w	r2, r3, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d017      	beq.n	80032e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d123      	bne.n	8003338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	08da      	lsrs	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3208      	adds	r2, #8
 80032f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a2 	beq.w	80034be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_GPIO_Init+0x2e8>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4a56      	ldr	r2, [pc, #344]	; (80034dc <HAL_GPIO_Init+0x2e8>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003388:	6453      	str	r3, [r2, #68]	; 0x44
 800338a:	4b54      	ldr	r3, [pc, #336]	; (80034dc <HAL_GPIO_Init+0x2e8>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003396:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_GPIO_Init+0x2ec>)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a49      	ldr	r2, [pc, #292]	; (80034e4 <HAL_GPIO_Init+0x2f0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d019      	beq.n	80033f6 <HAL_GPIO_Init+0x202>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a48      	ldr	r2, [pc, #288]	; (80034e8 <HAL_GPIO_Init+0x2f4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_GPIO_Init+0x1fe>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_GPIO_Init+0x2f8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00d      	beq.n	80033ee <HAL_GPIO_Init+0x1fa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a46      	ldr	r2, [pc, #280]	; (80034f0 <HAL_GPIO_Init+0x2fc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <HAL_GPIO_Init+0x1f6>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a45      	ldr	r2, [pc, #276]	; (80034f4 <HAL_GPIO_Init+0x300>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_GPIO_Init+0x1f2>
 80033e2:	2304      	movs	r3, #4
 80033e4:	e008      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033e6:	2307      	movs	r3, #7
 80033e8:	e006      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033ea:	2303      	movs	r3, #3
 80033ec:	e004      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e002      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033f6:	2300      	movs	r3, #0
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f002 0203 	and.w	r2, r2, #3
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4093      	lsls	r3, r2
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003408:	4935      	ldr	r1, [pc, #212]	; (80034e0 <HAL_GPIO_Init+0x2ec>)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	3302      	adds	r3, #2
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343a:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <HAL_GPIO_Init+0x304>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003464:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_GPIO_Init+0x304>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b8:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <HAL_GPIO_Init+0x304>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3301      	adds	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	f67f aea2 	bls.w	8003210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40013800 	.word	0x40013800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003518:	e003      	b.n	8003522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	619a      	str	r2, [r3, #24]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fd64 	bl	800101c <HAL_GPIO_EXTI_Callback>
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40013c00 	.word	0x40013c00

08003560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e267      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d075      	beq.n	800366a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357e:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d00c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4b85      	ldr	r3, [pc, #532]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d112      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003596:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a2:	d10b      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05b      	beq.n	8003668 <HAL_RCC_OscConfig+0x108>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d157      	bne.n	8003668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e242      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x74>
 80035c6:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a75      	ldr	r2, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e01d      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6f      	ldr	r2, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6c      	ldr	r2, [pc, #432]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035f8:	4b69      	ldr	r3, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a68      	ldr	r2, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a65      	ldr	r2, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800360a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7ff fc3c 	bl	8002e94 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003620:	f7ff fc38 	bl	8002e94 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e207      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0xc0>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7ff fc28 	bl	8002e94 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7ff fc24 	bl	8002e94 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1f3      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0xe8>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d063      	beq.n	800373e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003676:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368a:	2b08      	cmp	r3, #8
 800368c:	d11c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368e:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x152>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e1c7      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4937      	ldr	r1, [pc, #220]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	e03a      	b.n	800373e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCC_OscConfig+0x244>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7ff fbdd 	bl	8002e94 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036de:	f7ff fbd9 	bl	8002e94 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1a8      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4925      	ldr	r1, [pc, #148]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
 8003710:	e015      	b.n	800373e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCC_OscConfig+0x244>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7ff fbbc 	bl	8002e94 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003720:	f7ff fbb8 	bl	8002e94 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e187      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d036      	beq.n	80037b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x248>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7ff fb9c 	bl	8002e94 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003760:	f7ff fb98 	bl	8002e94 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e167      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x200>
 800377e:	e01b      	b.n	80037b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x248>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7ff fb85 	bl	8002e94 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	e00e      	b.n	80037ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378e:	f7ff fb81 	bl	8002e94 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d907      	bls.n	80037ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e150      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	42470000 	.word	0x42470000
 80037a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ea      	bne.n	800378e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8097 	beq.w	80038f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	4b7d      	ldr	r3, [pc, #500]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a7c      	ldr	r2, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d118      	bne.n	8003834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003802:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a73      	ldr	r2, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380e:	f7ff fb41 	bl	8002e94 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003816:	f7ff fb3d 	bl	8002e94 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e10c      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x2ea>
 800383c:	4b64      	ldr	r3, [pc, #400]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x324>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b05      	cmp	r3, #5
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x30c>
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
 800385e:	4b5c      	ldr	r3, [pc, #368]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a5b      	ldr	r2, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6713      	str	r3, [r2, #112]	; 0x70
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0x324>
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a57      	ldr	r2, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	4b55      	ldr	r3, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a54      	ldr	r2, [pc, #336]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800387e:	f023 0304 	bic.w	r3, r3, #4
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7ff fb02 	bl	8002e94 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7ff fafe 	bl	8002e94 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0cb      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038aa:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0ee      	beq.n	8003894 <HAL_RCC_OscConfig+0x334>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7ff faec 	bl	8002e94 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7ff fae8 	bl	8002e94 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0b5      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d6:	4b3e      	ldr	r3, [pc, #248]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1ee      	bne.n	80038c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	4a38      	ldr	r2, [pc, #224]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a1 	beq.w	8003a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b08      	cmp	r3, #8
 8003908:	d05c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d141      	bne.n	8003996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7ff fabc 	bl	8002e94 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7ff fab8 	bl	8002e94 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e087      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	491b      	ldr	r1, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x478>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7ff fa91 	bl	8002e94 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003976:	f7ff fa8d 	bl	8002e94 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e05c      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x416>
 8003994:	e054      	b.n	8003a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_OscConfig+0x478>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7ff fa7a 	bl	8002e94 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7ff fa76 	bl	8002e94 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e045      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x444>
 80039c2:	e03d      	b.n	8003a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e038      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4ec>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d028      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d121      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d11a      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d111      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0cc      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b68      	ldr	r3, [pc, #416]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d90c      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0b8      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a58      	ldr	r2, [pc, #352]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a52      	ldr	r2, [pc, #328]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b50      	ldr	r3, [pc, #320]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	494d      	ldr	r1, [pc, #308]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d044      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d119      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e07f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e067      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4934      	ldr	r1, [pc, #208]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b40:	f7ff f9a8 	bl	8002e94 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7ff f9a4 	bl	8002e94 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e04f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 020c 	and.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1eb      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d20c      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e032      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4916      	ldr	r1, [pc, #88]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	490e      	ldr	r1, [pc, #56]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd6:	f000 f821 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	490a      	ldr	r1, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	5ccb      	ldrb	r3, [r1, r3]
 8003bea:	fa22 f303 	lsr.w	r3, r2, r3
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff f908 	bl	8002e0c <HAL_InitTick>

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023c00 	.word	0x40023c00
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	080073d4 	.word	0x080073d4
 8003c14:	20000088 	.word	0x20000088
 8003c18:	2000008c 	.word	0x2000008c

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c20:	b090      	sub	sp, #64	; 0x40
 8003c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
 8003c28:	2300      	movs	r3, #0
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c34:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d00d      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x40>
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	f200 80a1 	bhi.w	8003d88 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x34>
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4e:	e09b      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c54:	e09b      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c56:	4b53      	ldr	r3, [pc, #332]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c5a:	e098      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c5c:	4b4f      	ldr	r3, [pc, #316]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c66:	4b4d      	ldr	r3, [pc, #308]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d028      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c84:	2100      	movs	r1, #0
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c88:	fb03 f201 	mul.w	r2, r3, r1
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	4a43      	ldr	r2, [pc, #268]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c96:	fba0 1202 	umull	r1, r2, r0, r2
 8003c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c9c:	460a      	mov	r2, r1
 8003c9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca2:	4413      	add	r3, r2
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca8:	2200      	movs	r2, #0
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cb6:	f7fc fde9 	bl	800088c <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc2:	e053      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc4:	4b35      	ldr	r3, [pc, #212]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	2200      	movs	r2, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	617a      	str	r2, [r7, #20]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cd6:	f04f 0b00 	mov.w	fp, #0
 8003cda:	4652      	mov	r2, sl
 8003cdc:	465b      	mov	r3, fp
 8003cde:	f04f 0000 	mov.w	r0, #0
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	0159      	lsls	r1, r3, #5
 8003ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cec:	0150      	lsls	r0, r2, #5
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	ebb2 080a 	subs.w	r8, r2, sl
 8003cf6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d0e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d12:	eb63 0509 	sbc.w	r5, r3, r9
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	00eb      	lsls	r3, r5, #3
 8003d20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d24:	00e2      	lsls	r2, r4, #3
 8003d26:	4614      	mov	r4, r2
 8003d28:	461d      	mov	r5, r3
 8003d2a:	eb14 030a 	adds.w	r3, r4, sl
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	eb45 030b 	adc.w	r3, r5, fp
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d42:	4629      	mov	r1, r5
 8003d44:	028b      	lsls	r3, r1, #10
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	028a      	lsls	r2, r1, #10
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	2200      	movs	r2, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	60fa      	str	r2, [r7, #12]
 8003d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d60:	f7fc fd94 	bl	800088c <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	3301      	adds	r3, #1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d86:	e002      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3740      	adds	r7, #64	; 0x40
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	017d7840 	.word	0x017d7840

08003da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000088 	.word	0x20000088

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff0 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0a9b      	lsrs	r3, r3, #10
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	080073e4 	.word	0x080073e4

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dec:	f7ff ffdc 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0b5b      	lsrs	r3, r3, #13
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	080073e4 	.word	0x080073e4

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d035      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e38:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3e:	f7ff f829 	bl	8002e94 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e46:	f7ff f825 	bl	8002e94 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0ba      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e58:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	019a      	lsls	r2, r3, #6
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	071b      	lsls	r3, r3, #28
 8003e70:	495a      	ldr	r1, [pc, #360]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e78:	4b57      	ldr	r3, [pc, #348]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7e:	f7ff f809 	bl	8002e94 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e86:	f7ff f805 	bl	8002e94 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e09a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8083 	beq.w	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a48      	ldr	r2, [pc, #288]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ece:	4b44      	ldr	r3, [pc, #272]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a43      	ldr	r2, [pc, #268]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eda:	f7fe ffdb 	bl	8002e94 <HAL_GetTick>
 8003ede:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fe ffd7 	bl	8002e94 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e06c      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d02f      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d028      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f28:	4b2e      	ldr	r3, [pc, #184]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f34:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f3a:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d114      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fe ffa5 	bl	8002e94 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fe ffa1 	bl	8002e94 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e034      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ee      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f7c:	d10d      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	4912      	ldr	r1, [pc, #72]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]
 8003f98:	e005      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fa0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fa4:	6093      	str	r3, [r2, #8]
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb2:	490a      	ldr	r1, [pc, #40]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7c1a      	ldrb	r2, [r3, #16]
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	42470068 	.word	0x42470068
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470e40 	.word	0x42470e40
 8003fe8:	424711e0 	.word	0x424711e0

08003fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e066      	b.n	80040d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7f5b      	ldrb	r3, [r3, #29]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe fc84 	bl	8002920 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	22ca      	movs	r2, #202	; 0xca
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2253      	movs	r2, #83	; 0x53
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa45 	bl	80044be <RTC_EnterInitMode>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12c      	bne.n	8004098 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800404c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004050:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68d2      	ldr	r2, [r2, #12]
 8004078:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6919      	ldr	r1, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	041a      	lsls	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa4c 	bl	800452c <RTC_ExitInitMode>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	7f1b      	ldrb	r3, [r3, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_RTC_SetTime+0x1c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e087      	b.n	8004204 <HAL_RTC_SetTime+0x12c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2202      	movs	r2, #2
 80040fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d126      	bne.n	8004154 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fa29 	bl	8004576 <RTC_ByteToBcd2>
 8004124:	4603      	mov	r3, r0
 8004126:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa22 	bl	8004576 <RTC_ByteToBcd2>
 8004132:	4603      	mov	r3, r0
 8004134:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004136:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	789b      	ldrb	r3, [r3, #2]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fa1a 	bl	8004576 <RTC_ByteToBcd2>
 8004142:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004144:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	78db      	ldrb	r3, [r3, #3]
 800414c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e018      	b.n	8004186 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004174:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800417a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	78db      	ldrb	r3, [r3, #3]
 8004180:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	22ca      	movs	r2, #202	; 0xca
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2253      	movs	r2, #83	; 0x53
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f991 	bl	80044be <RTC_EnterInitMode>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d120      	bne.n	80041e8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6899      	ldr	r1, [r3, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f9a4 	bl	800452c <RTC_ExitInitMode>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]

  return status;
 8004202:	7cfb      	ldrb	r3, [r7, #19]
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}

0800420c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800423e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004242:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424e:	b2da      	uxtb	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0d9b      	lsrs	r3, r3, #22
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11a      	bne.n	80042be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f98f 	bl	80045b0 <RTC_Bcd2ToByte>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f986 	bl	80045b0 <RTC_Bcd2ToByte>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	789b      	ldrb	r3, [r3, #2]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f97d 	bl	80045b0 <RTC_Bcd2ToByte>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	7f1b      	ldrb	r3, [r3, #28]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_RTC_SetDate+0x1c>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e071      	b.n	80043c8 <HAL_RTC_SetDate+0x100>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2202      	movs	r2, #2
 80042ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10e      	bne.n	8004314 <HAL_RTC_SetDate+0x4c>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	330a      	adds	r3, #10
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11c      	bne.n	8004354 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	78db      	ldrb	r3, [r3, #3]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f929 	bl	8004576 <RTC_ByteToBcd2>
 8004324:	4603      	mov	r3, r0
 8004326:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f922 	bl	8004576 <RTC_ByteToBcd2>
 8004332:	4603      	mov	r3, r0
 8004334:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004336:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	789b      	ldrb	r3, [r3, #2]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f91a 	bl	8004576 <RTC_ByteToBcd2>
 8004342:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004344:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e00e      	b.n	8004372 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004360:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004366:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	22ca      	movs	r2, #202	; 0xca
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2253      	movs	r2, #83	; 0x53
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f89b 	bl	80044be <RTC_EnterInitMode>
 8004388:	4603      	mov	r3, r0
 800438a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10c      	bne.n	80043ac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800439c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f8c2 	bl	800452c <RTC_ExitInitMode>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	771a      	strb	r2, [r3, #28]

  return status;
 80043c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	0b5b      	lsrs	r3, r3, #13
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11a      	bne.n	8004464 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	78db      	ldrb	r3, [r3, #3]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f8bc 	bl	80045b0 <RTC_Bcd2ToByte>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f8b3 	bl	80045b0 <RTC_Bcd2ToByte>
 800444a:	4603      	mov	r3, r0
 800444c:	461a      	mov	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	789b      	ldrb	r3, [r3, #2]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f8aa 	bl	80045b0 <RTC_Bcd2ToByte>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004488:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800448a:	f7fe fd03 	bl	8002e94 <HAL_GetTick>
 800448e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004490:	e009      	b.n	80044a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004492:	f7fe fcff 	bl	8002e94 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a0:	d901      	bls.n	80044a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e007      	b.n	80044b6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ee      	beq.n	8004492 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d122      	bne.n	8004522 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fe fcd2 	bl	8002e94 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044f2:	e00c      	b.n	800450e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f4:	f7fe fcce 	bl	8002e94 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004502:	d904      	bls.n	800450e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2204      	movs	r2, #4
 8004508:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <RTC_EnterInitMode+0x64>
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d1e8      	bne.n	80044f4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004546:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff89 	bl	800446e <HAL_RTC_WaitForSynchro>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	4603      	mov	r3, r0
 800457e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004584:	e005      	b.n	8004592 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3301      	adds	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	3b0a      	subs	r3, #10
 8004590:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	2b09      	cmp	r3, #9
 8004596:	d8f6      	bhi.n	8004586 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	b2da      	uxtb	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b2db      	uxtb	r3, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	0092      	lsls	r2, r2, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	4413      	add	r3, r2
 80045da:	b2db      	uxtb	r3, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fe f9b2 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fab6 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e044      	b.n	800472a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1e      	ldr	r2, [pc, #120]	; (8004738 <HAL_TIM_Base_Start_IT+0xb0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d018      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x6c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d013      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x6c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_TIM_Base_Start_IT+0xb4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x6c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a19      	ldr	r2, [pc, #100]	; (8004740 <HAL_TIM_Base_Start_IT+0xb8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x6c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_TIM_Base_Start_IT+0xbc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x6c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <HAL_TIM_Base_Start_IT+0xc0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d111      	bne.n	8004718 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d010      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	e007      	b.n	8004728 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40014000 	.word	0x40014000

0800474c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	f241 1311 	movw	r3, #4369	; 0x1111
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10f      	bne.n	8004794 <HAL_TIM_Base_Stop_IT+0x48>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	f240 4344 	movw	r3, #1092	; 0x444
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_TIM_Base_Stop_IT+0x48>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d122      	bne.n	8004806 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d11b      	bne.n	8004806 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0202 	mvn.w	r2, #2
 80047d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f9b5 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80047f2:	e005      	b.n	8004800 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f9a7 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9b8 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d122      	bne.n	800485a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d11b      	bne.n	800485a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0204 	mvn.w	r2, #4
 800482a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f98b 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 8004846:	e005      	b.n	8004854 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f97d 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f98e 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d122      	bne.n	80048ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b08      	cmp	r3, #8
 8004874:	d11b      	bne.n	80048ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0208 	mvn.w	r2, #8
 800487e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2204      	movs	r2, #4
 8004884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f961 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 800489a:	e005      	b.n	80048a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f953 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f964 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d122      	bne.n	8004902 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d11b      	bne.n	8004902 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0210 	mvn.w	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2208      	movs	r2, #8
 80048d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f937 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80048ee:	e005      	b.n	80048fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f929 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f93a 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0201 	mvn.w	r2, #1
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fd ffad 	bl	8002888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	2b80      	cmp	r3, #128	; 0x80
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fab1 	bl	8004ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10e      	bne.n	8004986 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d107      	bne.n	8004986 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8ff 	bl	8004b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	d10e      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0220 	mvn.w	r2, #32
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fa7b 	bl	8004ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_ConfigClockSource+0x1c>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0b4      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x186>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	d03e      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xd4>
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a14:	f200 8087 	bhi.w	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1c:	f000 8086 	beq.w	8004b2c <HAL_TIM_ConfigClockSource+0x172>
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a24:	d87f      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a26:	2b70      	cmp	r3, #112	; 0x70
 8004a28:	d01a      	beq.n	8004a60 <HAL_TIM_ConfigClockSource+0xa6>
 8004a2a:	2b70      	cmp	r3, #112	; 0x70
 8004a2c:	d87b      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	2b60      	cmp	r3, #96	; 0x60
 8004a30:	d050      	beq.n	8004ad4 <HAL_TIM_ConfigClockSource+0x11a>
 8004a32:	2b60      	cmp	r3, #96	; 0x60
 8004a34:	d877      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a36:	2b50      	cmp	r3, #80	; 0x50
 8004a38:	d03c      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0xfa>
 8004a3a:	2b50      	cmp	r3, #80	; 0x50
 8004a3c:	d873      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d058      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0x13a>
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d86f      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a46:	2b30      	cmp	r3, #48	; 0x30
 8004a48:	d064      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0x15a>
 8004a4a:	2b30      	cmp	r3, #48	; 0x30
 8004a4c:	d86b      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d060      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0x15a>
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d867      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d05c      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d05a      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5e:	e062      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f000 f98c 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e04f      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6899      	ldr	r1, [r3, #8]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f000 f975 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab0:	609a      	str	r2, [r3, #8]
      break;
 8004ab2:	e03c      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f000 f8e9 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2150      	movs	r1, #80	; 0x50
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f942 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004ad2:	e02c      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f000 f908 	bl	8004cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2160      	movs	r1, #96	; 0x60
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 f932 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004af2:	e01c      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f000 f8c9 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2140      	movs	r1, #64	; 0x40
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f922 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b12:	e00c      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 f919 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b24:	e003      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2a:	e000      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <TIM_Base_SetConfig+0xe8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <TIM_Base_SetConfig+0xec>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0xf0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d017      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <TIM_Base_SetConfig+0xe8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <TIM_Base_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <TIM_Base_SetConfig+0xf0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <TIM_Base_SetConfig+0xf4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <TIM_Base_SetConfig+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <TIM_Base_SetConfig+0xfc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e050      	b.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d013      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10c      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40014000 	.word	0x40014000

08004ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e03f      	b.n	8004f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd fd66 	bl	80029c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fe81 	bl	8005c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d130      	bne.n	8004fe6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Transmit_IT+0x26>
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e029      	b.n	8004fe8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Transmit_IT+0x38>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e022      	b.n	8004fe8 <HAL_UART_Transmit_IT+0x7e>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	88fa      	ldrh	r2, [r7, #6]
 8004fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2221      	movs	r2, #33	; 0x21
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d11d      	bne.n	800504a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Receive_IT+0x26>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e016      	b.n	800504c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive_IT+0x38>
 8005028:	2302      	movs	r3, #2
 800502a:	e00f      	b.n	800504c <HAL_UART_Receive_IT+0x58>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	461a      	mov	r2, r3
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 fbe5 	bl	8005810 <UART_Start_Receive_IT>
 8005046:	4603      	mov	r3, r0
 8005048:	e000      	b.n	800504c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08e      	sub	sp, #56	; 0x38
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	61fb      	str	r3, [r7, #28]
   return(result);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d13c      	bne.n	8005118 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	61ba      	str	r2, [r7, #24]
 80050c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	613b      	str	r3, [r7, #16]
   return(result);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_UART_AbortTransmit_IT+0xe4>)
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe f861 	bl	80031ae <HAL_DMA_Abort_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01c      	beq.n	800512c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
 8005100:	e014      	b.n	800512c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb5d 	bl	80057d0 <HAL_UART_AbortTransmitCpltCallback>
 8005116:	e009      	b.n	800512c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fb52 	bl	80057d0 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3738      	adds	r7, #56	; 0x38
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	0800597b 	.word	0x0800597b

0800513c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b09a      	sub	sp, #104	; 0x68
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800515a:	667b      	str	r3, [r7, #100]	; 0x64
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005164:	657a      	str	r2, [r7, #84]	; 0x54
 8005166:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800516a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	663b      	str	r3, [r7, #96]	; 0x60
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005198:	643a      	str	r2, [r7, #64]	; 0x40
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800519e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e5      	bne.n	8005178 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d119      	bne.n	80051e8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f023 0310 	bic.w	r3, r3, #16
 80051ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d13f      	bne.n	8005276 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3314      	adds	r3, #20
 80051fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	60bb      	str	r3, [r7, #8]
   return(result);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520c:	65bb      	str	r3, [r7, #88]	; 0x58
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005216:	61ba      	str	r2, [r7, #24]
 8005218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	613b      	str	r3, [r7, #16]
   return(result);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_UART_AbortReceive_IT+0x160>)
 8005238:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	4618      	mov	r0, r3
 8005240:	f7fd ffb5 	bl	80031ae <HAL_DMA_Abort_IT>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d022      	beq.n	8005290 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3
 8005258:	e01a      	b.n	8005290 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fab8 	bl	80057e4 <HAL_UART_AbortReceiveCpltCallback>
 8005274:	e00c      	b.n	8005290 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 faaa 	bl	80057e4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3768      	adds	r7, #104	; 0x68
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	080059a5 	.word	0x080059a5

080052a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b0ba      	sub	sp, #232	; 0xe8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <HAL_UART_IRQHandler+0x66>
 80052f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fbd0 	bl	8005aa4 <UART_Receive_IT>
      return;
 8005304:	e256      	b.n	80057b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80de 	beq.w	80054cc <HAL_UART_IRQHandler+0x22c>
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80d1 	beq.w	80054cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_UART_IRQHandler+0xae>
 8005336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f043 0201 	orr.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_UART_IRQHandler+0xd2>
 800535a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0202 	orr.w	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_UART_IRQHandler+0xf6>
 800537e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0204 	orr.w	r2, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d011      	beq.n	80053c6 <HAL_UART_IRQHandler+0x126>
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f043 0208 	orr.w	r2, r3, #8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 81ed 	beq.w	80057aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_UART_IRQHandler+0x14e>
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fb5b 	bl	8005aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <HAL_UART_IRQHandler+0x17a>
 8005412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d04f      	beq.n	80054ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa36 	bl	800588c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d141      	bne.n	80054b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800545a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800545e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1d9      	bne.n	800542e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	4a7d      	ldr	r2, [pc, #500]	; (800567c <HAL_UART_IRQHandler+0x3dc>)
 8005488:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fe8d 	bl	80031ae <HAL_DMA_Abort_IT>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a4:	4610      	mov	r0, r2
 80054a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e00e      	b.n	80054c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f986 	bl	80057bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e00a      	b.n	80054c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f982 	bl	80057bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	e006      	b.n	80054c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f97e 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054c6:	e170      	b.n	80057aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	bf00      	nop
    return;
 80054ca:	e16e      	b.n	80057aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	f040 814a 	bne.w	800576a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8143 	beq.w	800576a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 813c 	beq.w	800576a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	f040 80b4 	bne.w	8005680 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8140 	beq.w	80057ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005536:	429a      	cmp	r2, r3
 8005538:	f080 8139 	bcs.w	80057ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005542:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	f000 8088 	beq.w	8005662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800556c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800557e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800558a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1d9      	bne.n	8005552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3314      	adds	r3, #20
 80055be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e1      	bne.n	800559e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800560c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005644:	65ba      	str	r2, [r7, #88]	; 0x58
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800564a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e3      	bne.n	8005620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	4618      	mov	r0, r3
 800565e:	f7fd fd36 	bl	80030ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800566a:	b29b      	uxth	r3, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8c0 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005678:	e099      	b.n	80057ae <HAL_UART_IRQHandler+0x50e>
 800567a:	bf00      	nop
 800567c:	08005953 	.word	0x08005953
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005688:	b29b      	uxth	r3, r3
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 808b 	beq.w	80057b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800569c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8086 	beq.w	80057b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056ca:	647a      	str	r2, [r7, #68]	; 0x44
 80056cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e3      	bne.n	80056a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	623b      	str	r3, [r7, #32]
   return(result);
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005702:	633a      	str	r2, [r7, #48]	; 0x30
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60fb      	str	r3, [r7, #12]
   return(result);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005748:	61fa      	str	r2, [r7, #28]
 800574a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	69b9      	ldr	r1, [r7, #24]
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	617b      	str	r3, [r7, #20]
   return(result);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e3      	bne.n	8005724 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800575c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f848 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005768:	e023      	b.n	80057b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_UART_IRQHandler+0x4ea>
 8005776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f926 	bl	80059d4 <UART_Transmit_IT>
    return;
 8005788:	e014      	b.n	80057b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <HAL_UART_IRQHandler+0x514>
 8005796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f966 	bl	8005a74 <UART_EndTransmit_IT>
    return;
 80057a8:	e004      	b.n	80057b4 <HAL_UART_IRQHandler+0x514>
    return;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <HAL_UART_IRQHandler+0x514>
      return;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <HAL_UART_IRQHandler+0x514>
      return;
 80057b2:	bf00      	nop
  }
}
 80057b4:	37e8      	adds	r7, #232	; 0xe8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop

080057bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2222      	movs	r2, #34	; 0x22
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0220 	orr.w	r2, r2, #32
 800587c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b095      	sub	sp, #84	; 0x54
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b4:	643a      	str	r2, [r7, #64]	; 0x40
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3314      	adds	r3, #20
 80058ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	d119      	bne.n	8005938 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	60bb      	str	r3, [r7, #8]
   return(result);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f023 0310 	bic.w	r3, r3, #16
 800591a:	647b      	str	r3, [r7, #68]	; 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005924:	61ba      	str	r2, [r7, #24]
 8005926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6979      	ldr	r1, [r7, #20]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	613b      	str	r3, [r7, #16]
   return(result);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005946:	bf00      	nop
 8005948:	3754      	adds	r7, #84	; 0x54
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff ff25 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ff1a 	bl	80057d0 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ff0c 	bl	80057e4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b21      	cmp	r3, #33	; 0x21
 80059e6:	d13e      	bne.n	8005a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d114      	bne.n	8005a1c <UART_Transmit_IT+0x48>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d110      	bne.n	8005a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]
 8005a1a:	e008      	b.n	8005a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6211      	str	r1, [r2, #32]
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e000      	b.n	8005a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fc fe97 	bl	80027c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08c      	sub	sp, #48	; 0x30
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b22      	cmp	r3, #34	; 0x22
 8005ab6:	f040 80ab 	bne.w	8005c10 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d117      	bne.n	8005af4 <UART_Receive_IT+0x50>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d113      	bne.n	8005af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
 8005af2:	e026      	b.n	8005b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b06:	d007      	beq.n	8005b18 <UART_Receive_IT+0x74>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <UART_Receive_IT+0x82>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e008      	b.n	8005b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d15a      	bne.n	8005c0c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0220 	bic.w	r2, r2, #32
 8005b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d135      	bne.n	8005c02 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	613b      	str	r3, [r7, #16]
   return(result);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f023 0310 	bic.w	r3, r3, #16
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	623a      	str	r2, [r7, #32]
 8005bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	69f9      	ldr	r1, [r7, #28]
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d10a      	bne.n	8005bf4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fdfc 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
 8005c00:	e002      	b.n	8005c08 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc fdf4 	bl	80027f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e002      	b.n	8005c12 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3730      	adds	r7, #48	; 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b0c0      	sub	sp, #256	; 0x100
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	68d9      	ldr	r1, [r3, #12]
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	ea40 0301 	orr.w	r3, r0, r1
 8005c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c74:	f021 010c 	bic.w	r1, r1, #12
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c82:	430b      	orrs	r3, r1
 8005c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	6999      	ldr	r1, [r3, #24]
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b8f      	ldr	r3, [pc, #572]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d005      	beq.n	8005cbc <UART_SetConfig+0xa0>
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b8d      	ldr	r3, [pc, #564]	; (8005eec <UART_SetConfig+0x2d0>)
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d104      	bne.n	8005cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7fe f894 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 8005cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cc4:	e003      	b.n	8005cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7fe f87b 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8005cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd8:	f040 810c 	bne.w	8005ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	1891      	adds	r1, r2, r2
 8005cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cfe:	4621      	mov	r1, r4
 8005d00:	eb12 0801 	adds.w	r8, r2, r1
 8005d04:	4629      	mov	r1, r5
 8005d06:	eb43 0901 	adc.w	r9, r3, r1
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1e:	4690      	mov	r8, r2
 8005d20:	4699      	mov	r9, r3
 8005d22:	4623      	mov	r3, r4
 8005d24:	eb18 0303 	adds.w	r3, r8, r3
 8005d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	eb49 0303 	adc.w	r3, r9, r3
 8005d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	18db      	adds	r3, r3, r3
 8005d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d50:	4613      	mov	r3, r2
 8005d52:	eb42 0303 	adc.w	r3, r2, r3
 8005d56:	657b      	str	r3, [r7, #84]	; 0x54
 8005d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d60:	f7fa fd94 	bl	800088c <__aeabi_uldivmod>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	011c      	lsls	r4, r3, #4
 8005d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d84:	4642      	mov	r2, r8
 8005d86:	464b      	mov	r3, r9
 8005d88:	1891      	adds	r1, r2, r2
 8005d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d8c:	415b      	adcs	r3, r3
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d94:	4641      	mov	r1, r8
 8005d96:	eb12 0a01 	adds.w	sl, r2, r1
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db4:	4692      	mov	sl, r2
 8005db6:	469b      	mov	fp, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	eb1a 0303 	adds.w	r3, sl, r3
 8005dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005de0:	460b      	mov	r3, r1
 8005de2:	18db      	adds	r3, r3, r3
 8005de4:	643b      	str	r3, [r7, #64]	; 0x40
 8005de6:	4613      	mov	r3, r2
 8005de8:	eb42 0303 	adc.w	r3, r2, r3
 8005dec:	647b      	str	r3, [r7, #68]	; 0x44
 8005dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005df6:	f7fa fd49 	bl	800088c <__aeabi_uldivmod>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005e02:	fba3 2301 	umull	r2, r3, r3, r1
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2264      	movs	r2, #100	; 0x64
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	1acb      	subs	r3, r1, r3
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005e18:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e24:	441c      	add	r4, r3
 8005e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	1891      	adds	r1, r2, r2
 8005e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e40:	415b      	adcs	r3, r3
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e48:	4641      	mov	r1, r8
 8005e4a:	1851      	adds	r1, r2, r1
 8005e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e4e:	4649      	mov	r1, r9
 8005e50:	414b      	adcs	r3, r1
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e60:	4659      	mov	r1, fp
 8005e62:	00cb      	lsls	r3, r1, #3
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	00ca      	lsls	r2, r1, #3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	4642      	mov	r2, r8
 8005e76:	189b      	adds	r3, r3, r2
 8005e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	460a      	mov	r2, r1
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	18db      	adds	r3, r3, r3
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005eb2:	f7fa fceb 	bl	800088c <__aeabi_uldivmod>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	2164      	movs	r1, #100	; 0x64
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	3332      	adds	r3, #50	; 0x32
 8005ece:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	f003 0207 	and.w	r2, r3, #7
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4422      	add	r2, r4
 8005ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ee4:	e106      	b.n	80060f4 <UART_SetConfig+0x4d8>
 8005ee6:	bf00      	nop
 8005ee8:	40011000 	.word	0x40011000
 8005eec:	40011400 	.word	0x40011400
 8005ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f06:	4642      	mov	r2, r8
 8005f08:	464b      	mov	r3, r9
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	6239      	str	r1, [r7, #32]
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f16:	4641      	mov	r1, r8
 8005f18:	1854      	adds	r4, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0501 	adc.w	r5, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	00eb      	lsls	r3, r5, #3
 8005f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f2e:	00e2      	lsls	r2, r4, #3
 8005f30:	4614      	mov	r4, r2
 8005f32:	461d      	mov	r5, r3
 8005f34:	4643      	mov	r3, r8
 8005f36:	18e3      	adds	r3, r4, r3
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	eb45 0303 	adc.w	r3, r5, r3
 8005f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f62:	4629      	mov	r1, r5
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	4621      	mov	r1, r4
 8005f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	008a      	lsls	r2, r1, #2
 8005f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f74:	f7fa fc8a 	bl	800088c <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4b60      	ldr	r3, [pc, #384]	; (8006100 <UART_SetConfig+0x4e4>)
 8005f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	011c      	lsls	r4, r3, #4
 8005f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f98:	4642      	mov	r2, r8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	61b9      	str	r1, [r7, #24]
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa8:	4641      	mov	r1, r8
 8005faa:	1851      	adds	r1, r2, r1
 8005fac:	6139      	str	r1, [r7, #16]
 8005fae:	4649      	mov	r1, r9
 8005fb0:	414b      	adcs	r3, r1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	00cb      	lsls	r3, r1, #3
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fca:	4651      	mov	r1, sl
 8005fcc:	00ca      	lsls	r2, r1, #3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fdc:	464b      	mov	r3, r9
 8005fde:	460a      	mov	r2, r1
 8005fe0:	eb42 0303 	adc.w	r3, r2, r3
 8005fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006000:	4649      	mov	r1, r9
 8006002:	008b      	lsls	r3, r1, #2
 8006004:	4641      	mov	r1, r8
 8006006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600a:	4641      	mov	r1, r8
 800600c:	008a      	lsls	r2, r1, #2
 800600e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006012:	f7fa fc3b 	bl	800088c <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4611      	mov	r1, r2
 800601c:	4b38      	ldr	r3, [pc, #224]	; (8006100 <UART_SetConfig+0x4e4>)
 800601e:	fba3 2301 	umull	r2, r3, r3, r1
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2264      	movs	r2, #100	; 0x64
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	1acb      	subs	r3, r1, r3
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	3332      	adds	r3, #50	; 0x32
 8006030:	4a33      	ldr	r2, [pc, #204]	; (8006100 <UART_SetConfig+0x4e4>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800603c:	441c      	add	r4, r3
 800603e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006042:	2200      	movs	r2, #0
 8006044:	673b      	str	r3, [r7, #112]	; 0x70
 8006046:	677a      	str	r2, [r7, #116]	; 0x74
 8006048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	1891      	adds	r1, r2, r2
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	415b      	adcs	r3, r3
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800605c:	4641      	mov	r1, r8
 800605e:	1851      	adds	r1, r2, r1
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	4649      	mov	r1, r9
 8006064:	414b      	adcs	r3, r1
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006074:	4659      	mov	r1, fp
 8006076:	00cb      	lsls	r3, r1, #3
 8006078:	4651      	mov	r1, sl
 800607a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607e:	4651      	mov	r1, sl
 8006080:	00ca      	lsls	r2, r1, #3
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	4603      	mov	r3, r0
 8006088:	4642      	mov	r2, r8
 800608a:	189b      	adds	r3, r3, r2
 800608c:	66bb      	str	r3, [r7, #104]	; 0x68
 800608e:	464b      	mov	r3, r9
 8006090:	460a      	mov	r2, r1
 8006092:	eb42 0303 	adc.w	r3, r2, r3
 8006096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	663b      	str	r3, [r7, #96]	; 0x60
 80060a2:	667a      	str	r2, [r7, #100]	; 0x64
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060b0:	4649      	mov	r1, r9
 80060b2:	008b      	lsls	r3, r1, #2
 80060b4:	4641      	mov	r1, r8
 80060b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ba:	4641      	mov	r1, r8
 80060bc:	008a      	lsls	r2, r1, #2
 80060be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060c2:	f7fa fbe3 	bl	800088c <__aeabi_uldivmod>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <UART_SetConfig+0x4e4>)
 80060cc:	fba3 1302 	umull	r1, r3, r3, r2
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	2164      	movs	r1, #100	; 0x64
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	3332      	adds	r3, #50	; 0x32
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <UART_SetConfig+0x4e4>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4422      	add	r2, r4
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060fa:	46bd      	mov	sp, r7
 80060fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006100:	51eb851f 	.word	0x51eb851f

08006104 <__assert_func>:
 8006104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006106:	4614      	mov	r4, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <__assert_func+0x2c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4605      	mov	r5, r0
 8006110:	68d8      	ldr	r0, [r3, #12]
 8006112:	b14c      	cbz	r4, 8006128 <__assert_func+0x24>
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <__assert_func+0x30>)
 8006116:	9100      	str	r1, [sp, #0]
 8006118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800611c:	4906      	ldr	r1, [pc, #24]	; (8006138 <__assert_func+0x34>)
 800611e:	462b      	mov	r3, r5
 8006120:	f000 f95e 	bl	80063e0 <fiprintf>
 8006124:	f000 fafd 	bl	8006722 <abort>
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <__assert_func+0x38>)
 800612a:	461c      	mov	r4, r3
 800612c:	e7f3      	b.n	8006116 <__assert_func+0x12>
 800612e:	bf00      	nop
 8006130:	200000ec 	.word	0x200000ec
 8006134:	080073ec 	.word	0x080073ec
 8006138:	080073f9 	.word	0x080073f9
 800613c:	08007427 	.word	0x08007427

08006140 <sbrk_aligned>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	4e0e      	ldr	r6, [pc, #56]	; (800617c <sbrk_aligned+0x3c>)
 8006144:	460c      	mov	r4, r1
 8006146:	6831      	ldr	r1, [r6, #0]
 8006148:	4605      	mov	r5, r0
 800614a:	b911      	cbnz	r1, 8006152 <sbrk_aligned+0x12>
 800614c:	f000 fa8c 	bl	8006668 <_sbrk_r>
 8006150:	6030      	str	r0, [r6, #0]
 8006152:	4621      	mov	r1, r4
 8006154:	4628      	mov	r0, r5
 8006156:	f000 fa87 	bl	8006668 <_sbrk_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d00a      	beq.n	8006174 <sbrk_aligned+0x34>
 800615e:	1cc4      	adds	r4, r0, #3
 8006160:	f024 0403 	bic.w	r4, r4, #3
 8006164:	42a0      	cmp	r0, r4
 8006166:	d007      	beq.n	8006178 <sbrk_aligned+0x38>
 8006168:	1a21      	subs	r1, r4, r0
 800616a:	4628      	mov	r0, r5
 800616c:	f000 fa7c 	bl	8006668 <_sbrk_r>
 8006170:	3001      	adds	r0, #1
 8006172:	d101      	bne.n	8006178 <sbrk_aligned+0x38>
 8006174:	f04f 34ff 	mov.w	r4, #4294967295
 8006178:	4620      	mov	r0, r4
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	200003ac 	.word	0x200003ac

08006180 <_malloc_r>:
 8006180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006184:	1ccd      	adds	r5, r1, #3
 8006186:	f025 0503 	bic.w	r5, r5, #3
 800618a:	3508      	adds	r5, #8
 800618c:	2d0c      	cmp	r5, #12
 800618e:	bf38      	it	cc
 8006190:	250c      	movcc	r5, #12
 8006192:	2d00      	cmp	r5, #0
 8006194:	4607      	mov	r7, r0
 8006196:	db01      	blt.n	800619c <_malloc_r+0x1c>
 8006198:	42a9      	cmp	r1, r5
 800619a:	d905      	bls.n	80061a8 <_malloc_r+0x28>
 800619c:	230c      	movs	r3, #12
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	2600      	movs	r6, #0
 80061a2:	4630      	mov	r0, r6
 80061a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800627c <_malloc_r+0xfc>
 80061ac:	f000 f868 	bl	8006280 <__malloc_lock>
 80061b0:	f8d8 3000 	ldr.w	r3, [r8]
 80061b4:	461c      	mov	r4, r3
 80061b6:	bb5c      	cbnz	r4, 8006210 <_malloc_r+0x90>
 80061b8:	4629      	mov	r1, r5
 80061ba:	4638      	mov	r0, r7
 80061bc:	f7ff ffc0 	bl	8006140 <sbrk_aligned>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	4604      	mov	r4, r0
 80061c4:	d155      	bne.n	8006272 <_malloc_r+0xf2>
 80061c6:	f8d8 4000 	ldr.w	r4, [r8]
 80061ca:	4626      	mov	r6, r4
 80061cc:	2e00      	cmp	r6, #0
 80061ce:	d145      	bne.n	800625c <_malloc_r+0xdc>
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	d048      	beq.n	8006266 <_malloc_r+0xe6>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	4631      	mov	r1, r6
 80061d8:	4638      	mov	r0, r7
 80061da:	eb04 0903 	add.w	r9, r4, r3
 80061de:	f000 fa43 	bl	8006668 <_sbrk_r>
 80061e2:	4581      	cmp	r9, r0
 80061e4:	d13f      	bne.n	8006266 <_malloc_r+0xe6>
 80061e6:	6821      	ldr	r1, [r4, #0]
 80061e8:	1a6d      	subs	r5, r5, r1
 80061ea:	4629      	mov	r1, r5
 80061ec:	4638      	mov	r0, r7
 80061ee:	f7ff ffa7 	bl	8006140 <sbrk_aligned>
 80061f2:	3001      	adds	r0, #1
 80061f4:	d037      	beq.n	8006266 <_malloc_r+0xe6>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	442b      	add	r3, r5
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d038      	beq.n	8006276 <_malloc_r+0xf6>
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	42a2      	cmp	r2, r4
 8006208:	d12b      	bne.n	8006262 <_malloc_r+0xe2>
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e00f      	b.n	8006230 <_malloc_r+0xb0>
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	1b52      	subs	r2, r2, r5
 8006214:	d41f      	bmi.n	8006256 <_malloc_r+0xd6>
 8006216:	2a0b      	cmp	r2, #11
 8006218:	d917      	bls.n	800624a <_malloc_r+0xca>
 800621a:	1961      	adds	r1, r4, r5
 800621c:	42a3      	cmp	r3, r4
 800621e:	6025      	str	r5, [r4, #0]
 8006220:	bf18      	it	ne
 8006222:	6059      	strne	r1, [r3, #4]
 8006224:	6863      	ldr	r3, [r4, #4]
 8006226:	bf08      	it	eq
 8006228:	f8c8 1000 	streq.w	r1, [r8]
 800622c:	5162      	str	r2, [r4, r5]
 800622e:	604b      	str	r3, [r1, #4]
 8006230:	4638      	mov	r0, r7
 8006232:	f104 060b 	add.w	r6, r4, #11
 8006236:	f000 f829 	bl	800628c <__malloc_unlock>
 800623a:	f026 0607 	bic.w	r6, r6, #7
 800623e:	1d23      	adds	r3, r4, #4
 8006240:	1af2      	subs	r2, r6, r3
 8006242:	d0ae      	beq.n	80061a2 <_malloc_r+0x22>
 8006244:	1b9b      	subs	r3, r3, r6
 8006246:	50a3      	str	r3, [r4, r2]
 8006248:	e7ab      	b.n	80061a2 <_malloc_r+0x22>
 800624a:	42a3      	cmp	r3, r4
 800624c:	6862      	ldr	r2, [r4, #4]
 800624e:	d1dd      	bne.n	800620c <_malloc_r+0x8c>
 8006250:	f8c8 2000 	str.w	r2, [r8]
 8006254:	e7ec      	b.n	8006230 <_malloc_r+0xb0>
 8006256:	4623      	mov	r3, r4
 8006258:	6864      	ldr	r4, [r4, #4]
 800625a:	e7ac      	b.n	80061b6 <_malloc_r+0x36>
 800625c:	4634      	mov	r4, r6
 800625e:	6876      	ldr	r6, [r6, #4]
 8006260:	e7b4      	b.n	80061cc <_malloc_r+0x4c>
 8006262:	4613      	mov	r3, r2
 8006264:	e7cc      	b.n	8006200 <_malloc_r+0x80>
 8006266:	230c      	movs	r3, #12
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4638      	mov	r0, r7
 800626c:	f000 f80e 	bl	800628c <__malloc_unlock>
 8006270:	e797      	b.n	80061a2 <_malloc_r+0x22>
 8006272:	6025      	str	r5, [r4, #0]
 8006274:	e7dc      	b.n	8006230 <_malloc_r+0xb0>
 8006276:	605b      	str	r3, [r3, #4]
 8006278:	deff      	udf	#255	; 0xff
 800627a:	bf00      	nop
 800627c:	200003a8 	.word	0x200003a8

08006280 <__malloc_lock>:
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <__malloc_lock+0x8>)
 8006282:	f000 ba3e 	b.w	8006702 <__retarget_lock_acquire_recursive>
 8006286:	bf00      	nop
 8006288:	200004f0 	.word	0x200004f0

0800628c <__malloc_unlock>:
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <__malloc_unlock+0x8>)
 800628e:	f000 ba39 	b.w	8006704 <__retarget_lock_release_recursive>
 8006292:	bf00      	nop
 8006294:	200004f0 	.word	0x200004f0

08006298 <std>:
 8006298:	2300      	movs	r3, #0
 800629a:	b510      	push	{r4, lr}
 800629c:	4604      	mov	r4, r0
 800629e:	e9c0 3300 	strd	r3, r3, [r0]
 80062a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062a6:	6083      	str	r3, [r0, #8]
 80062a8:	8181      	strh	r1, [r0, #12]
 80062aa:	6643      	str	r3, [r0, #100]	; 0x64
 80062ac:	81c2      	strh	r2, [r0, #14]
 80062ae:	6183      	str	r3, [r0, #24]
 80062b0:	4619      	mov	r1, r3
 80062b2:	2208      	movs	r2, #8
 80062b4:	305c      	adds	r0, #92	; 0x5c
 80062b6:	f000 f99b 	bl	80065f0 <memset>
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <std+0x58>)
 80062bc:	6263      	str	r3, [r4, #36]	; 0x24
 80062be:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <std+0x5c>)
 80062c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <std+0x60>)
 80062c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <std+0x64>)
 80062c8:	6323      	str	r3, [r4, #48]	; 0x30
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <std+0x68>)
 80062cc:	6224      	str	r4, [r4, #32]
 80062ce:	429c      	cmp	r4, r3
 80062d0:	d006      	beq.n	80062e0 <std+0x48>
 80062d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80062d6:	4294      	cmp	r4, r2
 80062d8:	d002      	beq.n	80062e0 <std+0x48>
 80062da:	33d0      	adds	r3, #208	; 0xd0
 80062dc:	429c      	cmp	r4, r3
 80062de:	d105      	bne.n	80062ec <std+0x54>
 80062e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f000 ba0a 	b.w	8006700 <__retarget_lock_init_recursive>
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	08006441 	.word	0x08006441
 80062f4:	08006463 	.word	0x08006463
 80062f8:	0800649b 	.word	0x0800649b
 80062fc:	080064bf 	.word	0x080064bf
 8006300:	200003b0 	.word	0x200003b0

08006304 <stdio_exit_handler>:
 8006304:	4a02      	ldr	r2, [pc, #8]	; (8006310 <stdio_exit_handler+0xc>)
 8006306:	4903      	ldr	r1, [pc, #12]	; (8006314 <stdio_exit_handler+0x10>)
 8006308:	4803      	ldr	r0, [pc, #12]	; (8006318 <stdio_exit_handler+0x14>)
 800630a:	f000 b87b 	b.w	8006404 <_fwalk_sglue>
 800630e:	bf00      	nop
 8006310:	20000094 	.word	0x20000094
 8006314:	08006e7d 	.word	0x08006e7d
 8006318:	200000a0 	.word	0x200000a0

0800631c <cleanup_stdio>:
 800631c:	6841      	ldr	r1, [r0, #4]
 800631e:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <cleanup_stdio+0x34>)
 8006320:	4299      	cmp	r1, r3
 8006322:	b510      	push	{r4, lr}
 8006324:	4604      	mov	r4, r0
 8006326:	d001      	beq.n	800632c <cleanup_stdio+0x10>
 8006328:	f000 fda8 	bl	8006e7c <_fflush_r>
 800632c:	68a1      	ldr	r1, [r4, #8]
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <cleanup_stdio+0x38>)
 8006330:	4299      	cmp	r1, r3
 8006332:	d002      	beq.n	800633a <cleanup_stdio+0x1e>
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fda1 	bl	8006e7c <_fflush_r>
 800633a:	68e1      	ldr	r1, [r4, #12]
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <cleanup_stdio+0x3c>)
 800633e:	4299      	cmp	r1, r3
 8006340:	d004      	beq.n	800634c <cleanup_stdio+0x30>
 8006342:	4620      	mov	r0, r4
 8006344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006348:	f000 bd98 	b.w	8006e7c <_fflush_r>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	bf00      	nop
 8006350:	200003b0 	.word	0x200003b0
 8006354:	20000418 	.word	0x20000418
 8006358:	20000480 	.word	0x20000480

0800635c <global_stdio_init.part.0>:
 800635c:	b510      	push	{r4, lr}
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <global_stdio_init.part.0+0x30>)
 8006360:	4c0b      	ldr	r4, [pc, #44]	; (8006390 <global_stdio_init.part.0+0x34>)
 8006362:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <global_stdio_init.part.0+0x38>)
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	4620      	mov	r0, r4
 8006368:	2200      	movs	r2, #0
 800636a:	2104      	movs	r1, #4
 800636c:	f7ff ff94 	bl	8006298 <std>
 8006370:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006374:	2201      	movs	r2, #1
 8006376:	2109      	movs	r1, #9
 8006378:	f7ff ff8e 	bl	8006298 <std>
 800637c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006380:	2202      	movs	r2, #2
 8006382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006386:	2112      	movs	r1, #18
 8006388:	f7ff bf86 	b.w	8006298 <std>
 800638c:	200004e8 	.word	0x200004e8
 8006390:	200003b0 	.word	0x200003b0
 8006394:	08006305 	.word	0x08006305

08006398 <__sfp_lock_acquire>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__sfp_lock_acquire+0x8>)
 800639a:	f000 b9b2 	b.w	8006702 <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	200004f1 	.word	0x200004f1

080063a4 <__sfp_lock_release>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__sfp_lock_release+0x8>)
 80063a6:	f000 b9ad 	b.w	8006704 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	200004f1 	.word	0x200004f1

080063b0 <__sinit>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	f7ff fff0 	bl	8006398 <__sfp_lock_acquire>
 80063b8:	6a23      	ldr	r3, [r4, #32]
 80063ba:	b11b      	cbz	r3, 80063c4 <__sinit+0x14>
 80063bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c0:	f7ff bff0 	b.w	80063a4 <__sfp_lock_release>
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <__sinit+0x28>)
 80063c6:	6223      	str	r3, [r4, #32]
 80063c8:	4b04      	ldr	r3, [pc, #16]	; (80063dc <__sinit+0x2c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f5      	bne.n	80063bc <__sinit+0xc>
 80063d0:	f7ff ffc4 	bl	800635c <global_stdio_init.part.0>
 80063d4:	e7f2      	b.n	80063bc <__sinit+0xc>
 80063d6:	bf00      	nop
 80063d8:	0800631d 	.word	0x0800631d
 80063dc:	200004e8 	.word	0x200004e8

080063e0 <fiprintf>:
 80063e0:	b40e      	push	{r1, r2, r3}
 80063e2:	b503      	push	{r0, r1, lr}
 80063e4:	4601      	mov	r1, r0
 80063e6:	ab03      	add	r3, sp, #12
 80063e8:	4805      	ldr	r0, [pc, #20]	; (8006400 <fiprintf+0x20>)
 80063ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ee:	6800      	ldr	r0, [r0, #0]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	f000 fa13 	bl	800681c <_vfiprintf_r>
 80063f6:	b002      	add	sp, #8
 80063f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063fc:	b003      	add	sp, #12
 80063fe:	4770      	bx	lr
 8006400:	200000ec 	.word	0x200000ec

08006404 <_fwalk_sglue>:
 8006404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006408:	4607      	mov	r7, r0
 800640a:	4688      	mov	r8, r1
 800640c:	4614      	mov	r4, r2
 800640e:	2600      	movs	r6, #0
 8006410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006414:	f1b9 0901 	subs.w	r9, r9, #1
 8006418:	d505      	bpl.n	8006426 <_fwalk_sglue+0x22>
 800641a:	6824      	ldr	r4, [r4, #0]
 800641c:	2c00      	cmp	r4, #0
 800641e:	d1f7      	bne.n	8006410 <_fwalk_sglue+0xc>
 8006420:	4630      	mov	r0, r6
 8006422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d907      	bls.n	800643c <_fwalk_sglue+0x38>
 800642c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006430:	3301      	adds	r3, #1
 8006432:	d003      	beq.n	800643c <_fwalk_sglue+0x38>
 8006434:	4629      	mov	r1, r5
 8006436:	4638      	mov	r0, r7
 8006438:	47c0      	blx	r8
 800643a:	4306      	orrs	r6, r0
 800643c:	3568      	adds	r5, #104	; 0x68
 800643e:	e7e9      	b.n	8006414 <_fwalk_sglue+0x10>

08006440 <__sread>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	f000 f8fc 	bl	8006644 <_read_r>
 800644c:	2800      	cmp	r0, #0
 800644e:	bfab      	itete	ge
 8006450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006452:	89a3      	ldrhlt	r3, [r4, #12]
 8006454:	181b      	addge	r3, r3, r0
 8006456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800645a:	bfac      	ite	ge
 800645c:	6563      	strge	r3, [r4, #84]	; 0x54
 800645e:	81a3      	strhlt	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__swrite>:
 8006462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	461f      	mov	r7, r3
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4616      	mov	r6, r2
 8006472:	d505      	bpl.n	8006480 <__swrite+0x1e>
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	2302      	movs	r3, #2
 800647a:	2200      	movs	r2, #0
 800647c:	f000 f8d0 	bl	8006620 <_lseek_r>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	4628      	mov	r0, r5
 8006492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	f000 b8f7 	b.w	8006688 <_write_r>

0800649a <__sseek>:
 800649a:	b510      	push	{r4, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 f8bd 	bl	8006620 <_lseek_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	bf15      	itete	ne
 80064ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064b6:	81a3      	strheq	r3, [r4, #12]
 80064b8:	bf18      	it	ne
 80064ba:	81a3      	strhne	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__sclose>:
 80064be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c2:	f000 b89d 	b.w	8006600 <_close_r>

080064c6 <__swbuf_r>:
 80064c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c8:	460e      	mov	r6, r1
 80064ca:	4614      	mov	r4, r2
 80064cc:	4605      	mov	r5, r0
 80064ce:	b118      	cbz	r0, 80064d8 <__swbuf_r+0x12>
 80064d0:	6a03      	ldr	r3, [r0, #32]
 80064d2:	b90b      	cbnz	r3, 80064d8 <__swbuf_r+0x12>
 80064d4:	f7ff ff6c 	bl	80063b0 <__sinit>
 80064d8:	69a3      	ldr	r3, [r4, #24]
 80064da:	60a3      	str	r3, [r4, #8]
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	071a      	lsls	r2, r3, #28
 80064e0:	d525      	bpl.n	800652e <__swbuf_r+0x68>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	b31b      	cbz	r3, 800652e <__swbuf_r+0x68>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	6922      	ldr	r2, [r4, #16]
 80064ea:	1a98      	subs	r0, r3, r2
 80064ec:	6963      	ldr	r3, [r4, #20]
 80064ee:	b2f6      	uxtb	r6, r6
 80064f0:	4283      	cmp	r3, r0
 80064f2:	4637      	mov	r7, r6
 80064f4:	dc04      	bgt.n	8006500 <__swbuf_r+0x3a>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 fcbf 	bl	8006e7c <_fflush_r>
 80064fe:	b9e0      	cbnz	r0, 800653a <__swbuf_r+0x74>
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	60a3      	str	r3, [r4, #8]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	6022      	str	r2, [r4, #0]
 800650c:	701e      	strb	r6, [r3, #0]
 800650e:	6962      	ldr	r2, [r4, #20]
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	429a      	cmp	r2, r3
 8006514:	d004      	beq.n	8006520 <__swbuf_r+0x5a>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	07db      	lsls	r3, r3, #31
 800651a:	d506      	bpl.n	800652a <__swbuf_r+0x64>
 800651c:	2e0a      	cmp	r6, #10
 800651e:	d104      	bne.n	800652a <__swbuf_r+0x64>
 8006520:	4621      	mov	r1, r4
 8006522:	4628      	mov	r0, r5
 8006524:	f000 fcaa 	bl	8006e7c <_fflush_r>
 8006528:	b938      	cbnz	r0, 800653a <__swbuf_r+0x74>
 800652a:	4638      	mov	r0, r7
 800652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652e:	4621      	mov	r1, r4
 8006530:	4628      	mov	r0, r5
 8006532:	f000 f805 	bl	8006540 <__swsetup_r>
 8006536:	2800      	cmp	r0, #0
 8006538:	d0d5      	beq.n	80064e6 <__swbuf_r+0x20>
 800653a:	f04f 37ff 	mov.w	r7, #4294967295
 800653e:	e7f4      	b.n	800652a <__swbuf_r+0x64>

08006540 <__swsetup_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <__swsetup_r+0xac>)
 8006544:	4605      	mov	r5, r0
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	460c      	mov	r4, r1
 800654a:	b118      	cbz	r0, 8006554 <__swsetup_r+0x14>
 800654c:	6a03      	ldr	r3, [r0, #32]
 800654e:	b90b      	cbnz	r3, 8006554 <__swsetup_r+0x14>
 8006550:	f7ff ff2e 	bl	80063b0 <__sinit>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800655a:	0718      	lsls	r0, r3, #28
 800655c:	d422      	bmi.n	80065a4 <__swsetup_r+0x64>
 800655e:	06d9      	lsls	r1, r3, #27
 8006560:	d407      	bmi.n	8006572 <__swsetup_r+0x32>
 8006562:	2309      	movs	r3, #9
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	e034      	b.n	80065dc <__swsetup_r+0x9c>
 8006572:	0758      	lsls	r0, r3, #29
 8006574:	d512      	bpl.n	800659c <__swsetup_r+0x5c>
 8006576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006578:	b141      	cbz	r1, 800658c <__swsetup_r+0x4c>
 800657a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800657e:	4299      	cmp	r1, r3
 8006580:	d002      	beq.n	8006588 <__swsetup_r+0x48>
 8006582:	4628      	mov	r0, r5
 8006584:	f000 f8d4 	bl	8006730 <_free_r>
 8006588:	2300      	movs	r3, #0
 800658a:	6363      	str	r3, [r4, #52]	; 0x34
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	2300      	movs	r3, #0
 8006596:	6063      	str	r3, [r4, #4]
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f043 0308 	orr.w	r3, r3, #8
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	b94b      	cbnz	r3, 80065bc <__swsetup_r+0x7c>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b2:	d003      	beq.n	80065bc <__swsetup_r+0x7c>
 80065b4:	4621      	mov	r1, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 fcae 	bl	8006f18 <__smakebuf_r>
 80065bc:	89a0      	ldrh	r0, [r4, #12]
 80065be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065c2:	f010 0301 	ands.w	r3, r0, #1
 80065c6:	d00a      	beq.n	80065de <__swsetup_r+0x9e>
 80065c8:	2300      	movs	r3, #0
 80065ca:	60a3      	str	r3, [r4, #8]
 80065cc:	6963      	ldr	r3, [r4, #20]
 80065ce:	425b      	negs	r3, r3
 80065d0:	61a3      	str	r3, [r4, #24]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	b943      	cbnz	r3, 80065e8 <__swsetup_r+0xa8>
 80065d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065da:	d1c4      	bne.n	8006566 <__swsetup_r+0x26>
 80065dc:	bd38      	pop	{r3, r4, r5, pc}
 80065de:	0781      	lsls	r1, r0, #30
 80065e0:	bf58      	it	pl
 80065e2:	6963      	ldrpl	r3, [r4, #20]
 80065e4:	60a3      	str	r3, [r4, #8]
 80065e6:	e7f4      	b.n	80065d2 <__swsetup_r+0x92>
 80065e8:	2000      	movs	r0, #0
 80065ea:	e7f7      	b.n	80065dc <__swsetup_r+0x9c>
 80065ec:	200000ec 	.word	0x200000ec

080065f0 <memset>:
 80065f0:	4402      	add	r2, r0
 80065f2:	4603      	mov	r3, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d100      	bne.n	80065fa <memset+0xa>
 80065f8:	4770      	bx	lr
 80065fa:	f803 1b01 	strb.w	r1, [r3], #1
 80065fe:	e7f9      	b.n	80065f4 <memset+0x4>

08006600 <_close_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	; (800661c <_close_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fc fb35 	bl	8002c7a <_close>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_close_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_close_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	200004ec 	.word	0x200004ec

08006620 <_lseek_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4d07      	ldr	r5, [pc, #28]	; (8006640 <_lseek_r+0x20>)
 8006624:	4604      	mov	r4, r0
 8006626:	4608      	mov	r0, r1
 8006628:	4611      	mov	r1, r2
 800662a:	2200      	movs	r2, #0
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f7fc fb4a 	bl	8002cc8 <_lseek>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_lseek_r+0x1e>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_lseek_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	200004ec 	.word	0x200004ec

08006644 <_read_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4d07      	ldr	r5, [pc, #28]	; (8006664 <_read_r+0x20>)
 8006648:	4604      	mov	r4, r0
 800664a:	4608      	mov	r0, r1
 800664c:	4611      	mov	r1, r2
 800664e:	2200      	movs	r2, #0
 8006650:	602a      	str	r2, [r5, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f7fc fad8 	bl	8002c08 <_read>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_read_r+0x1e>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_read_r+0x1e>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200004ec 	.word	0x200004ec

08006668 <_sbrk_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_sbrk_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fc fb36 	bl	8002ce4 <_sbrk>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_sbrk_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_sbrk_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200004ec 	.word	0x200004ec

08006688 <_write_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d07      	ldr	r5, [pc, #28]	; (80066a8 <_write_r+0x20>)
 800668c:	4604      	mov	r4, r0
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	2200      	movs	r2, #0
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fc fad3 	bl	8002c42 <_write>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_write_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_write_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	200004ec 	.word	0x200004ec

080066ac <__errno>:
 80066ac:	4b01      	ldr	r3, [pc, #4]	; (80066b4 <__errno+0x8>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	200000ec 	.word	0x200000ec

080066b8 <__libc_init_array>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	4d0d      	ldr	r5, [pc, #52]	; (80066f0 <__libc_init_array+0x38>)
 80066bc:	4c0d      	ldr	r4, [pc, #52]	; (80066f4 <__libc_init_array+0x3c>)
 80066be:	1b64      	subs	r4, r4, r5
 80066c0:	10a4      	asrs	r4, r4, #2
 80066c2:	2600      	movs	r6, #0
 80066c4:	42a6      	cmp	r6, r4
 80066c6:	d109      	bne.n	80066dc <__libc_init_array+0x24>
 80066c8:	4d0b      	ldr	r5, [pc, #44]	; (80066f8 <__libc_init_array+0x40>)
 80066ca:	4c0c      	ldr	r4, [pc, #48]	; (80066fc <__libc_init_array+0x44>)
 80066cc:	f000 fcc6 	bl	800705c <_init>
 80066d0:	1b64      	subs	r4, r4, r5
 80066d2:	10a4      	asrs	r4, r4, #2
 80066d4:	2600      	movs	r6, #0
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	d105      	bne.n	80066e6 <__libc_init_array+0x2e>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e0:	4798      	blx	r3
 80066e2:	3601      	adds	r6, #1
 80066e4:	e7ee      	b.n	80066c4 <__libc_init_array+0xc>
 80066e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ea:	4798      	blx	r3
 80066ec:	3601      	adds	r6, #1
 80066ee:	e7f2      	b.n	80066d6 <__libc_init_array+0x1e>
 80066f0:	08007464 	.word	0x08007464
 80066f4:	08007464 	.word	0x08007464
 80066f8:	08007464 	.word	0x08007464
 80066fc:	08007468 	.word	0x08007468

08006700 <__retarget_lock_init_recursive>:
 8006700:	4770      	bx	lr

08006702 <__retarget_lock_acquire_recursive>:
 8006702:	4770      	bx	lr

08006704 <__retarget_lock_release_recursive>:
 8006704:	4770      	bx	lr

08006706 <memcpy>:
 8006706:	440a      	add	r2, r1
 8006708:	4291      	cmp	r1, r2
 800670a:	f100 33ff 	add.w	r3, r0, #4294967295
 800670e:	d100      	bne.n	8006712 <memcpy+0xc>
 8006710:	4770      	bx	lr
 8006712:	b510      	push	{r4, lr}
 8006714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800671c:	4291      	cmp	r1, r2
 800671e:	d1f9      	bne.n	8006714 <memcpy+0xe>
 8006720:	bd10      	pop	{r4, pc}

08006722 <abort>:
 8006722:	b508      	push	{r3, lr}
 8006724:	2006      	movs	r0, #6
 8006726:	f000 fc5b 	bl	8006fe0 <raise>
 800672a:	2001      	movs	r0, #1
 800672c:	f7fc fa62 	bl	8002bf4 <_exit>

08006730 <_free_r>:
 8006730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006732:	2900      	cmp	r1, #0
 8006734:	d044      	beq.n	80067c0 <_free_r+0x90>
 8006736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673a:	9001      	str	r0, [sp, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f1a1 0404 	sub.w	r4, r1, #4
 8006742:	bfb8      	it	lt
 8006744:	18e4      	addlt	r4, r4, r3
 8006746:	f7ff fd9b 	bl	8006280 <__malloc_lock>
 800674a:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <_free_r+0x94>)
 800674c:	9801      	ldr	r0, [sp, #4]
 800674e:	6813      	ldr	r3, [r2, #0]
 8006750:	b933      	cbnz	r3, 8006760 <_free_r+0x30>
 8006752:	6063      	str	r3, [r4, #4]
 8006754:	6014      	str	r4, [r2, #0]
 8006756:	b003      	add	sp, #12
 8006758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800675c:	f7ff bd96 	b.w	800628c <__malloc_unlock>
 8006760:	42a3      	cmp	r3, r4
 8006762:	d908      	bls.n	8006776 <_free_r+0x46>
 8006764:	6825      	ldr	r5, [r4, #0]
 8006766:	1961      	adds	r1, r4, r5
 8006768:	428b      	cmp	r3, r1
 800676a:	bf01      	itttt	eq
 800676c:	6819      	ldreq	r1, [r3, #0]
 800676e:	685b      	ldreq	r3, [r3, #4]
 8006770:	1949      	addeq	r1, r1, r5
 8006772:	6021      	streq	r1, [r4, #0]
 8006774:	e7ed      	b.n	8006752 <_free_r+0x22>
 8006776:	461a      	mov	r2, r3
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	b10b      	cbz	r3, 8006780 <_free_r+0x50>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d9fa      	bls.n	8006776 <_free_r+0x46>
 8006780:	6811      	ldr	r1, [r2, #0]
 8006782:	1855      	adds	r5, r2, r1
 8006784:	42a5      	cmp	r5, r4
 8006786:	d10b      	bne.n	80067a0 <_free_r+0x70>
 8006788:	6824      	ldr	r4, [r4, #0]
 800678a:	4421      	add	r1, r4
 800678c:	1854      	adds	r4, r2, r1
 800678e:	42a3      	cmp	r3, r4
 8006790:	6011      	str	r1, [r2, #0]
 8006792:	d1e0      	bne.n	8006756 <_free_r+0x26>
 8006794:	681c      	ldr	r4, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	6053      	str	r3, [r2, #4]
 800679a:	440c      	add	r4, r1
 800679c:	6014      	str	r4, [r2, #0]
 800679e:	e7da      	b.n	8006756 <_free_r+0x26>
 80067a0:	d902      	bls.n	80067a8 <_free_r+0x78>
 80067a2:	230c      	movs	r3, #12
 80067a4:	6003      	str	r3, [r0, #0]
 80067a6:	e7d6      	b.n	8006756 <_free_r+0x26>
 80067a8:	6825      	ldr	r5, [r4, #0]
 80067aa:	1961      	adds	r1, r4, r5
 80067ac:	428b      	cmp	r3, r1
 80067ae:	bf04      	itt	eq
 80067b0:	6819      	ldreq	r1, [r3, #0]
 80067b2:	685b      	ldreq	r3, [r3, #4]
 80067b4:	6063      	str	r3, [r4, #4]
 80067b6:	bf04      	itt	eq
 80067b8:	1949      	addeq	r1, r1, r5
 80067ba:	6021      	streq	r1, [r4, #0]
 80067bc:	6054      	str	r4, [r2, #4]
 80067be:	e7ca      	b.n	8006756 <_free_r+0x26>
 80067c0:	b003      	add	sp, #12
 80067c2:	bd30      	pop	{r4, r5, pc}
 80067c4:	200003a8 	.word	0x200003a8

080067c8 <__sfputc_r>:
 80067c8:	6893      	ldr	r3, [r2, #8]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	b410      	push	{r4}
 80067d0:	6093      	str	r3, [r2, #8]
 80067d2:	da08      	bge.n	80067e6 <__sfputc_r+0x1e>
 80067d4:	6994      	ldr	r4, [r2, #24]
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	db01      	blt.n	80067de <__sfputc_r+0x16>
 80067da:	290a      	cmp	r1, #10
 80067dc:	d103      	bne.n	80067e6 <__sfputc_r+0x1e>
 80067de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e2:	f7ff be70 	b.w	80064c6 <__swbuf_r>
 80067e6:	6813      	ldr	r3, [r2, #0]
 80067e8:	1c58      	adds	r0, r3, #1
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	7019      	strb	r1, [r3, #0]
 80067ee:	4608      	mov	r0, r1
 80067f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <__sfputs_r>:
 80067f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f8:	4606      	mov	r6, r0
 80067fa:	460f      	mov	r7, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	18d5      	adds	r5, r2, r3
 8006800:	42ac      	cmp	r4, r5
 8006802:	d101      	bne.n	8006808 <__sfputs_r+0x12>
 8006804:	2000      	movs	r0, #0
 8006806:	e007      	b.n	8006818 <__sfputs_r+0x22>
 8006808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800680c:	463a      	mov	r2, r7
 800680e:	4630      	mov	r0, r6
 8006810:	f7ff ffda 	bl	80067c8 <__sfputc_r>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d1f3      	bne.n	8006800 <__sfputs_r+0xa>
 8006818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800681c <_vfiprintf_r>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	460d      	mov	r5, r1
 8006822:	b09d      	sub	sp, #116	; 0x74
 8006824:	4614      	mov	r4, r2
 8006826:	4698      	mov	r8, r3
 8006828:	4606      	mov	r6, r0
 800682a:	b118      	cbz	r0, 8006834 <_vfiprintf_r+0x18>
 800682c:	6a03      	ldr	r3, [r0, #32]
 800682e:	b90b      	cbnz	r3, 8006834 <_vfiprintf_r+0x18>
 8006830:	f7ff fdbe 	bl	80063b0 <__sinit>
 8006834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006836:	07d9      	lsls	r1, r3, #31
 8006838:	d405      	bmi.n	8006846 <_vfiprintf_r+0x2a>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	059a      	lsls	r2, r3, #22
 800683e:	d402      	bmi.n	8006846 <_vfiprintf_r+0x2a>
 8006840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006842:	f7ff ff5e 	bl	8006702 <__retarget_lock_acquire_recursive>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	071b      	lsls	r3, r3, #28
 800684a:	d501      	bpl.n	8006850 <_vfiprintf_r+0x34>
 800684c:	692b      	ldr	r3, [r5, #16]
 800684e:	b99b      	cbnz	r3, 8006878 <_vfiprintf_r+0x5c>
 8006850:	4629      	mov	r1, r5
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff fe74 	bl	8006540 <__swsetup_r>
 8006858:	b170      	cbz	r0, 8006878 <_vfiprintf_r+0x5c>
 800685a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800685c:	07dc      	lsls	r4, r3, #31
 800685e:	d504      	bpl.n	800686a <_vfiprintf_r+0x4e>
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	b01d      	add	sp, #116	; 0x74
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	0598      	lsls	r0, r3, #22
 800686e:	d4f7      	bmi.n	8006860 <_vfiprintf_r+0x44>
 8006870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006872:	f7ff ff47 	bl	8006704 <__retarget_lock_release_recursive>
 8006876:	e7f3      	b.n	8006860 <_vfiprintf_r+0x44>
 8006878:	2300      	movs	r3, #0
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	2320      	movs	r3, #32
 800687e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006882:	f8cd 800c 	str.w	r8, [sp, #12]
 8006886:	2330      	movs	r3, #48	; 0x30
 8006888:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a3c <_vfiprintf_r+0x220>
 800688c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006890:	f04f 0901 	mov.w	r9, #1
 8006894:	4623      	mov	r3, r4
 8006896:	469a      	mov	sl, r3
 8006898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689c:	b10a      	cbz	r2, 80068a2 <_vfiprintf_r+0x86>
 800689e:	2a25      	cmp	r2, #37	; 0x25
 80068a0:	d1f9      	bne.n	8006896 <_vfiprintf_r+0x7a>
 80068a2:	ebba 0b04 	subs.w	fp, sl, r4
 80068a6:	d00b      	beq.n	80068c0 <_vfiprintf_r+0xa4>
 80068a8:	465b      	mov	r3, fp
 80068aa:	4622      	mov	r2, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ffa1 	bl	80067f6 <__sfputs_r>
 80068b4:	3001      	adds	r0, #1
 80068b6:	f000 80a9 	beq.w	8006a0c <_vfiprintf_r+0x1f0>
 80068ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068bc:	445a      	add	r2, fp
 80068be:	9209      	str	r2, [sp, #36]	; 0x24
 80068c0:	f89a 3000 	ldrb.w	r3, [sl]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80a1 	beq.w	8006a0c <_vfiprintf_r+0x1f0>
 80068ca:	2300      	movs	r3, #0
 80068cc:	f04f 32ff 	mov.w	r2, #4294967295
 80068d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d4:	f10a 0a01 	add.w	sl, sl, #1
 80068d8:	9304      	str	r3, [sp, #16]
 80068da:	9307      	str	r3, [sp, #28]
 80068dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068e0:	931a      	str	r3, [sp, #104]	; 0x68
 80068e2:	4654      	mov	r4, sl
 80068e4:	2205      	movs	r2, #5
 80068e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ea:	4854      	ldr	r0, [pc, #336]	; (8006a3c <_vfiprintf_r+0x220>)
 80068ec:	f7f9 fc78 	bl	80001e0 <memchr>
 80068f0:	9a04      	ldr	r2, [sp, #16]
 80068f2:	b9d8      	cbnz	r0, 800692c <_vfiprintf_r+0x110>
 80068f4:	06d1      	lsls	r1, r2, #27
 80068f6:	bf44      	itt	mi
 80068f8:	2320      	movmi	r3, #32
 80068fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fe:	0713      	lsls	r3, r2, #28
 8006900:	bf44      	itt	mi
 8006902:	232b      	movmi	r3, #43	; 0x2b
 8006904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006908:	f89a 3000 	ldrb.w	r3, [sl]
 800690c:	2b2a      	cmp	r3, #42	; 0x2a
 800690e:	d015      	beq.n	800693c <_vfiprintf_r+0x120>
 8006910:	9a07      	ldr	r2, [sp, #28]
 8006912:	4654      	mov	r4, sl
 8006914:	2000      	movs	r0, #0
 8006916:	f04f 0c0a 	mov.w	ip, #10
 800691a:	4621      	mov	r1, r4
 800691c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006920:	3b30      	subs	r3, #48	; 0x30
 8006922:	2b09      	cmp	r3, #9
 8006924:	d94d      	bls.n	80069c2 <_vfiprintf_r+0x1a6>
 8006926:	b1b0      	cbz	r0, 8006956 <_vfiprintf_r+0x13a>
 8006928:	9207      	str	r2, [sp, #28]
 800692a:	e014      	b.n	8006956 <_vfiprintf_r+0x13a>
 800692c:	eba0 0308 	sub.w	r3, r0, r8
 8006930:	fa09 f303 	lsl.w	r3, r9, r3
 8006934:	4313      	orrs	r3, r2
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	46a2      	mov	sl, r4
 800693a:	e7d2      	b.n	80068e2 <_vfiprintf_r+0xc6>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	1d19      	adds	r1, r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	9103      	str	r1, [sp, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfbb      	ittet	lt
 8006948:	425b      	neglt	r3, r3
 800694a:	f042 0202 	orrlt.w	r2, r2, #2
 800694e:	9307      	strge	r3, [sp, #28]
 8006950:	9307      	strlt	r3, [sp, #28]
 8006952:	bfb8      	it	lt
 8006954:	9204      	strlt	r2, [sp, #16]
 8006956:	7823      	ldrb	r3, [r4, #0]
 8006958:	2b2e      	cmp	r3, #46	; 0x2e
 800695a:	d10c      	bne.n	8006976 <_vfiprintf_r+0x15a>
 800695c:	7863      	ldrb	r3, [r4, #1]
 800695e:	2b2a      	cmp	r3, #42	; 0x2a
 8006960:	d134      	bne.n	80069cc <_vfiprintf_r+0x1b0>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	9203      	str	r2, [sp, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfb8      	it	lt
 800696e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006972:	3402      	adds	r4, #2
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a4c <_vfiprintf_r+0x230>
 800697a:	7821      	ldrb	r1, [r4, #0]
 800697c:	2203      	movs	r2, #3
 800697e:	4650      	mov	r0, sl
 8006980:	f7f9 fc2e 	bl	80001e0 <memchr>
 8006984:	b138      	cbz	r0, 8006996 <_vfiprintf_r+0x17a>
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	eba0 000a 	sub.w	r0, r0, sl
 800698c:	2240      	movs	r2, #64	; 0x40
 800698e:	4082      	lsls	r2, r0
 8006990:	4313      	orrs	r3, r2
 8006992:	3401      	adds	r4, #1
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699a:	4829      	ldr	r0, [pc, #164]	; (8006a40 <_vfiprintf_r+0x224>)
 800699c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069a0:	2206      	movs	r2, #6
 80069a2:	f7f9 fc1d 	bl	80001e0 <memchr>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d03f      	beq.n	8006a2a <_vfiprintf_r+0x20e>
 80069aa:	4b26      	ldr	r3, [pc, #152]	; (8006a44 <_vfiprintf_r+0x228>)
 80069ac:	bb1b      	cbnz	r3, 80069f6 <_vfiprintf_r+0x1da>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	3307      	adds	r3, #7
 80069b2:	f023 0307 	bic.w	r3, r3, #7
 80069b6:	3308      	adds	r3, #8
 80069b8:	9303      	str	r3, [sp, #12]
 80069ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069bc:	443b      	add	r3, r7
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	e768      	b.n	8006894 <_vfiprintf_r+0x78>
 80069c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c6:	460c      	mov	r4, r1
 80069c8:	2001      	movs	r0, #1
 80069ca:	e7a6      	b.n	800691a <_vfiprintf_r+0xfe>
 80069cc:	2300      	movs	r3, #0
 80069ce:	3401      	adds	r4, #1
 80069d0:	9305      	str	r3, [sp, #20]
 80069d2:	4619      	mov	r1, r3
 80069d4:	f04f 0c0a 	mov.w	ip, #10
 80069d8:	4620      	mov	r0, r4
 80069da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069de:	3a30      	subs	r2, #48	; 0x30
 80069e0:	2a09      	cmp	r2, #9
 80069e2:	d903      	bls.n	80069ec <_vfiprintf_r+0x1d0>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0c6      	beq.n	8006976 <_vfiprintf_r+0x15a>
 80069e8:	9105      	str	r1, [sp, #20]
 80069ea:	e7c4      	b.n	8006976 <_vfiprintf_r+0x15a>
 80069ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f0:	4604      	mov	r4, r0
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7f0      	b.n	80069d8 <_vfiprintf_r+0x1bc>
 80069f6:	ab03      	add	r3, sp, #12
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	462a      	mov	r2, r5
 80069fc:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <_vfiprintf_r+0x22c>)
 80069fe:	a904      	add	r1, sp, #16
 8006a00:	4630      	mov	r0, r6
 8006a02:	f3af 8000 	nop.w
 8006a06:	4607      	mov	r7, r0
 8006a08:	1c78      	adds	r0, r7, #1
 8006a0a:	d1d6      	bne.n	80069ba <_vfiprintf_r+0x19e>
 8006a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_vfiprintf_r+0x202>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	059a      	lsls	r2, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_vfiprintf_r+0x202>
 8006a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1a:	f7ff fe73 	bl	8006704 <__retarget_lock_release_recursive>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	065b      	lsls	r3, r3, #25
 8006a22:	f53f af1d 	bmi.w	8006860 <_vfiprintf_r+0x44>
 8006a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a28:	e71c      	b.n	8006864 <_vfiprintf_r+0x48>
 8006a2a:	ab03      	add	r3, sp, #12
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <_vfiprintf_r+0x22c>)
 8006a32:	a904      	add	r1, sp, #16
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 f879 	bl	8006b2c <_printf_i>
 8006a3a:	e7e4      	b.n	8006a06 <_vfiprintf_r+0x1ea>
 8006a3c:	08007428 	.word	0x08007428
 8006a40:	08007432 	.word	0x08007432
 8006a44:	00000000 	.word	0x00000000
 8006a48:	080067f7 	.word	0x080067f7
 8006a4c:	0800742e 	.word	0x0800742e

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4616      	mov	r6, r2
 8006a56:	4699      	mov	r9, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bfb8      	it	lt
 8006a64:	4613      	movlt	r3, r2
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	b10a      	cbz	r2, 8006a76 <_printf_common+0x26>
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6833      	ldrmi	r3, [r6, #0]
 8006a7e:	3302      	addmi	r3, #2
 8006a80:	6033      	strmi	r3, [r6, #0]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d106      	bne.n	8006a98 <_printf_common+0x48>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc26      	bgt.n	8006ae6 <_printf_common+0x96>
 8006a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a9c:	1e13      	subs	r3, r2, #0
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	0692      	lsls	r2, r2, #26
 8006aa6:	d42b      	bmi.n	8006b00 <_printf_common+0xb0>
 8006aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d01e      	beq.n	8006af4 <_printf_common+0xa4>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	f003 0306 	and.w	r3, r3, #6
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	bf02      	ittt	eq
 8006ac2:	68e5      	ldreq	r5, [r4, #12]
 8006ac4:	6833      	ldreq	r3, [r6, #0]
 8006ac6:	1aed      	subeq	r5, r5, r3
 8006ac8:	68a3      	ldr	r3, [r4, #8]
 8006aca:	bf0c      	ite	eq
 8006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad0:	2500      	movne	r5, #0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfc4      	itt	gt
 8006ad6:	1a9b      	subgt	r3, r3, r2
 8006ad8:	18ed      	addgt	r5, r5, r3
 8006ada:	2600      	movs	r6, #0
 8006adc:	341a      	adds	r4, #26
 8006ade:	42b5      	cmp	r5, r6
 8006ae0:	d11a      	bne.n	8006b18 <_printf_common+0xc8>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e008      	b.n	8006af8 <_printf_common+0xa8>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4652      	mov	r2, sl
 8006aea:	4649      	mov	r1, r9
 8006aec:	4638      	mov	r0, r7
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d103      	bne.n	8006afc <_printf_common+0xac>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7c6      	b.n	8006a8e <_printf_common+0x3e>
 8006b00:	18e1      	adds	r1, r4, r3
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	2030      	movs	r0, #48	; 0x30
 8006b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0a:	4422      	add	r2, r4
 8006b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b14:	3302      	adds	r3, #2
 8006b16:	e7c7      	b.n	8006aa8 <_printf_common+0x58>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d0e6      	beq.n	8006af4 <_printf_common+0xa4>
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7d9      	b.n	8006ade <_printf_common+0x8e>
	...

08006b2c <_printf_i>:
 8006b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	7e0f      	ldrb	r7, [r1, #24]
 8006b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b34:	2f78      	cmp	r7, #120	; 0x78
 8006b36:	4691      	mov	r9, r2
 8006b38:	4680      	mov	r8, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	469a      	mov	sl, r3
 8006b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b42:	d807      	bhi.n	8006b54 <_printf_i+0x28>
 8006b44:	2f62      	cmp	r7, #98	; 0x62
 8006b46:	d80a      	bhi.n	8006b5e <_printf_i+0x32>
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f000 80d4 	beq.w	8006cf6 <_printf_i+0x1ca>
 8006b4e:	2f58      	cmp	r7, #88	; 0x58
 8006b50:	f000 80c0 	beq.w	8006cd4 <_printf_i+0x1a8>
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b5c:	e03a      	b.n	8006bd4 <_printf_i+0xa8>
 8006b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b62:	2b15      	cmp	r3, #21
 8006b64:	d8f6      	bhi.n	8006b54 <_printf_i+0x28>
 8006b66:	a101      	add	r1, pc, #4	; (adr r1, 8006b6c <_printf_i+0x40>)
 8006b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006b55 	.word	0x08006b55
 8006b78:	08006b55 	.word	0x08006b55
 8006b7c:	08006b55 	.word	0x08006b55
 8006b80:	08006b55 	.word	0x08006b55
 8006b84:	08006bd9 	.word	0x08006bd9
 8006b88:	08006b55 	.word	0x08006b55
 8006b8c:	08006b55 	.word	0x08006b55
 8006b90:	08006b55 	.word	0x08006b55
 8006b94:	08006b55 	.word	0x08006b55
 8006b98:	08006cdd 	.word	0x08006cdd
 8006b9c:	08006c05 	.word	0x08006c05
 8006ba0:	08006c97 	.word	0x08006c97
 8006ba4:	08006b55 	.word	0x08006b55
 8006ba8:	08006b55 	.word	0x08006b55
 8006bac:	08006cff 	.word	0x08006cff
 8006bb0:	08006b55 	.word	0x08006b55
 8006bb4:	08006c05 	.word	0x08006c05
 8006bb8:	08006b55 	.word	0x08006b55
 8006bbc:	08006b55 	.word	0x08006b55
 8006bc0:	08006c9f 	.word	0x08006c9f
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e09f      	b.n	8006d18 <_printf_i+0x1ec>
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	0607      	lsls	r7, r0, #24
 8006bde:	f103 0104 	add.w	r1, r3, #4
 8006be2:	6029      	str	r1, [r5, #0]
 8006be4:	d501      	bpl.n	8006bea <_printf_i+0xbe>
 8006be6:	681e      	ldr	r6, [r3, #0]
 8006be8:	e003      	b.n	8006bf2 <_printf_i+0xc6>
 8006bea:	0646      	lsls	r6, r0, #25
 8006bec:	d5fb      	bpl.n	8006be6 <_printf_i+0xba>
 8006bee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bf2:	2e00      	cmp	r6, #0
 8006bf4:	da03      	bge.n	8006bfe <_printf_i+0xd2>
 8006bf6:	232d      	movs	r3, #45	; 0x2d
 8006bf8:	4276      	negs	r6, r6
 8006bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfe:	485a      	ldr	r0, [pc, #360]	; (8006d68 <_printf_i+0x23c>)
 8006c00:	230a      	movs	r3, #10
 8006c02:	e012      	b.n	8006c2a <_printf_i+0xfe>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	1d19      	adds	r1, r3, #4
 8006c0a:	6029      	str	r1, [r5, #0]
 8006c0c:	0605      	lsls	r5, r0, #24
 8006c0e:	d501      	bpl.n	8006c14 <_printf_i+0xe8>
 8006c10:	681e      	ldr	r6, [r3, #0]
 8006c12:	e002      	b.n	8006c1a <_printf_i+0xee>
 8006c14:	0641      	lsls	r1, r0, #25
 8006c16:	d5fb      	bpl.n	8006c10 <_printf_i+0xe4>
 8006c18:	881e      	ldrh	r6, [r3, #0]
 8006c1a:	4853      	ldr	r0, [pc, #332]	; (8006d68 <_printf_i+0x23c>)
 8006c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c1e:	bf0c      	ite	eq
 8006c20:	2308      	moveq	r3, #8
 8006c22:	230a      	movne	r3, #10
 8006c24:	2100      	movs	r1, #0
 8006c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c2a:	6865      	ldr	r5, [r4, #4]
 8006c2c:	60a5      	str	r5, [r4, #8]
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	bfa2      	ittt	ge
 8006c32:	6821      	ldrge	r1, [r4, #0]
 8006c34:	f021 0104 	bicge.w	r1, r1, #4
 8006c38:	6021      	strge	r1, [r4, #0]
 8006c3a:	b90e      	cbnz	r6, 8006c40 <_printf_i+0x114>
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	d04b      	beq.n	8006cd8 <_printf_i+0x1ac>
 8006c40:	4615      	mov	r5, r2
 8006c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c46:	fb03 6711 	mls	r7, r3, r1, r6
 8006c4a:	5dc7      	ldrb	r7, [r0, r7]
 8006c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c50:	4637      	mov	r7, r6
 8006c52:	42bb      	cmp	r3, r7
 8006c54:	460e      	mov	r6, r1
 8006c56:	d9f4      	bls.n	8006c42 <_printf_i+0x116>
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d10b      	bne.n	8006c74 <_printf_i+0x148>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	07de      	lsls	r6, r3, #31
 8006c60:	d508      	bpl.n	8006c74 <_printf_i+0x148>
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	6861      	ldr	r1, [r4, #4]
 8006c66:	4299      	cmp	r1, r3
 8006c68:	bfde      	ittt	le
 8006c6a:	2330      	movle	r3, #48	; 0x30
 8006c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c74:	1b52      	subs	r2, r2, r5
 8006c76:	6122      	str	r2, [r4, #16]
 8006c78:	f8cd a000 	str.w	sl, [sp]
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	aa03      	add	r2, sp, #12
 8006c80:	4621      	mov	r1, r4
 8006c82:	4640      	mov	r0, r8
 8006c84:	f7ff fee4 	bl	8006a50 <_printf_common>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d14a      	bne.n	8006d22 <_printf_i+0x1f6>
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	b004      	add	sp, #16
 8006c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	f043 0320 	orr.w	r3, r3, #32
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	4833      	ldr	r0, [pc, #204]	; (8006d6c <_printf_i+0x240>)
 8006ca0:	2778      	movs	r7, #120	; 0x78
 8006ca2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	6829      	ldr	r1, [r5, #0]
 8006caa:	061f      	lsls	r7, r3, #24
 8006cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb0:	d402      	bmi.n	8006cb8 <_printf_i+0x18c>
 8006cb2:	065f      	lsls	r7, r3, #25
 8006cb4:	bf48      	it	mi
 8006cb6:	b2b6      	uxthmi	r6, r6
 8006cb8:	07df      	lsls	r7, r3, #31
 8006cba:	bf48      	it	mi
 8006cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc0:	6029      	str	r1, [r5, #0]
 8006cc2:	bf48      	it	mi
 8006cc4:	6023      	strmi	r3, [r4, #0]
 8006cc6:	b91e      	cbnz	r6, 8006cd0 <_printf_i+0x1a4>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	f023 0320 	bic.w	r3, r3, #32
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	e7a7      	b.n	8006c24 <_printf_i+0xf8>
 8006cd4:	4824      	ldr	r0, [pc, #144]	; (8006d68 <_printf_i+0x23c>)
 8006cd6:	e7e4      	b.n	8006ca2 <_printf_i+0x176>
 8006cd8:	4615      	mov	r5, r2
 8006cda:	e7bd      	b.n	8006c58 <_printf_i+0x12c>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	6826      	ldr	r6, [r4, #0]
 8006ce0:	6961      	ldr	r1, [r4, #20]
 8006ce2:	1d18      	adds	r0, r3, #4
 8006ce4:	6028      	str	r0, [r5, #0]
 8006ce6:	0635      	lsls	r5, r6, #24
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	d501      	bpl.n	8006cf0 <_printf_i+0x1c4>
 8006cec:	6019      	str	r1, [r3, #0]
 8006cee:	e002      	b.n	8006cf6 <_printf_i+0x1ca>
 8006cf0:	0670      	lsls	r0, r6, #25
 8006cf2:	d5fb      	bpl.n	8006cec <_printf_i+0x1c0>
 8006cf4:	8019      	strh	r1, [r3, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	4615      	mov	r5, r2
 8006cfc:	e7bc      	b.n	8006c78 <_printf_i+0x14c>
 8006cfe:	682b      	ldr	r3, [r5, #0]
 8006d00:	1d1a      	adds	r2, r3, #4
 8006d02:	602a      	str	r2, [r5, #0]
 8006d04:	681d      	ldr	r5, [r3, #0]
 8006d06:	6862      	ldr	r2, [r4, #4]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f7f9 fa68 	bl	80001e0 <memchr>
 8006d10:	b108      	cbz	r0, 8006d16 <_printf_i+0x1ea>
 8006d12:	1b40      	subs	r0, r0, r5
 8006d14:	6060      	str	r0, [r4, #4]
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d20:	e7aa      	b.n	8006c78 <_printf_i+0x14c>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	462a      	mov	r2, r5
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	47d0      	blx	sl
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d0ad      	beq.n	8006c8c <_printf_i+0x160>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	079b      	lsls	r3, r3, #30
 8006d34:	d413      	bmi.n	8006d5e <_printf_i+0x232>
 8006d36:	68e0      	ldr	r0, [r4, #12]
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	bfb8      	it	lt
 8006d3e:	4618      	movlt	r0, r3
 8006d40:	e7a6      	b.n	8006c90 <_printf_i+0x164>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4632      	mov	r2, r6
 8006d46:	4649      	mov	r1, r9
 8006d48:	4640      	mov	r0, r8
 8006d4a:	47d0      	blx	sl
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d09d      	beq.n	8006c8c <_printf_i+0x160>
 8006d50:	3501      	adds	r5, #1
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	9903      	ldr	r1, [sp, #12]
 8006d56:	1a5b      	subs	r3, r3, r1
 8006d58:	42ab      	cmp	r3, r5
 8006d5a:	dcf2      	bgt.n	8006d42 <_printf_i+0x216>
 8006d5c:	e7eb      	b.n	8006d36 <_printf_i+0x20a>
 8006d5e:	2500      	movs	r5, #0
 8006d60:	f104 0619 	add.w	r6, r4, #25
 8006d64:	e7f5      	b.n	8006d52 <_printf_i+0x226>
 8006d66:	bf00      	nop
 8006d68:	08007439 	.word	0x08007439
 8006d6c:	0800744a 	.word	0x0800744a

08006d70 <__sflush_r>:
 8006d70:	898a      	ldrh	r2, [r1, #12]
 8006d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d76:	4605      	mov	r5, r0
 8006d78:	0710      	lsls	r0, r2, #28
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	d458      	bmi.n	8006e30 <__sflush_r+0xc0>
 8006d7e:	684b      	ldr	r3, [r1, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dc05      	bgt.n	8006d90 <__sflush_r+0x20>
 8006d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	dc02      	bgt.n	8006d90 <__sflush_r+0x20>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	d0f9      	beq.n	8006d8a <__sflush_r+0x1a>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d9c:	682f      	ldr	r7, [r5, #0]
 8006d9e:	6a21      	ldr	r1, [r4, #32]
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	d032      	beq.n	8006e0a <__sflush_r+0x9a>
 8006da4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	075a      	lsls	r2, r3, #29
 8006daa:	d505      	bpl.n	8006db8 <__sflush_r+0x48>
 8006dac:	6863      	ldr	r3, [r4, #4]
 8006dae:	1ac0      	subs	r0, r0, r3
 8006db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006db2:	b10b      	cbz	r3, 8006db8 <__sflush_r+0x48>
 8006db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006db6:	1ac0      	subs	r0, r0, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dbe:	6a21      	ldr	r1, [r4, #32]
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b0      	blx	r6
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	d106      	bne.n	8006dd8 <__sflush_r+0x68>
 8006dca:	6829      	ldr	r1, [r5, #0]
 8006dcc:	291d      	cmp	r1, #29
 8006dce:	d82b      	bhi.n	8006e28 <__sflush_r+0xb8>
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <__sflush_r+0x108>)
 8006dd2:	410a      	asrs	r2, r1
 8006dd4:	07d6      	lsls	r6, r2, #31
 8006dd6:	d427      	bmi.n	8006e28 <__sflush_r+0xb8>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	6062      	str	r2, [r4, #4]
 8006ddc:	04d9      	lsls	r1, r3, #19
 8006dde:	6922      	ldr	r2, [r4, #16]
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	d504      	bpl.n	8006dee <__sflush_r+0x7e>
 8006de4:	1c42      	adds	r2, r0, #1
 8006de6:	d101      	bne.n	8006dec <__sflush_r+0x7c>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b903      	cbnz	r3, 8006dee <__sflush_r+0x7e>
 8006dec:	6560      	str	r0, [r4, #84]	; 0x54
 8006dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df0:	602f      	str	r7, [r5, #0]
 8006df2:	2900      	cmp	r1, #0
 8006df4:	d0c9      	beq.n	8006d8a <__sflush_r+0x1a>
 8006df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	d002      	beq.n	8006e04 <__sflush_r+0x94>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f7ff fc96 	bl	8006730 <_free_r>
 8006e04:	2000      	movs	r0, #0
 8006e06:	6360      	str	r0, [r4, #52]	; 0x34
 8006e08:	e7c0      	b.n	8006d8c <__sflush_r+0x1c>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b0      	blx	r6
 8006e10:	1c41      	adds	r1, r0, #1
 8006e12:	d1c8      	bne.n	8006da6 <__sflush_r+0x36>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0c5      	beq.n	8006da6 <__sflush_r+0x36>
 8006e1a:	2b1d      	cmp	r3, #29
 8006e1c:	d001      	beq.n	8006e22 <__sflush_r+0xb2>
 8006e1e:	2b16      	cmp	r3, #22
 8006e20:	d101      	bne.n	8006e26 <__sflush_r+0xb6>
 8006e22:	602f      	str	r7, [r5, #0]
 8006e24:	e7b1      	b.n	8006d8a <__sflush_r+0x1a>
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	e7ad      	b.n	8006d8c <__sflush_r+0x1c>
 8006e30:	690f      	ldr	r7, [r1, #16]
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	d0a9      	beq.n	8006d8a <__sflush_r+0x1a>
 8006e36:	0793      	lsls	r3, r2, #30
 8006e38:	680e      	ldr	r6, [r1, #0]
 8006e3a:	bf08      	it	eq
 8006e3c:	694b      	ldreq	r3, [r1, #20]
 8006e3e:	600f      	str	r7, [r1, #0]
 8006e40:	bf18      	it	ne
 8006e42:	2300      	movne	r3, #0
 8006e44:	eba6 0807 	sub.w	r8, r6, r7
 8006e48:	608b      	str	r3, [r1, #8]
 8006e4a:	f1b8 0f00 	cmp.w	r8, #0
 8006e4e:	dd9c      	ble.n	8006d8a <__sflush_r+0x1a>
 8006e50:	6a21      	ldr	r1, [r4, #32]
 8006e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e54:	4643      	mov	r3, r8
 8006e56:	463a      	mov	r2, r7
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b0      	blx	r6
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	dc06      	bgt.n	8006e6e <__sflush_r+0xfe>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e66:	81a3      	strh	r3, [r4, #12]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	e78e      	b.n	8006d8c <__sflush_r+0x1c>
 8006e6e:	4407      	add	r7, r0
 8006e70:	eba8 0800 	sub.w	r8, r8, r0
 8006e74:	e7e9      	b.n	8006e4a <__sflush_r+0xda>
 8006e76:	bf00      	nop
 8006e78:	dfbffffe 	.word	0xdfbffffe

08006e7c <_fflush_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	690b      	ldr	r3, [r1, #16]
 8006e80:	4605      	mov	r5, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	b913      	cbnz	r3, 8006e8c <_fflush_r+0x10>
 8006e86:	2500      	movs	r5, #0
 8006e88:	4628      	mov	r0, r5
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	b118      	cbz	r0, 8006e96 <_fflush_r+0x1a>
 8006e8e:	6a03      	ldr	r3, [r0, #32]
 8006e90:	b90b      	cbnz	r3, 8006e96 <_fflush_r+0x1a>
 8006e92:	f7ff fa8d 	bl	80063b0 <__sinit>
 8006e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f3      	beq.n	8006e86 <_fflush_r+0xa>
 8006e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ea0:	07d0      	lsls	r0, r2, #31
 8006ea2:	d404      	bmi.n	8006eae <_fflush_r+0x32>
 8006ea4:	0599      	lsls	r1, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_fflush_r+0x32>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eaa:	f7ff fc2a 	bl	8006702 <__retarget_lock_acquire_recursive>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f7ff ff5d 	bl	8006d70 <__sflush_r>
 8006eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb8:	07da      	lsls	r2, r3, #31
 8006eba:	4605      	mov	r5, r0
 8006ebc:	d4e4      	bmi.n	8006e88 <_fflush_r+0xc>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	059b      	lsls	r3, r3, #22
 8006ec2:	d4e1      	bmi.n	8006e88 <_fflush_r+0xc>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f7ff fc1d 	bl	8006704 <__retarget_lock_release_recursive>
 8006eca:	e7dd      	b.n	8006e88 <_fflush_r+0xc>

08006ecc <__swhatbuf_r>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	b096      	sub	sp, #88	; 0x58
 8006ed8:	4615      	mov	r5, r2
 8006eda:	461e      	mov	r6, r3
 8006edc:	da0d      	bge.n	8006efa <__swhatbuf_r+0x2e>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ee4:	f04f 0100 	mov.w	r1, #0
 8006ee8:	bf0c      	ite	eq
 8006eea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006eee:	2340      	movne	r3, #64	; 0x40
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	6031      	str	r1, [r6, #0]
 8006ef4:	602b      	str	r3, [r5, #0]
 8006ef6:	b016      	add	sp, #88	; 0x58
 8006ef8:	bd70      	pop	{r4, r5, r6, pc}
 8006efa:	466a      	mov	r2, sp
 8006efc:	f000 f878 	bl	8006ff0 <_fstat_r>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	dbec      	blt.n	8006ede <__swhatbuf_r+0x12>
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f0e:	4259      	negs	r1, r3
 8006f10:	4159      	adcs	r1, r3
 8006f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f16:	e7eb      	b.n	8006ef0 <__swhatbuf_r+0x24>

08006f18 <__smakebuf_r>:
 8006f18:	898b      	ldrh	r3, [r1, #12]
 8006f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f1c:	079d      	lsls	r5, r3, #30
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	d507      	bpl.n	8006f34 <__smakebuf_r+0x1c>
 8006f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	b002      	add	sp, #8
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	ab01      	add	r3, sp, #4
 8006f36:	466a      	mov	r2, sp
 8006f38:	f7ff ffc8 	bl	8006ecc <__swhatbuf_r>
 8006f3c:	9900      	ldr	r1, [sp, #0]
 8006f3e:	4605      	mov	r5, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff f91d 	bl	8006180 <_malloc_r>
 8006f46:	b948      	cbnz	r0, 8006f5c <__smakebuf_r+0x44>
 8006f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d4ef      	bmi.n	8006f30 <__smakebuf_r+0x18>
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	f043 0302 	orr.w	r3, r3, #2
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	e7e3      	b.n	8006f24 <__smakebuf_r+0xc>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	6020      	str	r0, [r4, #0]
 8006f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	9b00      	ldr	r3, [sp, #0]
 8006f68:	6163      	str	r3, [r4, #20]
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	6120      	str	r0, [r4, #16]
 8006f6e:	b15b      	cbz	r3, 8006f88 <__smakebuf_r+0x70>
 8006f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f74:	4630      	mov	r0, r6
 8006f76:	f000 f84d 	bl	8007014 <_isatty_r>
 8006f7a:	b128      	cbz	r0, 8006f88 <__smakebuf_r+0x70>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	81a3      	strh	r3, [r4, #12]
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	431d      	orrs	r5, r3
 8006f8c:	81a5      	strh	r5, [r4, #12]
 8006f8e:	e7cf      	b.n	8006f30 <__smakebuf_r+0x18>

08006f90 <_raise_r>:
 8006f90:	291f      	cmp	r1, #31
 8006f92:	b538      	push	{r3, r4, r5, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	d904      	bls.n	8006fa4 <_raise_r+0x14>
 8006f9a:	2316      	movs	r3, #22
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006fa6:	b112      	cbz	r2, 8006fae <_raise_r+0x1e>
 8006fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fac:	b94b      	cbnz	r3, 8006fc2 <_raise_r+0x32>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f852 	bl	8007058 <_getpid_r>
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	4620      	mov	r0, r4
 8006fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fbe:	f000 b839 	b.w	8007034 <_kill_r>
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d00a      	beq.n	8006fdc <_raise_r+0x4c>
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	d103      	bne.n	8006fd2 <_raise_r+0x42>
 8006fca:	2316      	movs	r3, #22
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e7e7      	b.n	8006fa2 <_raise_r+0x12>
 8006fd2:	2400      	movs	r4, #0
 8006fd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fd8:	4628      	mov	r0, r5
 8006fda:	4798      	blx	r3
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7e0      	b.n	8006fa2 <_raise_r+0x12>

08006fe0 <raise>:
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <raise+0xc>)
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f7ff bfd3 	b.w	8006f90 <_raise_r>
 8006fea:	bf00      	nop
 8006fec:	200000ec 	.word	0x200000ec

08006ff0 <_fstat_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	; (8007010 <_fstat_r+0x20>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f7fb fe48 	bl	8002c92 <_fstat>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d102      	bne.n	800700c <_fstat_r+0x1c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b103      	cbz	r3, 800700c <_fstat_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	200004ec 	.word	0x200004ec

08007014 <_isatty_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d06      	ldr	r5, [pc, #24]	; (8007030 <_isatty_r+0x1c>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7fb fe47 	bl	8002cb2 <_isatty>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_isatty_r+0x1a>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_isatty_r+0x1a>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	200004ec 	.word	0x200004ec

08007034 <_kill_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	; (8007054 <_kill_r+0x20>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	f7fb fdc7 	bl	8002bd4 <_kill>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d102      	bne.n	8007050 <_kill_r+0x1c>
 800704a:	682b      	ldr	r3, [r5, #0]
 800704c:	b103      	cbz	r3, 8007050 <_kill_r+0x1c>
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	200004ec 	.word	0x200004ec

08007058 <_getpid_r>:
 8007058:	f7fb bdb4 	b.w	8002bc4 <_getpid>

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
